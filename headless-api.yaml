openapi: 3.0.3
info:
  title: Tebex Headless API
  description: |-
    The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.
  termsOfService: https://tebex.io/terms-creator-agreement
  contact:
    email: tebex-integrations@overwolf.com
  license:
    name: MIT
    url: https://opensource.org/license/mit
  version: 1.0.0
servers:
  - url: https://headless.tebex.io/api
tags:
  # - name: Ident
  #   description: A string identifier representing the basket
  # - name: Basket
  #   description: The basket, similar to a standard eCommerce basket will contain the items that the customer is purchasing.
  # - name: Categories
  #   description: Each store can have Categories of Packages that the webstore owner can define in order to better organize their packages offered.
  # - name: Coupons
  #   description: Coupons define and apply a discount to a given package.
  # - name: Gift Cards
  #   description: Gift cards can be presented as a form of payment for a basket, reducing the basket amount due.
  # - name: Creator Codes
  #   description: Purchases can be attributed to Creators for revenue sharing.
  # - name: Packages
  #   description: A package is a pre-defined item for sale.
  - name: Basket Packages
    description: A basket package is a Package within a basket
  - name: Webstores
    description: Webstore is the term for a Tebex store.
  - name: Headless
    description: Endpoints which interact with a basket requiring the basket ID
paths:
  /accounts/{token}:
    get:
      tags:
      - Headless
      operationId: getWebstoreById
      summary: Fetch a webstore by its identifier
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: some-uuid
          required: true
          description: The webstore identifier.
      description: |- 
          Gets the webstore associated with the provided identifier.
      responses:
        '200':
          description: |- 
            Successful response returns the webstore's information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebstoreResponse"
  /accounts/{token}/pages:
    get:
      tags:
      - Headless
      operationId: getCMSPages
      summary: Fetch the custom pages associated with the store.
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: some-uuid
          required: true
          description: The webstore identifier.
      description: |-
        Gets a list of custom pages associated with the webstore. These contain a `content` variable with the HTML content of the page.
      responses:
        '200':
          description: |-
            Successful response returns the webstore's pages.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CMSPagesResponse"

  /accounts/{token}/baskets/{basketIdent}:
    get:
      tags:
      - Headless
      operationId: getBasketById
      summary: Fetch a basket from a webstore by its identifier
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb
          required: true
          description: The webstore identifier.
        - in: path
          name: basketIdent
          schema:
            type: string
            example: c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c
          required: true
          description: The basket identifier.
      description: |- 
          Gets a basket associated with the provided identifier.
      responses:
        '200':
          description: |- 
            Successful response returns the basket information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketResponse'
        # '422':
        #   description: The provided webstore ID is invalid.
  /accounts/{token}/baskets:
    post:
      tags:
      - Headless
      operationId: createBasket
      summary: Create a new basket
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb
          required: true
          description: The webstore identifier.
      description: |- 
          Creates a new basket for use during checkout.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                complete_url:
                  type: string
                  description: A URL the user can return to when checkout is completed.
                  example: "https://example.tebex.io/thank-you"
                cancel_url:
                  type: string
                  description: A URL the user can return to when cancelling checkout.
                  example: "https://tebex.io/"
                custom:
                  type: object
                  description: Custom data you wish to associate with the basket. This data will be included with webhook responses and GET requests associated with the Basket.
                  example: {
                    "foo": "bar"
                  }
                complete_auto_redirect:
                  type: boolean
                  example: true
                  description: True if the user should automatically be redirected to the relevant complete/cancel URL #TODO
      responses:
        '200':
          description: |- 
            Successful response returns the basket information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketResponse'
        '422':
          description: The provided webstore ID is invalid.
  /accounts/{token}/baskets/{basketIdent}/auth?returnUrl={returnUrl}:
    get:
      tags:
      - Headless
      operationId: getBasketAuthUrl
      summary: Get authentication links for a basket.
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb
          required: true
          description: The webstore identifier.
        - in: path
          name: basketIdent
          schema:
            type: string
            example: c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c
          required: true
          description: The basket identifier.
        - in: path
          name: returnUrl
          description: The URL you would like to redirect the user to after successful basket authentication.
          schema:
            type: string
            example: https://example.tebex.io/
          required: true
      description: |- 
          Fetches a basket's auth URL.
      responses:
        '200':
          description: |- 
            Successful response returns the basket auth information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketAuthResponse'
        '422':
          description: The provided webstore ID or basket ID is invalid.
  /accounts/{token}/categories:
    get:
      tags:
      - Headless
      operationId: getAllCategories
      summary: Gets all categories available in the webstore.
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb
          required: true
          description: The webstore identifier.
      description: |- 
          Gets all categories from a webstore. This does not include package information. To include package information, add `?includePackages=1` to the URL.
      responses:
        '200':
          description: |- 
            Successful response returns a list of category information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
                      
  /accounts/{token}/categories?includePackages=1:
    get:
      tags:
      - Headless
      operationId: getAllCategoriesIncludingPackages
      summary: Gets a store's categories including all package information with them.
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb
          required: true
          description: The webstore identifier.
      description: |- 
          Gets all categories from a webstore including packages.
      responses:
        '200':
          description: |- 
            Successful response returns a list of category information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'

  /accounts/{token}/categories/{categoryId}:
    get:
      tags:
      - Headless
      operationId: getCategoryById
      summary: Gets information about a specific category
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb
          required: true
          description: The webstore identifier.
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
            example: 127244343
          description: The ID of the category to fetch.
      description: |- 
          Gets information about a category and returns the packages in that category.
      responses:
        '200':
          description: |- 
            Successful response returns the category without package information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'

  /accounts/{token}/categories/{categoryId}?includePackages=1:
    get:
      tags:
      - Headless
      operationId: getCategoryIncludingPackages
      summary: Gets information about a specific category, including all the packages in the category
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb
          required: true
          description: The webstore identifier.
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
            example: 127244343
          description: The ID of the category to fetch.
      description: |- 
          Gets information about a category and returns the packages in that category.
      responses:
        '200':
          description: |- 
            Successful response returns the category with package information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'

  /accounts/{token}/packages/{packageId}:
    get:
      tags:
      - Headless
      operationId: getPackageById
      summary: Fetch a package from a webstore by its identifier
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb
          required: true
          description: The webstore identifier.
        - in: path
          name: packageId
          schema:
            type: number
            example: 1272441812
          required: true
          description: The package's ID.
      description: |- 
          Gets a package from a webstore by ID.
      responses:
        '200':
          description: |- 
            Successful response returns the package information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageResponse'
  /accounts/{token}/packages:
    get:
      tags:
      - Headless
      operationId: getAllPackages
      summary: Fetch all packages from a webstore
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb
          required: true
          description: The webstore identifier.
      description: |- 
          Gets all packages from a webstore.
      responses:
        '200':
          description: |- 
            Successful response returns a list of package information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageResponse'
  /accounts/{token}/packages?ipAddress={ipAddress}:
    get:
      tags:
      - Headless
      operationId: getAllPackagesWithAuthedIP
      summary: Fetch a package from a webstore by its identifier
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb
          required: true
          description: The webstore identifier.
        - in: path
          name: ipAddress
          required: true
          schema:
            type: string
            example: 127.0.0.1
          description: An IP address can be provided with authenticated requests. #TODO why?
      description: |- 
          Gets all packages from a webstore.
      responses:
        '200':
          description: |- 
            Successful response returns a list of package information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageResponse'
        '422':
          description: The provided request is invalid.
  /accounts/{token}/packages?basketIdent={basketIdent}:
    get:
      tags:
      - Headless
      operationId: getAllPackagesWithBasket
      summary: Fetch a package from a webstore by its identifier
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb
          required: true
          description: The webstore identifier.
        - in: path
          name: basketIdent
          required: true
          schema:
            type: string
            example: c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c
          description: The basket identifier. #TODO why?
      description: |- 
          Gets all packages from a webstore.
      responses:
        '200':
          description: |- 
            Successful response returns a list of package information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageResponse'
        '422':
          description: The provided request is invalid.
  /accounts/{token}/packages?ipAddress={ipAddress}&basketIdent={basketIdent}:
    get:
      tags:
      - Headless
      operationId: getAllPackagesWithAuthedIPAndBasket
      summary: Fetch a package from a webstore by its identifier
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb
          required: true
          description: The webstore identifier.
        - in: path
          name: basketIdent
          required: true
          schema:
            type: string
            example: c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c
          description: The basket identifier. #TODO why?
        - in: path
          name: ipAddress
          required: true
          schema:
            type: string
            example: 127.0.0.1
          description: An IP address can be provided with authenticated requests. #TODO why?
      description: |- 
          Gets all packages from a webstore.
      responses:
        '200':
          description: |- 
            Successful response returns a list of package information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PackageResponse'
        '422':
          description: The provided request is invalid.
  /accounts/{token}/baskets/{basketIdent}/creator-codes:
    post:
      tags:
      - Headless
      operationId: applyCreatorCode
      summary: Apply a creator code to a basket.
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb
          required: true
          description: The webstore identifier.
        - in: path
          name: basketIdent
          schema:
            type: string
            example: c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c
          required: true
          description: The basket identifier.
      description: |- 
          Applies a creator code to a basket.
      requestBody:
        description: Provide a `creator_code` to apply to the basket.
        content:
          application/json:
            schema:
              type: object
              properties:
                creator_code:
                  type: string
                  example: Academy10
      responses:
        '200':
          description: |- 
            Successful response returns the basket.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketResponse'
        '422':
          description: The provided request is invalid. The error response will include detail as to which parameter failed validation.
  /accounts/{token}/baskets/{basketIdent}/creator-codes/remove:
    post:
      tags:
      - Headless
      operationId: removeCreatorCode
      summary: Remove a creator code from the basket.
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb
          required: true
          description: The webstore identifier.
        - in: path
          name: basketIdent
          schema:
            type: string
            example: c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c
          required: true
          description: The basket identifier.
      description: |- 
          Applies a creator code to a basket.
      responses:
        '200':
          description: |- 
            Creator code removed successfully.
        '422':
          description: The provided request is invalid. The error response will include detail as to which parameter failed validation.
  /accounts/{token}/baskets/{basketIdent}/giftcards:
    post:
      tags:
      - Headless
      operationId: applyGiftCard
      summary: Apply a gift card to a basket.
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb
          required: true
          description: The webstore identifier.
        - in: path
          name: basketIdent
          schema:
            type: string
            example: c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c
          required: true
          description: The basket identifier.
      description: |- 
          Applies a creator code to a basket.
      requestBody:
        description: Provide a `card_number` to apply to the basket.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GiftCard'
      responses:
        '200':
          description: |- 
            Successful response returns the basket.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketResponse'
  /accounts/{token}/baskets/{basketIdent}/giftcards/remove:
    post:
      tags:
      - Headless
      operationId: removeGiftCard
      summary: Remove a gift card from the basket.
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb
          required: true
          description: The webstore identifier.
        - in: path
          name: basketIdent
          schema:
            type: string
            example: c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c
          required: true
          description: The basket identifier.
      description: |- 
          Removes a gift card from the basket.
      requestBody:
        description: Provide the `card_number` to remove from the basket.
        content:
          application/json:
            schema:
              type: object
              properties:
                card_number:
                  type: string
                  example: "0127 0244 7210 1111"
      responses:
        '200':
          description: |- 
            Gift card removed successfully.
        '422':
          description: The provided request is invalid. The error response will include detail as to which parameter failed validation.
  /accounts/{token}/baskets/{basketIdent}/coupons:
    post:
      tags:
      - Headless
      operationId: applyCoupon
      summary: Apply a coupon to a basket.
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb
          required: true
          description: The webstore identifier.
        - in: path
          name: basketIdent
          schema:
            type: string
            example: c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c
          required: true
          description: The basket identifier.
      description: |- 
          Applies a creator code to a basket.
      requestBody:
        description: Provide a `coupon_code` to apply to the basket.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coupon'
      responses:
        '200':
          description: |- 
            Successful response returns the basket.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasketResponse'

  /accounts/{token}/baskets/{basketIdent}/coupons/remove:
    post:
      tags:
      - Headless
      operationId: removeCoupon
      summary: Remove a coupon from the basket.
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb
          required: true
          description: The webstore identifier.
        - in: path
          name: basketIdent
          schema:
            type: string
            example: c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c
          required: true
          description: The basket identifier.
      description: |- 
          Removes a coupon code from a basket
      responses:
        '200':
          description: |- 
            Successful response.
        '422':
          description: The provided request is invalid. The error response will include detail as to which parameter failed validation.
  /baskets/{basketIdent}/packages:
   post:
      tags:
      - Headless
      operationId: addBasketPackage
      summary: Add a package to a basket
      parameters:
        - in: path
          name: basketIdent
          schema:
            type: string
            example: c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c
          required: true
          description: The basket identifier.
      description: |- 
          Add a package with the given ID to the basket.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                package_id: 
                  type: string
                  example: 6276316
                quantity:
                  type: number
                  example: 1
      responses:
        '200':
          description: |- 
            Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '422':
          description: The provided request is invalid. The error response will include detail as to which parameter failed validation.
  /baskets/{basketIdent}/packages/remove:
    post:
      tags:
      - Headless
      operationId: removeBasketPackage
      summary: Remove a package from a basket
      parameters:
        - in: path
          name: basketIdent
          schema:
            type: string
            example: c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c
          required: true
          description: The basket identifier.
      description: |- 
          Remove the given package ID from the basket.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                package_id: 
                  type: string
                  example: 6276316
      responses:
        '200':
          description: |- 
            Successful response returns the basket.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basket'
        '422':
          description: The provided request is invalid. The error response will include detail as to which parameter failed validation.
  /baskets/{basketIdent}/packages/{packageId}:
    put:
      tags:
      - Headless
      operationId: updatePackageQuantity
      summary: Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed.
      parameters:
        - in: path
          name: basketIdent
          schema:
            type: string
            example: c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c
          required: true
          description: The basket identifier.
        - in: path
          name: packageId
          schema:
            type: number
            example: 6276316
          required: true
          description: The package identifier.
      description: |- 
          Sets the quantity of the given item in the basket.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: number
                  example: 1
      responses:
        '200':
          description: |- 
            Successful response.
        '422':
          description: The provided request is invalid. The error response will include detail as to which parameter failed validation.
  /accounts/{token}/tiers/{tierId}:
    patch:
      tags:
      - Headless
      operationId: updateTier
      summary: TODO
      parameters:
        - in: path
          name: token
          schema:
            type: string
            example: some-uuid
          required: true
          description: The webstore identifier.
        - in: path
          name: tierId
          schema:
            type: string
            example: 6276316
          required: true
          description: The tier identifier
      description: |-
        Updates a tier.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                package_id:
                  type: string
                  example: 123456789
      responses:
        '200':
          description: 
            Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CMSPagesResponse'
components:
  schemas:
    Webstore:
      type: object
      properties:
        id:
          type: integer
          example: 1
        description:
          type: string
          description: Store description in HTML format
          example: "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris fermentum eget tellus et cursus. Pellentesque vel vehicula velit, sit amet tincidunt diam. Aliquam sit amet fermentum lorem.</p>"
        name:
          type: string
          description: Name of the store
          example: "Minecraft Store"
        webstore_url:
          type: string
          format: uri
          description: URL of the webstore
          example: "https://example.tebex.io"
        currency:
          type: string
          description: Currency used in the store
          example: "USD"
        lang:
          type: string
          description: Language of the store
          example: "en"
        logo:
          type: string
          format: uri
          description: URL of the store's logo
          nullable: true
        platform_type:
          type: string
          description: Platform type for the store
          example: "Minecraft: Java Edition"
        platform_type_id:
          type: string
          example: minecraft
        created_at:
          type: string
          format: date-time
          description: The date and time when the store was created
          example: "2023-05-25T09:49:37+00:00"
    WebstoreResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            schema:
              $ref: '#/components/schemas/Webstore'
      description: Wrapped webstore information in a "data" object.
    UpdateTierResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Tier successfully upgraded, please allow a few moments for your changes to take effect."
    CMSPagesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CMSPage'
    CMSPage:
      type: object
      properties:
        id:
          type: number
          example: 127
        created_at:
          type: string
          format: date-time
          example: "2023-11-13T20:59:54.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-11-13T20:59:54.000000Z"
        account_id:
          type: number
          example: 244
        title:
          type: string
          example: About
        slug:
          type: string
          example: about
        private:
          type: boolean
          example: false
        hidden:
          type: boolean
          example: false
        disabled:
          type: boolean
          example: false
        sequence:
          type: boolean
          example: false
        content:
          type: string
          example: "<p>This is a custom page which you can add your own content to if you wish.</p>\n\n<p>You can modify your pages by going to <strong>Webstore</strong> &gt; <strong>Pages</strong> from within the\nTebex Store control panel.</p>\n\n<p>Make sure to take a look at our <a href=\"https://help.tebex.io\" rel=\"noreferrer\" target=\"_blank\">knowledgebase</a>\nfor helpful guides on getting started.</p>"
    ErrorResponse:
      type: object
      properties:
        type: 
          description: A URI reference [RFC3986] that identifies the
            problem type.  This specification encourages that, when
            dereferenced, it provide human-readable documentation for the
            problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When
            this member is not present, its value is assumed to be
            "about:blank".
        title: 
          type: string
          description: A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization
          example: Bad Request
        status:
          type: integer
          description: The HTTP status code generated by the origin server for the occurrence of the problem.
          example: 400
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          example: Parameter 'first_name' is required.
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced
          example: /path/to/ref
    GiftCard:
      type: object
      properties:
        card_number:
          type: string
          example: "0127 0244 7210 1111"
    Coupon:
      type: object
      properties:
        coupon_code:
          type: string
          example: "Academy10"
    BasketAuthResponse:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
            example: "FiveM"
          url:
            type: string
            example: "https://ident.tebex.io/"
    BasketResponse:
      type: object
      properties:
        data:
          type: object
          $ref: '#/components/schemas/Basket'
    Basket:
      type: object
      properties:
        id:
          type: string
          example: 244127617
        ident:
          type: string
          example: 1a-55fff4107740a1f40d844ff89607557f45bfafb3
        complete:
          type: boolean
          example: false
        email:
          type: string
          example: support@tebex.io
          nullable: true
        username:
          type: string
          example: null
          nullable: true
        coupons:
          type: array 
          items:
            $ref: '#/components/schemas/Coupon'
        giftcards:
          type: array
          items:
            $ref: '#/components/schemas/GiftCard'
        creator_code:
          type: string
          description: The creator code is used to share a percentage of the payment with another party. See more about creator codes at https://docs.tebex.io/creators/tebex-control-panel/engagement/creator-codes
        cancel_url:
          type: string
          example: https://tebex.io
        complete_url:
          type: string
          nullable: true
          example: null
        complete_auto_redirect:
          type: boolean
          example: false
        country:
          type: string
          example: US
          description: A two-character country code
        ip:
          type: string
          example: 127.0.0.1
        username_id:
          type: number
          example: 127244
        base_price:
          type: number
          format: float
          example: 1.27
        sales_tax:
          type: number
          format: float
          example: 0.11
        total_price:
          type: number
          format: float
          example: 1.38
        currency:
          type: string
          description: A 3 character currency code
          example: USD
        packages:
          type: array
          items:
            $ref: '#/components/schemas/BasketPackage'
        custom: 
          type: object
          nullable: true
          example: 
            foo: bar
            ref: 1234
        links:
          $ref: "#/components/schemas/BasketLinks"
    BasketLinks:
      type: object
      properties:
        payment:
          type: string
          description: The `links.payment` property is only returned if the basket has been paid for and a payment exists with the `complete`,`refund`, or `chargeback` status.
          example: https://checkout.tebex.io/api/payments/tbx-12345
        checkout:
          type: string
          description: The `links.checkout` property is only returned if the basket has not been paid, and is the URL to send the customer to make payment
          example: https://checkout.tebex.io/checkout/1a-55fff4107740a1f40d844ff89607557f45bfafb3
    CategoryResponse:
      type: object
      properties:
        data:
          type: array
          items: 
            $ref: "#/components/schemas/Category"
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 2678660
        name:
          type: string
          example: "Test"
          description: User-friendly name of the category
        slug:
          type: string
          description: Short identifier slug for the category
          nullable: true
        parent: 
          type: object
          description: Parent category, if applicable
          format: Category
          nullable: true
        description:
          type: string
          description: HTML description of the category
        packages:
          type: array
          items:
            $ref: "#/components/schemas/Package"
          nullable: true
        order:
          type: integer
          example: 1
          description: The numeric order in which to display the category.
        display_type:
          type: string
          enum: [list, grid]
          description: How the category should be displayed 
    PackageResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Package'
    Package:
      type: object
      properties:
        id:
          type: integer
          example: 6276316
        name:
          type: string
          example: 'test package 101'
        description:
          type: string
          example: '<p>this is just a test. only a test. nothing more.</p>'
        image:
          type: string
          nullable: true
          example: null
        type:
          type: string
          example: 'single'
        category:
          type: object
          properties:
            id:
              type: integer
              example: 2678660
            name:
              type: string
              example: 'Packages'
        base_price:
          type: number
          format: float
          example: 5
        sales_tax:
          type: number
          format: float
          example: 0
        total_price:
          type: number
          format: float
          example: 5
        currency:
          type: string
          example: 'USD'
        discount:
          type: number
          format: float
          example: 0
        disable_quantity:
          type: boolean
          example: false
        disable_gifting:
          type: boolean
          example: false
        expiration_date:
          type: string
          nullable: true
          format: date-time
          example: null
        created_at:
          type: string
          format: date-time
          example: '2024-05-21T18:09:17+00:00'
        updated_at:
          type: string
          format: date-time
          example: '2024-05-21T18:09:17+00:00'
    BasketPackage:
      type: object
      description: A package within an existing basket.
      properties:
        qty:
          type: integer
          description: The quantity of `package` in this basket. This is not the total quantity of overall items in the basket.
          example: 2
        type:
          type: string
          enum: [single,subscription]
          example: single
          description: The type of payment, either `single` for one-time payments or `subscription`.
        revenue_share:
          type: array
          description: An array of payment destination objects describing how the purchase should be split between multiple wallets. **Only available with pre-agreement from Tebex.**
          items:
            $ref: '#/components/schemas/RevenueShare'
    RevenueShare:
      type: object
      properties:
        wallet_ref:
          type: string
          example: some_wallet_reference
        amount:
          type: number
          example: 0.50
          description: A float (decimal) value representing the amount of this payment in your account currency that is credited to the `wallet_ref`
        gateway_fee_percent:
          type: number
          example: 50.00
          description: A float (decimal) value representing the percentage of the gateway fee that should be dedicated from this wallet’s revenue share. This optional value can be anywhere between 0 - 100.