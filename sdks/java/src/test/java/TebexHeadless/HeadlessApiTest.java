/*
 * Tebex Headless API
 * The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package TebexHeadless;

import TebexHeadless.ApiException;
import org.openapitools.client.model.AddBasketPackageRequest;
import org.openapitools.client.model.ApplyCreatorCodeRequest;
import org.openapitools.client.model.Basket;
import org.openapitools.client.model.BasketResponse;
import java.math.BigDecimal;
import org.openapitools.client.model.CMSPagesResponse;
import org.openapitools.client.model.CategoryResponse;
import org.openapitools.client.model.Coupon;
import org.openapitools.client.model.CreateBasketRequest;
import org.openapitools.client.model.GiftCard;
import org.openapitools.client.model.PackageResponse;
import org.openapitools.client.model.RemoveBasketPackageRequest;
import org.openapitools.client.model.RemoveGiftCardRequest;
import org.openapitools.client.model.UpdatePackageQuantityRequest;
import org.openapitools.client.model.UpdateTierRequest;
import org.openapitools.client.model.WebstoreResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HeadlessApi
 */
@Disabled
public class HeadlessApiTest {

    private final HeadlessApi api = new HeadlessApi();

    /**
     * Add a package to a basket
     *
     * Add a package with the given ID to the basket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addBasketPackageTest() throws ApiException {
        String basketIdent = null;
        AddBasketPackageRequest addBasketPackageRequest = null;
        Basket response = api.addBasketPackage(basketIdent, addBasketPackageRequest);
        // TODO: test validations
    }

    /**
     * Apply a coupon to a basket.
     *
     * Applies a creator code to a basket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyCouponTest() throws ApiException {
        String token = null;
        String basketIdent = null;
        Coupon coupon = null;
        BasketResponse response = api.applyCoupon(token, basketIdent, coupon);
        // TODO: test validations
    }

    /**
     * Apply a creator code to a basket.
     *
     * Applies a creator code to a basket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyCreatorCodeTest() throws ApiException {
        String token = null;
        String basketIdent = null;
        ApplyCreatorCodeRequest applyCreatorCodeRequest = null;
        BasketResponse response = api.applyCreatorCode(token, basketIdent, applyCreatorCodeRequest);
        // TODO: test validations
    }

    /**
     * Apply a gift card to a basket.
     *
     * Applies a creator code to a basket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyGiftCardTest() throws ApiException {
        String token = null;
        String basketIdent = null;
        GiftCard giftCard = null;
        BasketResponse response = api.applyGiftCard(token, basketIdent, giftCard);
        // TODO: test validations
    }

    /**
     * Create a new basket
     *
     * Creates a new basket for use during checkout.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBasketTest() throws ApiException {
        String token = null;
        CreateBasketRequest createBasketRequest = null;
        BasketResponse response = api.createBasket(token, createBasketRequest);
        // TODO: test validations
    }

    /**
     * Gets all categories available in the webstore.
     *
     * Gets all categories from a webstore. This does not include package information. To include package information, add &#x60;?includePackages&#x3D;1&#x60; to the URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCategoriesTest() throws ApiException {
        String token = null;
        CategoryResponse response = api.getAllCategories(token);
        // TODO: test validations
    }

    /**
     * Gets a store&#39;s categories including all package information with them.
     *
     * Gets all categories from a webstore including packages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCategoriesIncludingPackagesTest() throws ApiException {
        String token = null;
        CategoryResponse response = api.getAllCategoriesIncludingPackages(token);
        // TODO: test validations
    }

    /**
     * Fetch all packages from a webstore
     *
     * Gets all packages from a webstore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPackagesTest() throws ApiException {
        String token = null;
        PackageResponse response = api.getAllPackages(token);
        // TODO: test validations
    }

    /**
     * Fetch a package from a webstore by its identifier
     *
     * Gets all packages from a webstore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPackagesWithAuthedIPTest() throws ApiException {
        String token = null;
        String ipAddress = null;
        PackageResponse response = api.getAllPackagesWithAuthedIP(token, ipAddress);
        // TODO: test validations
    }

    /**
     * Fetch a package from a webstore by its identifier
     *
     * Gets all packages from a webstore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPackagesWithAuthedIPAndBasketTest() throws ApiException {
        String token = null;
        String basketIdent = null;
        String ipAddress = null;
        PackageResponse response = api.getAllPackagesWithAuthedIPAndBasket(token, basketIdent, ipAddress);
        // TODO: test validations
    }

    /**
     * Fetch a package from a webstore by its identifier
     *
     * Gets all packages from a webstore.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPackagesWithBasketTest() throws ApiException {
        String token = null;
        String basketIdent = null;
        PackageResponse response = api.getAllPackagesWithBasket(token, basketIdent);
        // TODO: test validations
    }

    /**
     * Fetch a basket from a webstore by its identifier
     *
     * Fetches a basket&#39;s auth URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBasketAuthUrlTest() throws ApiException {
        String token = null;
        String basketIdent = null;
        String returnUrl = null;
        BasketResponse response = api.getBasketAuthUrl(token, basketIdent, returnUrl);
        // TODO: test validations
    }

    /**
     * Fetch a basket from a webstore by its identifier
     *
     * Gets a basket associated with the provided identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBasketByIdTest() throws ApiException {
        String token = null;
        String basketIdent = null;
        BasketResponse response = api.getBasketById(token, basketIdent);
        // TODO: test validations
    }

    /**
     * Fetch the custom pages associated with the store.
     *
     * Gets a list of custom pages associated with the webstore. These contain a &#x60;content&#x60; variable with the HTML content of the page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCMSPagesTest() throws ApiException {
        String token = null;
        CMSPagesResponse response = api.getCMSPages(token);
        // TODO: test validations
    }

    /**
     * Gets information about a specific category
     *
     * Gets information about a category and returns the packages in that category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCategoryByIdTest() throws ApiException {
        String token = null;
        String categoryId = null;
        CategoryResponse response = api.getCategoryById(token, categoryId);
        // TODO: test validations
    }

    /**
     * Gets information about a specific category, including all the packages in the category
     *
     * Gets information about a category and returns the packages in that category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCategoryIncludingPackagesTest() throws ApiException {
        String token = null;
        String categoryId = null;
        CategoryResponse response = api.getCategoryIncludingPackages(token, categoryId);
        // TODO: test validations
    }

    /**
     * Fetch a package from a webstore by its identifier
     *
     * Gets a package from a webstore by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPackageByIdTest() throws ApiException {
        String token = null;
        BigDecimal packageId = null;
        PackageResponse response = api.getPackageById(token, packageId);
        // TODO: test validations
    }

    /**
     * Fetch a webstore by its identifier
     *
     * Gets the webstore associated with the provided identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebstoreByIdTest() throws ApiException {
        String token = null;
        WebstoreResponse response = api.getWebstoreById(token);
        // TODO: test validations
    }

    /**
     * Remove a package from a basket
     *
     * Remove the given package ID from the basket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeBasketPackageTest() throws ApiException {
        String basketIdent = null;
        RemoveBasketPackageRequest removeBasketPackageRequest = null;
        Basket response = api.removeBasketPackage(basketIdent, removeBasketPackageRequest);
        // TODO: test validations
    }

    /**
     * Remove a coupon from the basket.
     *
     * Removes a coupon code from a basket
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCouponTest() throws ApiException {
        String token = null;
        String basketIdent = null;
        api.removeCoupon(token, basketIdent);
        // TODO: test validations
    }

    /**
     * Remove a creator code from the basket.
     *
     * Applies a creator code to a basket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCreatorCodeTest() throws ApiException {
        String token = null;
        String basketIdent = null;
        api.removeCreatorCode(token, basketIdent);
        // TODO: test validations
    }

    /**
     * Remove a gift card from the basket.
     *
     * Removes a gift card from the basket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeGiftCardTest() throws ApiException {
        String token = null;
        String basketIdent = null;
        RemoveGiftCardRequest removeGiftCardRequest = null;
        api.removeGiftCard(token, basketIdent, removeGiftCardRequest);
        // TODO: test validations
    }

    /**
     * Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed.
     *
     * Sets the quantity of the given item in the basket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePackageQuantityTest() throws ApiException {
        String basketIdent = null;
        BigDecimal packageId = null;
        UpdatePackageQuantityRequest updatePackageQuantityRequest = null;
        api.updatePackageQuantity(basketIdent, packageId, updatePackageQuantityRequest);
        // TODO: test validations
    }

    /**
     * TODO
     *
     * Updates a tier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTierTest() throws ApiException {
        String token = null;
        String tierId = null;
        UpdateTierRequest updateTierRequest = null;
        CMSPagesResponse response = api.updateTier(token, tierId, updateTierRequest);
        // TODO: test validations
    }

}
