/*
 * Tebex Headless API
 * The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package TebexHeadless;

import TebexHeadless.ApiCallback;
import TebexHeadless.ApiClient;
import TebexHeadless.ApiException;
import TebexHeadless.ApiResponse;
import TebexHeadless.Configuration;
import TebexHeadless.Pair;
import TebexHeadless.ProgressRequestBody;
import TebexHeadless.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddBasketPackageRequest;
import org.openapitools.client.model.ApplyCreatorCodeRequest;
import org.openapitools.client.model.Basket;
import org.openapitools.client.model.BasketResponse;
import java.math.BigDecimal;
import org.openapitools.client.model.CategoryResponse;
import org.openapitools.client.model.Coupon;
import org.openapitools.client.model.CreateBasketRequest;
import org.openapitools.client.model.GiftCard;
import org.openapitools.client.model.PackageResponse;
import org.openapitools.client.model.RemoveBasketPackageRequest;
import org.openapitools.client.model.RemoveGiftCardRequest;
import org.openapitools.client.model.UpdatePackageQuantityRequest;
import org.openapitools.client.model.WebstoreResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HeadlessApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HeadlessApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HeadlessApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addBasketPackage
     * @param basketIdent The basket identifier. (required)
     * @param addBasketPackageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBasketPackageCall(String basketIdent, AddBasketPackageRequest addBasketPackageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addBasketPackageRequest;

        // create path and map variables
        String localVarPath = "/baskets/{basketIdent}/packages"
            .replace("{" + "basketIdent" + "}", localVarApiClient.escapeString(basketIdent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBasketPackageValidateBeforeCall(String basketIdent, AddBasketPackageRequest addBasketPackageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'basketIdent' is set
        if (basketIdent == null) {
            throw new ApiException("Missing the required parameter 'basketIdent' when calling addBasketPackage(Async)");
        }

        return addBasketPackageCall(basketIdent, addBasketPackageRequest, _callback);

    }

    /**
     * Add a package to a basket
     * Add a package with the given ID to the basket.
     * @param basketIdent The basket identifier. (required)
     * @param addBasketPackageRequest  (optional)
     * @return Basket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public Basket addBasketPackage(String basketIdent, AddBasketPackageRequest addBasketPackageRequest) throws ApiException {
        ApiResponse<Basket> localVarResp = addBasketPackageWithHttpInfo(basketIdent, addBasketPackageRequest);
        return localVarResp.getData();
    }

    /**
     * Add a package to a basket
     * Add a package with the given ID to the basket.
     * @param basketIdent The basket identifier. (required)
     * @param addBasketPackageRequest  (optional)
     * @return ApiResponse&lt;Basket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Basket> addBasketPackageWithHttpInfo(String basketIdent, AddBasketPackageRequest addBasketPackageRequest) throws ApiException {
        okhttp3.Call localVarCall = addBasketPackageValidateBeforeCall(basketIdent, addBasketPackageRequest, null);
        Type localVarReturnType = new TypeToken<Basket>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a package to a basket (asynchronously)
     * Add a package with the given ID to the basket.
     * @param basketIdent The basket identifier. (required)
     * @param addBasketPackageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBasketPackageAsync(String basketIdent, AddBasketPackageRequest addBasketPackageRequest, final ApiCallback<Basket> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBasketPackageValidateBeforeCall(basketIdent, addBasketPackageRequest, _callback);
        Type localVarReturnType = new TypeToken<Basket>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applyCoupon
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param coupon Provide a &#x60;coupon_code&#x60; to apply to the basket. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyCouponCall(String token, String basketIdent, Coupon coupon, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = coupon;

        // create path and map variables
        String localVarPath = "/accounts/{token}/baskets/{basketIdent}/coupons"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()))
            .replace("{" + "basketIdent" + "}", localVarApiClient.escapeString(basketIdent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyCouponValidateBeforeCall(String token, String basketIdent, Coupon coupon, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling applyCoupon(Async)");
        }

        // verify the required parameter 'basketIdent' is set
        if (basketIdent == null) {
            throw new ApiException("Missing the required parameter 'basketIdent' when calling applyCoupon(Async)");
        }

        return applyCouponCall(token, basketIdent, coupon, _callback);

    }

    /**
     * Apply a coupon to a basket.
     * Applies a creator code to a basket.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param coupon Provide a &#x60;coupon_code&#x60; to apply to the basket. (optional)
     * @return BasketResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket. </td><td>  -  </td></tr>
     </table>
     */
    public BasketResponse applyCoupon(String token, String basketIdent, Coupon coupon) throws ApiException {
        ApiResponse<BasketResponse> localVarResp = applyCouponWithHttpInfo(token, basketIdent, coupon);
        return localVarResp.getData();
    }

    /**
     * Apply a coupon to a basket.
     * Applies a creator code to a basket.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param coupon Provide a &#x60;coupon_code&#x60; to apply to the basket. (optional)
     * @return ApiResponse&lt;BasketResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BasketResponse> applyCouponWithHttpInfo(String token, String basketIdent, Coupon coupon) throws ApiException {
        okhttp3.Call localVarCall = applyCouponValidateBeforeCall(token, basketIdent, coupon, null);
        Type localVarReturnType = new TypeToken<BasketResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apply a coupon to a basket. (asynchronously)
     * Applies a creator code to a basket.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param coupon Provide a &#x60;coupon_code&#x60; to apply to the basket. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyCouponAsync(String token, String basketIdent, Coupon coupon, final ApiCallback<BasketResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyCouponValidateBeforeCall(token, basketIdent, coupon, _callback);
        Type localVarReturnType = new TypeToken<BasketResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applyCreatorCode
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param applyCreatorCodeRequest Provide a &#x60;creator_code&#x60; to apply to the basket. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyCreatorCodeCall(String token, String basketIdent, ApplyCreatorCodeRequest applyCreatorCodeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applyCreatorCodeRequest;

        // create path and map variables
        String localVarPath = "/accounts/{token}/baskets/{basketIdent}/creator-codes"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()))
            .replace("{" + "basketIdent" + "}", localVarApiClient.escapeString(basketIdent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyCreatorCodeValidateBeforeCall(String token, String basketIdent, ApplyCreatorCodeRequest applyCreatorCodeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling applyCreatorCode(Async)");
        }

        // verify the required parameter 'basketIdent' is set
        if (basketIdent == null) {
            throw new ApiException("Missing the required parameter 'basketIdent' when calling applyCreatorCode(Async)");
        }

        return applyCreatorCodeCall(token, basketIdent, applyCreatorCodeRequest, _callback);

    }

    /**
     * Apply a creator code to a basket.
     * Applies a creator code to a basket.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param applyCreatorCodeRequest Provide a &#x60;creator_code&#x60; to apply to the basket. (optional)
     * @return BasketResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public BasketResponse applyCreatorCode(String token, String basketIdent, ApplyCreatorCodeRequest applyCreatorCodeRequest) throws ApiException {
        ApiResponse<BasketResponse> localVarResp = applyCreatorCodeWithHttpInfo(token, basketIdent, applyCreatorCodeRequest);
        return localVarResp.getData();
    }

    /**
     * Apply a creator code to a basket.
     * Applies a creator code to a basket.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param applyCreatorCodeRequest Provide a &#x60;creator_code&#x60; to apply to the basket. (optional)
     * @return ApiResponse&lt;BasketResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BasketResponse> applyCreatorCodeWithHttpInfo(String token, String basketIdent, ApplyCreatorCodeRequest applyCreatorCodeRequest) throws ApiException {
        okhttp3.Call localVarCall = applyCreatorCodeValidateBeforeCall(token, basketIdent, applyCreatorCodeRequest, null);
        Type localVarReturnType = new TypeToken<BasketResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apply a creator code to a basket. (asynchronously)
     * Applies a creator code to a basket.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param applyCreatorCodeRequest Provide a &#x60;creator_code&#x60; to apply to the basket. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyCreatorCodeAsync(String token, String basketIdent, ApplyCreatorCodeRequest applyCreatorCodeRequest, final ApiCallback<BasketResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyCreatorCodeValidateBeforeCall(token, basketIdent, applyCreatorCodeRequest, _callback);
        Type localVarReturnType = new TypeToken<BasketResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applyGiftCard
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param giftCard Provide a &#x60;card_number&#x60; to apply to the basket. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyGiftCardCall(String token, String basketIdent, GiftCard giftCard, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = giftCard;

        // create path and map variables
        String localVarPath = "/accounts/{token}/baskets/{basketIdent}/giftcards"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()))
            .replace("{" + "basketIdent" + "}", localVarApiClient.escapeString(basketIdent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyGiftCardValidateBeforeCall(String token, String basketIdent, GiftCard giftCard, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling applyGiftCard(Async)");
        }

        // verify the required parameter 'basketIdent' is set
        if (basketIdent == null) {
            throw new ApiException("Missing the required parameter 'basketIdent' when calling applyGiftCard(Async)");
        }

        return applyGiftCardCall(token, basketIdent, giftCard, _callback);

    }

    /**
     * Apply a gift card to a basket.
     * Applies a creator code to a basket.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param giftCard Provide a &#x60;card_number&#x60; to apply to the basket. (optional)
     * @return BasketResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket. </td><td>  -  </td></tr>
     </table>
     */
    public BasketResponse applyGiftCard(String token, String basketIdent, GiftCard giftCard) throws ApiException {
        ApiResponse<BasketResponse> localVarResp = applyGiftCardWithHttpInfo(token, basketIdent, giftCard);
        return localVarResp.getData();
    }

    /**
     * Apply a gift card to a basket.
     * Applies a creator code to a basket.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param giftCard Provide a &#x60;card_number&#x60; to apply to the basket. (optional)
     * @return ApiResponse&lt;BasketResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BasketResponse> applyGiftCardWithHttpInfo(String token, String basketIdent, GiftCard giftCard) throws ApiException {
        okhttp3.Call localVarCall = applyGiftCardValidateBeforeCall(token, basketIdent, giftCard, null);
        Type localVarReturnType = new TypeToken<BasketResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apply a gift card to a basket. (asynchronously)
     * Applies a creator code to a basket.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param giftCard Provide a &#x60;card_number&#x60; to apply to the basket. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applyGiftCardAsync(String token, String basketIdent, GiftCard giftCard, final ApiCallback<BasketResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyGiftCardValidateBeforeCall(token, basketIdent, giftCard, _callback);
        Type localVarReturnType = new TypeToken<BasketResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBasket
     * @param token The webstore identifier. (required)
     * @param createBasketRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided webstore ID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBasketCall(String token, CreateBasketRequest createBasketRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBasketRequest;

        // create path and map variables
        String localVarPath = "/accounts/{token}/baskets"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBasketValidateBeforeCall(String token, CreateBasketRequest createBasketRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling createBasket(Async)");
        }

        return createBasketCall(token, createBasketRequest, _callback);

    }

    /**
     * Create a new basket
     * Creates a new basket for use during checkout.
     * @param token The webstore identifier. (required)
     * @param createBasketRequest  (optional)
     * @return BasketResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided webstore ID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public BasketResponse createBasket(String token, CreateBasketRequest createBasketRequest) throws ApiException {
        ApiResponse<BasketResponse> localVarResp = createBasketWithHttpInfo(token, createBasketRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new basket
     * Creates a new basket for use during checkout.
     * @param token The webstore identifier. (required)
     * @param createBasketRequest  (optional)
     * @return ApiResponse&lt;BasketResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided webstore ID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BasketResponse> createBasketWithHttpInfo(String token, CreateBasketRequest createBasketRequest) throws ApiException {
        okhttp3.Call localVarCall = createBasketValidateBeforeCall(token, createBasketRequest, null);
        Type localVarReturnType = new TypeToken<BasketResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new basket (asynchronously)
     * Creates a new basket for use during checkout.
     * @param token The webstore identifier. (required)
     * @param createBasketRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided webstore ID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBasketAsync(String token, CreateBasketRequest createBasketRequest, final ApiCallback<BasketResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBasketValidateBeforeCall(token, createBasketRequest, _callback);
        Type localVarReturnType = new TypeToken<BasketResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllCategories
     * @param token The webstore identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of category information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCategoriesCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{token}/categories"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllCategoriesValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getAllCategories(Async)");
        }

        return getAllCategoriesCall(token, _callback);

    }

    /**
     * Gets all categories available in the webstore.
     * Gets all categories from a webstore. This does not include package information. To include package information, add &#x60;?includePackages&#x3D;1&#x60; to the URL.
     * @param token The webstore identifier. (required)
     * @return CategoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of category information. </td><td>  -  </td></tr>
     </table>
     */
    public CategoryResponse getAllCategories(String token) throws ApiException {
        ApiResponse<CategoryResponse> localVarResp = getAllCategoriesWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * Gets all categories available in the webstore.
     * Gets all categories from a webstore. This does not include package information. To include package information, add &#x60;?includePackages&#x3D;1&#x60; to the URL.
     * @param token The webstore identifier. (required)
     * @return ApiResponse&lt;CategoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of category information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryResponse> getAllCategoriesWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = getAllCategoriesValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<CategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all categories available in the webstore. (asynchronously)
     * Gets all categories from a webstore. This does not include package information. To include package information, add &#x60;?includePackages&#x3D;1&#x60; to the URL.
     * @param token The webstore identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of category information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCategoriesAsync(String token, final ApiCallback<CategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllCategoriesValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<CategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllCategoriesIncludingPackages
     * @param token The webstore identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of category information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCategoriesIncludingPackagesCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{token}/categories?includePackages=1"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllCategoriesIncludingPackagesValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getAllCategoriesIncludingPackages(Async)");
        }

        return getAllCategoriesIncludingPackagesCall(token, _callback);

    }

    /**
     * Gets a store&#39;s categories including all package information with them.
     * Gets all categories from a webstore including packages.
     * @param token The webstore identifier. (required)
     * @return CategoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of category information. </td><td>  -  </td></tr>
     </table>
     */
    public CategoryResponse getAllCategoriesIncludingPackages(String token) throws ApiException {
        ApiResponse<CategoryResponse> localVarResp = getAllCategoriesIncludingPackagesWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * Gets a store&#39;s categories including all package information with them.
     * Gets all categories from a webstore including packages.
     * @param token The webstore identifier. (required)
     * @return ApiResponse&lt;CategoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of category information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryResponse> getAllCategoriesIncludingPackagesWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = getAllCategoriesIncludingPackagesValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<CategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a store&#39;s categories including all package information with them. (asynchronously)
     * Gets all categories from a webstore including packages.
     * @param token The webstore identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of category information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCategoriesIncludingPackagesAsync(String token, final ApiCallback<CategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllCategoriesIncludingPackagesValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<CategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllPackages
     * @param token The webstore identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of package information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPackagesCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{token}/packages"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPackagesValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getAllPackages(Async)");
        }

        return getAllPackagesCall(token, _callback);

    }

    /**
     * Fetch all packages from a webstore
     * Gets all packages from a webstore.
     * @param token The webstore identifier. (required)
     * @return PackageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of package information. </td><td>  -  </td></tr>
     </table>
     */
    public PackageResponse getAllPackages(String token) throws ApiException {
        ApiResponse<PackageResponse> localVarResp = getAllPackagesWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * Fetch all packages from a webstore
     * Gets all packages from a webstore.
     * @param token The webstore identifier. (required)
     * @return ApiResponse&lt;PackageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of package information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PackageResponse> getAllPackagesWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = getAllPackagesValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<PackageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch all packages from a webstore (asynchronously)
     * Gets all packages from a webstore.
     * @param token The webstore identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of package information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPackagesAsync(String token, final ApiCallback<PackageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPackagesValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<PackageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllPackagesWithAuthedIP
     * @param token The webstore identifier. (required)
     * @param ipAddress An IP address can be provided with authenticated requests. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of package information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPackagesWithAuthedIPCall(String token, String ipAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{token}/packages?ipAddress={ipAddress}"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()))
            .replace("{" + "ipAddress" + "}", localVarApiClient.escapeString(ipAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPackagesWithAuthedIPValidateBeforeCall(String token, String ipAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getAllPackagesWithAuthedIP(Async)");
        }

        // verify the required parameter 'ipAddress' is set
        if (ipAddress == null) {
            throw new ApiException("Missing the required parameter 'ipAddress' when calling getAllPackagesWithAuthedIP(Async)");
        }

        return getAllPackagesWithAuthedIPCall(token, ipAddress, _callback);

    }

    /**
     * Fetch a package from a webstore by its identifier
     * Gets all packages from a webstore.
     * @param token The webstore identifier. (required)
     * @param ipAddress An IP address can be provided with authenticated requests. (required)
     * @return PackageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of package information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public PackageResponse getAllPackagesWithAuthedIP(String token, String ipAddress) throws ApiException {
        ApiResponse<PackageResponse> localVarResp = getAllPackagesWithAuthedIPWithHttpInfo(token, ipAddress);
        return localVarResp.getData();
    }

    /**
     * Fetch a package from a webstore by its identifier
     * Gets all packages from a webstore.
     * @param token The webstore identifier. (required)
     * @param ipAddress An IP address can be provided with authenticated requests. (required)
     * @return ApiResponse&lt;PackageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of package information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PackageResponse> getAllPackagesWithAuthedIPWithHttpInfo(String token, String ipAddress) throws ApiException {
        okhttp3.Call localVarCall = getAllPackagesWithAuthedIPValidateBeforeCall(token, ipAddress, null);
        Type localVarReturnType = new TypeToken<PackageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a package from a webstore by its identifier (asynchronously)
     * Gets all packages from a webstore.
     * @param token The webstore identifier. (required)
     * @param ipAddress An IP address can be provided with authenticated requests. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of package information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPackagesWithAuthedIPAsync(String token, String ipAddress, final ApiCallback<PackageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPackagesWithAuthedIPValidateBeforeCall(token, ipAddress, _callback);
        Type localVarReturnType = new TypeToken<PackageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllPackagesWithAuthedIPAndBasket
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param ipAddress An IP address can be provided with authenticated requests. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of package information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPackagesWithAuthedIPAndBasketCall(String token, String basketIdent, String ipAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{token}/packages?ipAddress={ipAddress}&basketIdent={basketIdent}"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()))
            .replace("{" + "basketIdent" + "}", localVarApiClient.escapeString(basketIdent.toString()))
            .replace("{" + "ipAddress" + "}", localVarApiClient.escapeString(ipAddress.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPackagesWithAuthedIPAndBasketValidateBeforeCall(String token, String basketIdent, String ipAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getAllPackagesWithAuthedIPAndBasket(Async)");
        }

        // verify the required parameter 'basketIdent' is set
        if (basketIdent == null) {
            throw new ApiException("Missing the required parameter 'basketIdent' when calling getAllPackagesWithAuthedIPAndBasket(Async)");
        }

        // verify the required parameter 'ipAddress' is set
        if (ipAddress == null) {
            throw new ApiException("Missing the required parameter 'ipAddress' when calling getAllPackagesWithAuthedIPAndBasket(Async)");
        }

        return getAllPackagesWithAuthedIPAndBasketCall(token, basketIdent, ipAddress, _callback);

    }

    /**
     * Fetch a package from a webstore by its identifier
     * Gets all packages from a webstore.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param ipAddress An IP address can be provided with authenticated requests. (required)
     * @return List&lt;PackageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of package information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<PackageResponse> getAllPackagesWithAuthedIPAndBasket(String token, String basketIdent, String ipAddress) throws ApiException {
        ApiResponse<List<PackageResponse>> localVarResp = getAllPackagesWithAuthedIPAndBasketWithHttpInfo(token, basketIdent, ipAddress);
        return localVarResp.getData();
    }

    /**
     * Fetch a package from a webstore by its identifier
     * Gets all packages from a webstore.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param ipAddress An IP address can be provided with authenticated requests. (required)
     * @return ApiResponse&lt;List&lt;PackageResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of package information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PackageResponse>> getAllPackagesWithAuthedIPAndBasketWithHttpInfo(String token, String basketIdent, String ipAddress) throws ApiException {
        okhttp3.Call localVarCall = getAllPackagesWithAuthedIPAndBasketValidateBeforeCall(token, basketIdent, ipAddress, null);
        Type localVarReturnType = new TypeToken<List<PackageResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a package from a webstore by its identifier (asynchronously)
     * Gets all packages from a webstore.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param ipAddress An IP address can be provided with authenticated requests. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of package information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPackagesWithAuthedIPAndBasketAsync(String token, String basketIdent, String ipAddress, final ApiCallback<List<PackageResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPackagesWithAuthedIPAndBasketValidateBeforeCall(token, basketIdent, ipAddress, _callback);
        Type localVarReturnType = new TypeToken<List<PackageResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllPackagesWithBasket
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of package information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPackagesWithBasketCall(String token, String basketIdent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{token}/packages?basketIdent={basketIdent}"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()))
            .replace("{" + "basketIdent" + "}", localVarApiClient.escapeString(basketIdent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPackagesWithBasketValidateBeforeCall(String token, String basketIdent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getAllPackagesWithBasket(Async)");
        }

        // verify the required parameter 'basketIdent' is set
        if (basketIdent == null) {
            throw new ApiException("Missing the required parameter 'basketIdent' when calling getAllPackagesWithBasket(Async)");
        }

        return getAllPackagesWithBasketCall(token, basketIdent, _callback);

    }

    /**
     * Fetch a package from a webstore by its identifier
     * Gets all packages from a webstore.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @return PackageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of package information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public PackageResponse getAllPackagesWithBasket(String token, String basketIdent) throws ApiException {
        ApiResponse<PackageResponse> localVarResp = getAllPackagesWithBasketWithHttpInfo(token, basketIdent);
        return localVarResp.getData();
    }

    /**
     * Fetch a package from a webstore by its identifier
     * Gets all packages from a webstore.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @return ApiResponse&lt;PackageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of package information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PackageResponse> getAllPackagesWithBasketWithHttpInfo(String token, String basketIdent) throws ApiException {
        okhttp3.Call localVarCall = getAllPackagesWithBasketValidateBeforeCall(token, basketIdent, null);
        Type localVarReturnType = new TypeToken<PackageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a package from a webstore by its identifier (asynchronously)
     * Gets all packages from a webstore.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns a list of package information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPackagesWithBasketAsync(String token, String basketIdent, final ApiCallback<PackageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPackagesWithBasketValidateBeforeCall(token, basketIdent, _callback);
        Type localVarReturnType = new TypeToken<PackageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBasketAuthUrl
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param returnUrl The URL you would like to redirect the user to after successful basket authentication. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket auth information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided webstore ID or basket ID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBasketAuthUrlCall(String token, String basketIdent, String returnUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{token}/baskets/{basketIdent}/auth?returnUrl={returnUrl}"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()))
            .replace("{" + "basketIdent" + "}", localVarApiClient.escapeString(basketIdent.toString()))
            .replace("{" + "returnUrl" + "}", localVarApiClient.escapeString(returnUrl.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBasketAuthUrlValidateBeforeCall(String token, String basketIdent, String returnUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBasketAuthUrl(Async)");
        }

        // verify the required parameter 'basketIdent' is set
        if (basketIdent == null) {
            throw new ApiException("Missing the required parameter 'basketIdent' when calling getBasketAuthUrl(Async)");
        }

        // verify the required parameter 'returnUrl' is set
        if (returnUrl == null) {
            throw new ApiException("Missing the required parameter 'returnUrl' when calling getBasketAuthUrl(Async)");
        }

        return getBasketAuthUrlCall(token, basketIdent, returnUrl, _callback);

    }

    /**
     * Fetch a basket from a webstore by its identifier
     * Fetches a basket&#39;s auth URL.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param returnUrl The URL you would like to redirect the user to after successful basket authentication. (required)
     * @return BasketResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket auth information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided webstore ID or basket ID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public BasketResponse getBasketAuthUrl(String token, String basketIdent, String returnUrl) throws ApiException {
        ApiResponse<BasketResponse> localVarResp = getBasketAuthUrlWithHttpInfo(token, basketIdent, returnUrl);
        return localVarResp.getData();
    }

    /**
     * Fetch a basket from a webstore by its identifier
     * Fetches a basket&#39;s auth URL.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param returnUrl The URL you would like to redirect the user to after successful basket authentication. (required)
     * @return ApiResponse&lt;BasketResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket auth information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided webstore ID or basket ID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BasketResponse> getBasketAuthUrlWithHttpInfo(String token, String basketIdent, String returnUrl) throws ApiException {
        okhttp3.Call localVarCall = getBasketAuthUrlValidateBeforeCall(token, basketIdent, returnUrl, null);
        Type localVarReturnType = new TypeToken<BasketResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a basket from a webstore by its identifier (asynchronously)
     * Fetches a basket&#39;s auth URL.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param returnUrl The URL you would like to redirect the user to after successful basket authentication. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket auth information. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided webstore ID or basket ID is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBasketAuthUrlAsync(String token, String basketIdent, String returnUrl, final ApiCallback<BasketResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBasketAuthUrlValidateBeforeCall(token, basketIdent, returnUrl, _callback);
        Type localVarReturnType = new TypeToken<BasketResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBasketById
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBasketByIdCall(String token, String basketIdent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{token}/baskets/{basketIdent}"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()))
            .replace("{" + "basketIdent" + "}", localVarApiClient.escapeString(basketIdent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBasketByIdValidateBeforeCall(String token, String basketIdent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getBasketById(Async)");
        }

        // verify the required parameter 'basketIdent' is set
        if (basketIdent == null) {
            throw new ApiException("Missing the required parameter 'basketIdent' when calling getBasketById(Async)");
        }

        return getBasketByIdCall(token, basketIdent, _callback);

    }

    /**
     * Fetch a basket from a webstore by its identifier
     * Gets a basket associated with the provided identifier.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @return BasketResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket information. </td><td>  -  </td></tr>
     </table>
     */
    public BasketResponse getBasketById(String token, String basketIdent) throws ApiException {
        ApiResponse<BasketResponse> localVarResp = getBasketByIdWithHttpInfo(token, basketIdent);
        return localVarResp.getData();
    }

    /**
     * Fetch a basket from a webstore by its identifier
     * Gets a basket associated with the provided identifier.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @return ApiResponse&lt;BasketResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BasketResponse> getBasketByIdWithHttpInfo(String token, String basketIdent) throws ApiException {
        okhttp3.Call localVarCall = getBasketByIdValidateBeforeCall(token, basketIdent, null);
        Type localVarReturnType = new TypeToken<BasketResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a basket from a webstore by its identifier (asynchronously)
     * Gets a basket associated with the provided identifier.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBasketByIdAsync(String token, String basketIdent, final ApiCallback<BasketResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBasketByIdValidateBeforeCall(token, basketIdent, _callback);
        Type localVarReturnType = new TypeToken<BasketResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategoryById
     * @param token The webstore identifier. (required)
     * @param categoryId The ID of the category to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the category without package information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryByIdCall(String token, String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{token}/categories/{categoryId}"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryByIdValidateBeforeCall(String token, String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCategoryById(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getCategoryById(Async)");
        }

        return getCategoryByIdCall(token, categoryId, _callback);

    }

    /**
     * Gets information about a specific category
     * Gets information about a category and returns the packages in that category.
     * @param token The webstore identifier. (required)
     * @param categoryId The ID of the category to fetch. (required)
     * @return List&lt;CategoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the category without package information. </td><td>  -  </td></tr>
     </table>
     */
    public List<CategoryResponse> getCategoryById(String token, String categoryId) throws ApiException {
        ApiResponse<List<CategoryResponse>> localVarResp = getCategoryByIdWithHttpInfo(token, categoryId);
        return localVarResp.getData();
    }

    /**
     * Gets information about a specific category
     * Gets information about a category and returns the packages in that category.
     * @param token The webstore identifier. (required)
     * @param categoryId The ID of the category to fetch. (required)
     * @return ApiResponse&lt;List&lt;CategoryResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the category without package information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CategoryResponse>> getCategoryByIdWithHttpInfo(String token, String categoryId) throws ApiException {
        okhttp3.Call localVarCall = getCategoryByIdValidateBeforeCall(token, categoryId, null);
        Type localVarReturnType = new TypeToken<List<CategoryResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets information about a specific category (asynchronously)
     * Gets information about a category and returns the packages in that category.
     * @param token The webstore identifier. (required)
     * @param categoryId The ID of the category to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the category without package information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryByIdAsync(String token, String categoryId, final ApiCallback<List<CategoryResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryByIdValidateBeforeCall(token, categoryId, _callback);
        Type localVarReturnType = new TypeToken<List<CategoryResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCategoryIncludingPackages
     * @param token The webstore identifier. (required)
     * @param categoryId The ID of the category to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the category with package information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryIncludingPackagesCall(String token, String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{token}/categories/{categoryId}?includePackages=1"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryIncludingPackagesValidateBeforeCall(String token, String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCategoryIncludingPackages(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getCategoryIncludingPackages(Async)");
        }

        return getCategoryIncludingPackagesCall(token, categoryId, _callback);

    }

    /**
     * Gets information about a specific category, including all the packages in the category
     * Gets information about a category and returns the packages in that category.
     * @param token The webstore identifier. (required)
     * @param categoryId The ID of the category to fetch. (required)
     * @return CategoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the category with package information. </td><td>  -  </td></tr>
     </table>
     */
    public CategoryResponse getCategoryIncludingPackages(String token, String categoryId) throws ApiException {
        ApiResponse<CategoryResponse> localVarResp = getCategoryIncludingPackagesWithHttpInfo(token, categoryId);
        return localVarResp.getData();
    }

    /**
     * Gets information about a specific category, including all the packages in the category
     * Gets information about a category and returns the packages in that category.
     * @param token The webstore identifier. (required)
     * @param categoryId The ID of the category to fetch. (required)
     * @return ApiResponse&lt;CategoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the category with package information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryResponse> getCategoryIncludingPackagesWithHttpInfo(String token, String categoryId) throws ApiException {
        okhttp3.Call localVarCall = getCategoryIncludingPackagesValidateBeforeCall(token, categoryId, null);
        Type localVarReturnType = new TypeToken<CategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets information about a specific category, including all the packages in the category (asynchronously)
     * Gets information about a category and returns the packages in that category.
     * @param token The webstore identifier. (required)
     * @param categoryId The ID of the category to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the category with package information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCategoryIncludingPackagesAsync(String token, String categoryId, final ApiCallback<CategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryIncludingPackagesValidateBeforeCall(token, categoryId, _callback);
        Type localVarReturnType = new TypeToken<CategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPackageById
     * @param token The webstore identifier. (required)
     * @param packageId The package&#39;s ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the package information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageByIdCall(String token, BigDecimal packageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{token}/packages/{packageId}"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()))
            .replace("{" + "packageId" + "}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPackageByIdValidateBeforeCall(String token, BigDecimal packageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getPackageById(Async)");
        }

        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling getPackageById(Async)");
        }

        return getPackageByIdCall(token, packageId, _callback);

    }

    /**
     * Fetch a package from a webstore by its identifier
     * Gets a package from a webstore by ID.
     * @param token The webstore identifier. (required)
     * @param packageId The package&#39;s ID. (required)
     * @return PackageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the package information. </td><td>  -  </td></tr>
     </table>
     */
    public PackageResponse getPackageById(String token, BigDecimal packageId) throws ApiException {
        ApiResponse<PackageResponse> localVarResp = getPackageByIdWithHttpInfo(token, packageId);
        return localVarResp.getData();
    }

    /**
     * Fetch a package from a webstore by its identifier
     * Gets a package from a webstore by ID.
     * @param token The webstore identifier. (required)
     * @param packageId The package&#39;s ID. (required)
     * @return ApiResponse&lt;PackageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the package information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PackageResponse> getPackageByIdWithHttpInfo(String token, BigDecimal packageId) throws ApiException {
        okhttp3.Call localVarCall = getPackageByIdValidateBeforeCall(token, packageId, null);
        Type localVarReturnType = new TypeToken<PackageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a package from a webstore by its identifier (asynchronously)
     * Gets a package from a webstore by ID.
     * @param token The webstore identifier. (required)
     * @param packageId The package&#39;s ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the package information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPackageByIdAsync(String token, BigDecimal packageId, final ApiCallback<PackageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPackageByIdValidateBeforeCall(token, packageId, _callback);
        Type localVarReturnType = new TypeToken<PackageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebstoreById
     * @param token The webstore identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the webstore&#39;s information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebstoreByIdCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{token}"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebstoreByIdValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getWebstoreById(Async)");
        }

        return getWebstoreByIdCall(token, _callback);

    }

    /**
     * Fetch a webstore by its identifier
     * Gets the webstore associated with the provided identifier.
     * @param token The webstore identifier. (required)
     * @return WebstoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the webstore&#39;s information. </td><td>  -  </td></tr>
     </table>
     */
    public WebstoreResponse getWebstoreById(String token) throws ApiException {
        ApiResponse<WebstoreResponse> localVarResp = getWebstoreByIdWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * Fetch a webstore by its identifier
     * Gets the webstore associated with the provided identifier.
     * @param token The webstore identifier. (required)
     * @return ApiResponse&lt;WebstoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the webstore&#39;s information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebstoreResponse> getWebstoreByIdWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = getWebstoreByIdValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<WebstoreResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch a webstore by its identifier (asynchronously)
     * Gets the webstore associated with the provided identifier.
     * @param token The webstore identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the webstore&#39;s information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebstoreByIdAsync(String token, final ApiCallback<WebstoreResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebstoreByIdValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<WebstoreResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeBasketPackage
     * @param basketIdent The basket identifier. (required)
     * @param removeBasketPackageRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeBasketPackageCall(String basketIdent, RemoveBasketPackageRequest removeBasketPackageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeBasketPackageRequest;

        // create path and map variables
        String localVarPath = "/baskets/{basketIdent}/packages/remove"
            .replace("{" + "basketIdent" + "}", localVarApiClient.escapeString(basketIdent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeBasketPackageValidateBeforeCall(String basketIdent, RemoveBasketPackageRequest removeBasketPackageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'basketIdent' is set
        if (basketIdent == null) {
            throw new ApiException("Missing the required parameter 'basketIdent' when calling removeBasketPackage(Async)");
        }

        return removeBasketPackageCall(basketIdent, removeBasketPackageRequest, _callback);

    }

    /**
     * Remove a package from a basket
     * Remove the given package ID from the basket.
     * @param basketIdent The basket identifier. (required)
     * @param removeBasketPackageRequest  (optional)
     * @return Basket
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public Basket removeBasketPackage(String basketIdent, RemoveBasketPackageRequest removeBasketPackageRequest) throws ApiException {
        ApiResponse<Basket> localVarResp = removeBasketPackageWithHttpInfo(basketIdent, removeBasketPackageRequest);
        return localVarResp.getData();
    }

    /**
     * Remove a package from a basket
     * Remove the given package ID from the basket.
     * @param basketIdent The basket identifier. (required)
     * @param removeBasketPackageRequest  (optional)
     * @return ApiResponse&lt;Basket&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Basket> removeBasketPackageWithHttpInfo(String basketIdent, RemoveBasketPackageRequest removeBasketPackageRequest) throws ApiException {
        okhttp3.Call localVarCall = removeBasketPackageValidateBeforeCall(basketIdent, removeBasketPackageRequest, null);
        Type localVarReturnType = new TypeToken<Basket>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a package from a basket (asynchronously)
     * Remove the given package ID from the basket.
     * @param basketIdent The basket identifier. (required)
     * @param removeBasketPackageRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response returns the basket. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeBasketPackageAsync(String basketIdent, RemoveBasketPackageRequest removeBasketPackageRequest, final ApiCallback<Basket> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeBasketPackageValidateBeforeCall(basketIdent, removeBasketPackageRequest, _callback);
        Type localVarReturnType = new TypeToken<Basket>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeCoupon
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCouponCall(String token, String basketIdent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{token}/baskets/{basketIdent}/coupons/remove"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()))
            .replace("{" + "basketIdent" + "}", localVarApiClient.escapeString(basketIdent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCouponValidateBeforeCall(String token, String basketIdent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling removeCoupon(Async)");
        }

        // verify the required parameter 'basketIdent' is set
        if (basketIdent == null) {
            throw new ApiException("Missing the required parameter 'basketIdent' when calling removeCoupon(Async)");
        }

        return removeCouponCall(token, basketIdent, _callback);

    }

    /**
     * Remove a coupon from the basket.
     * Removes a coupon code from a basket
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public void removeCoupon(String token, String basketIdent) throws ApiException {
        removeCouponWithHttpInfo(token, basketIdent);
    }

    /**
     * Remove a coupon from the basket.
     * Removes a coupon code from a basket
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeCouponWithHttpInfo(String token, String basketIdent) throws ApiException {
        okhttp3.Call localVarCall = removeCouponValidateBeforeCall(token, basketIdent, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a coupon from the basket. (asynchronously)
     * Removes a coupon code from a basket
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCouponAsync(String token, String basketIdent, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCouponValidateBeforeCall(token, basketIdent, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeCreatorCode
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creator code removed successfully. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCreatorCodeCall(String token, String basketIdent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{token}/baskets/{basketIdent}/creator-codes/remove"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()))
            .replace("{" + "basketIdent" + "}", localVarApiClient.escapeString(basketIdent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCreatorCodeValidateBeforeCall(String token, String basketIdent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling removeCreatorCode(Async)");
        }

        // verify the required parameter 'basketIdent' is set
        if (basketIdent == null) {
            throw new ApiException("Missing the required parameter 'basketIdent' when calling removeCreatorCode(Async)");
        }

        return removeCreatorCodeCall(token, basketIdent, _callback);

    }

    /**
     * Remove a creator code from the basket.
     * Applies a creator code to a basket.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creator code removed successfully. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public void removeCreatorCode(String token, String basketIdent) throws ApiException {
        removeCreatorCodeWithHttpInfo(token, basketIdent);
    }

    /**
     * Remove a creator code from the basket.
     * Applies a creator code to a basket.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creator code removed successfully. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeCreatorCodeWithHttpInfo(String token, String basketIdent) throws ApiException {
        okhttp3.Call localVarCall = removeCreatorCodeValidateBeforeCall(token, basketIdent, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a creator code from the basket. (asynchronously)
     * Applies a creator code to a basket.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Creator code removed successfully. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeCreatorCodeAsync(String token, String basketIdent, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCreatorCodeValidateBeforeCall(token, basketIdent, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeGiftCard
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param removeGiftCardRequest Provide the &#x60;card_number&#x60; to remove from the basket. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gift card removed successfully. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeGiftCardCall(String token, String basketIdent, RemoveGiftCardRequest removeGiftCardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeGiftCardRequest;

        // create path and map variables
        String localVarPath = "/accounts/{token}/baskets/{basketIdent}/giftcards/remove"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()))
            .replace("{" + "basketIdent" + "}", localVarApiClient.escapeString(basketIdent.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeGiftCardValidateBeforeCall(String token, String basketIdent, RemoveGiftCardRequest removeGiftCardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling removeGiftCard(Async)");
        }

        // verify the required parameter 'basketIdent' is set
        if (basketIdent == null) {
            throw new ApiException("Missing the required parameter 'basketIdent' when calling removeGiftCard(Async)");
        }

        return removeGiftCardCall(token, basketIdent, removeGiftCardRequest, _callback);

    }

    /**
     * Remove a gift card from the basket.
     * Removes a gift card from the basket.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param removeGiftCardRequest Provide the &#x60;card_number&#x60; to remove from the basket. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gift card removed successfully. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public void removeGiftCard(String token, String basketIdent, RemoveGiftCardRequest removeGiftCardRequest) throws ApiException {
        removeGiftCardWithHttpInfo(token, basketIdent, removeGiftCardRequest);
    }

    /**
     * Remove a gift card from the basket.
     * Removes a gift card from the basket.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param removeGiftCardRequest Provide the &#x60;card_number&#x60; to remove from the basket. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gift card removed successfully. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeGiftCardWithHttpInfo(String token, String basketIdent, RemoveGiftCardRequest removeGiftCardRequest) throws ApiException {
        okhttp3.Call localVarCall = removeGiftCardValidateBeforeCall(token, basketIdent, removeGiftCardRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a gift card from the basket. (asynchronously)
     * Removes a gift card from the basket.
     * @param token The webstore identifier. (required)
     * @param basketIdent The basket identifier. (required)
     * @param removeGiftCardRequest Provide the &#x60;card_number&#x60; to remove from the basket. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gift card removed successfully. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeGiftCardAsync(String token, String basketIdent, RemoveGiftCardRequest removeGiftCardRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeGiftCardValidateBeforeCall(token, basketIdent, removeGiftCardRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePackageQuantity
     * @param basketIdent The basket identifier. (required)
     * @param packageId The package identifier. (required)
     * @param updatePackageQuantityRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePackageQuantityCall(String basketIdent, BigDecimal packageId, UpdatePackageQuantityRequest updatePackageQuantityRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePackageQuantityRequest;

        // create path and map variables
        String localVarPath = "/baskets/{basketIdent}/packages/{packageId}"
            .replace("{" + "basketIdent" + "}", localVarApiClient.escapeString(basketIdent.toString()))
            .replace("{" + "packageId" + "}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePackageQuantityValidateBeforeCall(String basketIdent, BigDecimal packageId, UpdatePackageQuantityRequest updatePackageQuantityRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'basketIdent' is set
        if (basketIdent == null) {
            throw new ApiException("Missing the required parameter 'basketIdent' when calling updatePackageQuantity(Async)");
        }

        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling updatePackageQuantity(Async)");
        }

        return updatePackageQuantityCall(basketIdent, packageId, updatePackageQuantityRequest, _callback);

    }

    /**
     * Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed.
     * Sets the quantity of the given item in the basket.
     * @param basketIdent The basket identifier. (required)
     * @param packageId The package identifier. (required)
     * @param updatePackageQuantityRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public void updatePackageQuantity(String basketIdent, BigDecimal packageId, UpdatePackageQuantityRequest updatePackageQuantityRequest) throws ApiException {
        updatePackageQuantityWithHttpInfo(basketIdent, packageId, updatePackageQuantityRequest);
    }

    /**
     * Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed.
     * Sets the quantity of the given item in the basket.
     * @param basketIdent The basket identifier. (required)
     * @param packageId The package identifier. (required)
     * @param updatePackageQuantityRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updatePackageQuantityWithHttpInfo(String basketIdent, BigDecimal packageId, UpdatePackageQuantityRequest updatePackageQuantityRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePackageQuantityValidateBeforeCall(basketIdent, packageId, updatePackageQuantityRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed. (asynchronously)
     * Sets the quantity of the given item in the basket.
     * @param basketIdent The basket identifier. (required)
     * @param packageId The package identifier. (required)
     * @param updatePackageQuantityRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The provided request is invalid. The error response will include detail as to which parameter failed validation. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePackageQuantityAsync(String basketIdent, BigDecimal packageId, UpdatePackageQuantityRequest updatePackageQuantityRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePackageQuantityValidateBeforeCall(basketIdent, packageId, updatePackageQuantityRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
