/*
 * Tebex Headless API
 *
 * The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using TebexHeadless.Client;
using TebexHeadless.Model;

namespace TebexHeadless.TebexHeadless
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHeadlessApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a package to a basket
        /// </summary>
        /// <remarks>
        /// Add a package with the given ID to the basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="addBasketPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        Basket AddBasketPackage(string basketIdent, AddBasketPackageRequest? addBasketPackageRequest = default(AddBasketPackageRequest?), int operationIndex = 0);

        /// <summary>
        /// Add a package to a basket
        /// </summary>
        /// <remarks>
        /// Add a package with the given ID to the basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="addBasketPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        ApiResponse<Basket> AddBasketPackageWithHttpInfo(string basketIdent, AddBasketPackageRequest? addBasketPackageRequest = default(AddBasketPackageRequest?), int operationIndex = 0);
        /// <summary>
        /// Apply a coupon to a basket.
        /// </summary>
        /// <remarks>
        /// Applies a creator code to a basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="coupon">Provide a &#x60;coupon_code&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketResponse</returns>
        BasketResponse ApplyCoupon(string token, string basketIdent, Coupon? coupon = default(Coupon?), int operationIndex = 0);

        /// <summary>
        /// Apply a coupon to a basket.
        /// </summary>
        /// <remarks>
        /// Applies a creator code to a basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="coupon">Provide a &#x60;coupon_code&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketResponse</returns>
        ApiResponse<BasketResponse> ApplyCouponWithHttpInfo(string token, string basketIdent, Coupon? coupon = default(Coupon?), int operationIndex = 0);
        /// <summary>
        /// Apply a creator code to a basket.
        /// </summary>
        /// <remarks>
        /// Applies a creator code to a basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="applyCreatorCodeRequest">Provide a &#x60;creator_code&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketResponse</returns>
        BasketResponse ApplyCreatorCode(string token, string basketIdent, ApplyCreatorCodeRequest? applyCreatorCodeRequest = default(ApplyCreatorCodeRequest?), int operationIndex = 0);

        /// <summary>
        /// Apply a creator code to a basket.
        /// </summary>
        /// <remarks>
        /// Applies a creator code to a basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="applyCreatorCodeRequest">Provide a &#x60;creator_code&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketResponse</returns>
        ApiResponse<BasketResponse> ApplyCreatorCodeWithHttpInfo(string token, string basketIdent, ApplyCreatorCodeRequest? applyCreatorCodeRequest = default(ApplyCreatorCodeRequest?), int operationIndex = 0);
        /// <summary>
        /// Apply a gift card to a basket.
        /// </summary>
        /// <remarks>
        /// Applies a creator code to a basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="giftCard">Provide a &#x60;card_number&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketResponse</returns>
        BasketResponse ApplyGiftCard(string token, string basketIdent, GiftCard? giftCard = default(GiftCard?), int operationIndex = 0);

        /// <summary>
        /// Apply a gift card to a basket.
        /// </summary>
        /// <remarks>
        /// Applies a creator code to a basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="giftCard">Provide a &#x60;card_number&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketResponse</returns>
        ApiResponse<BasketResponse> ApplyGiftCardWithHttpInfo(string token, string basketIdent, GiftCard? giftCard = default(GiftCard?), int operationIndex = 0);
        /// <summary>
        /// Create a new basket
        /// </summary>
        /// <remarks>
        /// Creates a new basket for use during checkout.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="createBasketRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketResponse</returns>
        BasketResponse CreateBasket(string token, CreateBasketRequest? createBasketRequest = default(CreateBasketRequest?), int operationIndex = 0);

        /// <summary>
        /// Create a new basket
        /// </summary>
        /// <remarks>
        /// Creates a new basket for use during checkout.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="createBasketRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketResponse</returns>
        ApiResponse<BasketResponse> CreateBasketWithHttpInfo(string token, CreateBasketRequest? createBasketRequest = default(CreateBasketRequest?), int operationIndex = 0);
        /// <summary>
        /// Gets all categories available in the webstore.
        /// </summary>
        /// <remarks>
        /// Gets all categories from a webstore. This does not include package information. To include package information, add &#x60;?includePackages&#x3D;1&#x60; to the URL.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryResponse</returns>
        CategoryResponse GetAllCategories(string token, int operationIndex = 0);

        /// <summary>
        /// Gets all categories available in the webstore.
        /// </summary>
        /// <remarks>
        /// Gets all categories from a webstore. This does not include package information. To include package information, add &#x60;?includePackages&#x3D;1&#x60; to the URL.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        ApiResponse<CategoryResponse> GetAllCategoriesWithHttpInfo(string token, int operationIndex = 0);
        /// <summary>
        /// Gets a store&#39;s categories including all package information with them.
        /// </summary>
        /// <remarks>
        /// Gets all categories from a webstore including packages.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryResponse</returns>
        CategoryResponse GetAllCategoriesIncludingPackages(string token, int operationIndex = 0);

        /// <summary>
        /// Gets a store&#39;s categories including all package information with them.
        /// </summary>
        /// <remarks>
        /// Gets all categories from a webstore including packages.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        ApiResponse<CategoryResponse> GetAllCategoriesIncludingPackagesWithHttpInfo(string token, int operationIndex = 0);
        /// <summary>
        /// Fetch all packages from a webstore
        /// </summary>
        /// <remarks>
        /// Gets all packages from a webstore.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PackageResponse</returns>
        PackageResponse GetAllPackages(string token, int operationIndex = 0);

        /// <summary>
        /// Fetch all packages from a webstore
        /// </summary>
        /// <remarks>
        /// Gets all packages from a webstore.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PackageResponse</returns>
        ApiResponse<PackageResponse> GetAllPackagesWithHttpInfo(string token, int operationIndex = 0);
        /// <summary>
        /// Fetch a package from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets all packages from a webstore.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="ipAddress">An IP address can be provided with authenticated requests.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PackageResponse</returns>
        PackageResponse GetAllPackagesWithAuthedIP(string token, string ipAddress, int operationIndex = 0);

        /// <summary>
        /// Fetch a package from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets all packages from a webstore.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="ipAddress">An IP address can be provided with authenticated requests.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PackageResponse</returns>
        ApiResponse<PackageResponse> GetAllPackagesWithAuthedIPWithHttpInfo(string token, string ipAddress, int operationIndex = 0);
        /// <summary>
        /// Fetch a package from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets all packages from a webstore.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="ipAddress">An IP address can be provided with authenticated requests.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PackageResponse</returns>
        PackageResponse GetAllPackagesWithAuthedIPAndBasket(string token, string basketIdent, string ipAddress, int operationIndex = 0);

        /// <summary>
        /// Fetch a package from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets all packages from a webstore.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="ipAddress">An IP address can be provided with authenticated requests.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PackageResponse</returns>
        ApiResponse<PackageResponse> GetAllPackagesWithAuthedIPAndBasketWithHttpInfo(string token, string basketIdent, string ipAddress, int operationIndex = 0);
        /// <summary>
        /// Fetch a package from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets all packages from a webstore.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PackageResponse</returns>
        PackageResponse GetAllPackagesWithBasket(string token, string basketIdent, int operationIndex = 0);

        /// <summary>
        /// Fetch a package from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets all packages from a webstore.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PackageResponse</returns>
        ApiResponse<PackageResponse> GetAllPackagesWithBasketWithHttpInfo(string token, string basketIdent, int operationIndex = 0);
        /// <summary>
        /// Fetch a basket from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Fetches a basket&#39;s auth URL.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="returnUrl">The URL you would like to redirect the user to after successful basket authentication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketResponse</returns>
        BasketResponse GetBasketAuthUrl(string token, string basketIdent, string returnUrl, int operationIndex = 0);

        /// <summary>
        /// Fetch a basket from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Fetches a basket&#39;s auth URL.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="returnUrl">The URL you would like to redirect the user to after successful basket authentication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketResponse</returns>
        ApiResponse<BasketResponse> GetBasketAuthUrlWithHttpInfo(string token, string basketIdent, string returnUrl, int operationIndex = 0);
        /// <summary>
        /// Fetch a basket from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets a basket associated with the provided identifier.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketResponse</returns>
        BasketResponse GetBasketById(string token, string basketIdent, int operationIndex = 0);

        /// <summary>
        /// Fetch a basket from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets a basket associated with the provided identifier.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketResponse</returns>
        ApiResponse<BasketResponse> GetBasketByIdWithHttpInfo(string token, string basketIdent, int operationIndex = 0);
        /// <summary>
        /// Fetch the custom pages associated with the store.
        /// </summary>
        /// <remarks>
        /// Gets a list of custom pages associated with the webstore. These contain a &#x60;content&#x60; variable with the HTML content of the page.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSPagesResponse</returns>
        CMSPagesResponse GetCMSPages(string token, int operationIndex = 0);

        /// <summary>
        /// Fetch the custom pages associated with the store.
        /// </summary>
        /// <remarks>
        /// Gets a list of custom pages associated with the webstore. These contain a &#x60;content&#x60; variable with the HTML content of the page.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSPagesResponse</returns>
        ApiResponse<CMSPagesResponse> GetCMSPagesWithHttpInfo(string token, int operationIndex = 0);
        /// <summary>
        /// Gets information about a specific category
        /// </summary>
        /// <remarks>
        /// Gets information about a category and returns the packages in that category.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="categoryId">The ID of the category to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryResponse</returns>
        CategoryResponse GetCategoryById(string token, string categoryId, int operationIndex = 0);

        /// <summary>
        /// Gets information about a specific category
        /// </summary>
        /// <remarks>
        /// Gets information about a category and returns the packages in that category.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="categoryId">The ID of the category to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        ApiResponse<CategoryResponse> GetCategoryByIdWithHttpInfo(string token, string categoryId, int operationIndex = 0);
        /// <summary>
        /// Gets information about a specific category, including all the packages in the category
        /// </summary>
        /// <remarks>
        /// Gets information about a category and returns the packages in that category.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="categoryId">The ID of the category to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryResponse</returns>
        CategoryResponse GetCategoryIncludingPackages(string token, string categoryId, int operationIndex = 0);

        /// <summary>
        /// Gets information about a specific category, including all the packages in the category
        /// </summary>
        /// <remarks>
        /// Gets information about a category and returns the packages in that category.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="categoryId">The ID of the category to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        ApiResponse<CategoryResponse> GetCategoryIncludingPackagesWithHttpInfo(string token, string categoryId, int operationIndex = 0);
        /// <summary>
        /// Fetch a package from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets a package from a webstore by ID.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="packageId">The package&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PackageResponse</returns>
        PackageResponse GetPackageById(string token, decimal packageId, int operationIndex = 0);

        /// <summary>
        /// Fetch a package from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets a package from a webstore by ID.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="packageId">The package&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PackageResponse</returns>
        ApiResponse<PackageResponse> GetPackageByIdWithHttpInfo(string token, decimal packageId, int operationIndex = 0);
        /// <summary>
        /// Fetch a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets the webstore associated with the provided identifier.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebstoreResponse</returns>
        WebstoreResponse GetWebstoreById(string token, int operationIndex = 0);

        /// <summary>
        /// Fetch a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets the webstore associated with the provided identifier.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebstoreResponse</returns>
        ApiResponse<WebstoreResponse> GetWebstoreByIdWithHttpInfo(string token, int operationIndex = 0);
        /// <summary>
        /// Remove a package from a basket
        /// </summary>
        /// <remarks>
        /// Remove the given package ID from the basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="removeBasketPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        Basket RemoveBasketPackage(string basketIdent, RemoveBasketPackageRequest? removeBasketPackageRequest = default(RemoveBasketPackageRequest?), int operationIndex = 0);

        /// <summary>
        /// Remove a package from a basket
        /// </summary>
        /// <remarks>
        /// Remove the given package ID from the basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="removeBasketPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        ApiResponse<Basket> RemoveBasketPackageWithHttpInfo(string basketIdent, RemoveBasketPackageRequest? removeBasketPackageRequest = default(RemoveBasketPackageRequest?), int operationIndex = 0);
        /// <summary>
        /// Remove a coupon from the basket.
        /// </summary>
        /// <remarks>
        /// Removes a coupon code from a basket
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveCoupon(string token, string basketIdent, int operationIndex = 0);

        /// <summary>
        /// Remove a coupon from the basket.
        /// </summary>
        /// <remarks>
        /// Removes a coupon code from a basket
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveCouponWithHttpInfo(string token, string basketIdent, int operationIndex = 0);
        /// <summary>
        /// Remove a creator code from the basket.
        /// </summary>
        /// <remarks>
        /// Applies a creator code to a basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveCreatorCode(string token, string basketIdent, int operationIndex = 0);

        /// <summary>
        /// Remove a creator code from the basket.
        /// </summary>
        /// <remarks>
        /// Applies a creator code to a basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveCreatorCodeWithHttpInfo(string token, string basketIdent, int operationIndex = 0);
        /// <summary>
        /// Remove a gift card from the basket.
        /// </summary>
        /// <remarks>
        /// Removes a gift card from the basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="removeGiftCardRequest">Provide the &#x60;card_number&#x60; to remove from the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveGiftCard(string token, string basketIdent, RemoveGiftCardRequest? removeGiftCardRequest = default(RemoveGiftCardRequest?), int operationIndex = 0);

        /// <summary>
        /// Remove a gift card from the basket.
        /// </summary>
        /// <remarks>
        /// Removes a gift card from the basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="removeGiftCardRequest">Provide the &#x60;card_number&#x60; to remove from the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveGiftCardWithHttpInfo(string token, string basketIdent, RemoveGiftCardRequest? removeGiftCardRequest = default(RemoveGiftCardRequest?), int operationIndex = 0);
        /// <summary>
        /// Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed.
        /// </summary>
        /// <remarks>
        /// Sets the quantity of the given item in the basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="packageId">The package identifier.</param>
        /// <param name="updatePackageQuantityRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdatePackageQuantity(string basketIdent, decimal packageId, UpdatePackageQuantityRequest? updatePackageQuantityRequest = default(UpdatePackageQuantityRequest?), int operationIndex = 0);

        /// <summary>
        /// Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed.
        /// </summary>
        /// <remarks>
        /// Sets the quantity of the given item in the basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="packageId">The package identifier.</param>
        /// <param name="updatePackageQuantityRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePackageQuantityWithHttpInfo(string basketIdent, decimal packageId, UpdatePackageQuantityRequest? updatePackageQuantityRequest = default(UpdatePackageQuantityRequest?), int operationIndex = 0);
        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// Updates a tier.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="tierId">The tier identifier</param>
        /// <param name="updateTierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSPagesResponse</returns>
        CMSPagesResponse UpdateTier(string token, string tierId, UpdateTierRequest? updateTierRequest = default(UpdateTierRequest?), int operationIndex = 0);

        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// Updates a tier.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="tierId">The tier identifier</param>
        /// <param name="updateTierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSPagesResponse</returns>
        ApiResponse<CMSPagesResponse> UpdateTierWithHttpInfo(string token, string tierId, UpdateTierRequest? updateTierRequest = default(UpdateTierRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHeadlessApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a package to a basket
        /// </summary>
        /// <remarks>
        /// Add a package with the given ID to the basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="addBasketPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        System.Threading.Tasks.Task<Basket> AddBasketPackageAsync(string basketIdent, AddBasketPackageRequest? addBasketPackageRequest = default(AddBasketPackageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a package to a basket
        /// </summary>
        /// <remarks>
        /// Add a package with the given ID to the basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="addBasketPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Basket>> AddBasketPackageWithHttpInfoAsync(string basketIdent, AddBasketPackageRequest? addBasketPackageRequest = default(AddBasketPackageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Apply a coupon to a basket.
        /// </summary>
        /// <remarks>
        /// Applies a creator code to a basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="coupon">Provide a &#x60;coupon_code&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketResponse</returns>
        System.Threading.Tasks.Task<BasketResponse> ApplyCouponAsync(string token, string basketIdent, Coupon? coupon = default(Coupon?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Apply a coupon to a basket.
        /// </summary>
        /// <remarks>
        /// Applies a creator code to a basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="coupon">Provide a &#x60;coupon_code&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BasketResponse>> ApplyCouponWithHttpInfoAsync(string token, string basketIdent, Coupon? coupon = default(Coupon?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Apply a creator code to a basket.
        /// </summary>
        /// <remarks>
        /// Applies a creator code to a basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="applyCreatorCodeRequest">Provide a &#x60;creator_code&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketResponse</returns>
        System.Threading.Tasks.Task<BasketResponse> ApplyCreatorCodeAsync(string token, string basketIdent, ApplyCreatorCodeRequest? applyCreatorCodeRequest = default(ApplyCreatorCodeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Apply a creator code to a basket.
        /// </summary>
        /// <remarks>
        /// Applies a creator code to a basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="applyCreatorCodeRequest">Provide a &#x60;creator_code&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BasketResponse>> ApplyCreatorCodeWithHttpInfoAsync(string token, string basketIdent, ApplyCreatorCodeRequest? applyCreatorCodeRequest = default(ApplyCreatorCodeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Apply a gift card to a basket.
        /// </summary>
        /// <remarks>
        /// Applies a creator code to a basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="giftCard">Provide a &#x60;card_number&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketResponse</returns>
        System.Threading.Tasks.Task<BasketResponse> ApplyGiftCardAsync(string token, string basketIdent, GiftCard? giftCard = default(GiftCard?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Apply a gift card to a basket.
        /// </summary>
        /// <remarks>
        /// Applies a creator code to a basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="giftCard">Provide a &#x60;card_number&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BasketResponse>> ApplyGiftCardWithHttpInfoAsync(string token, string basketIdent, GiftCard? giftCard = default(GiftCard?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new basket
        /// </summary>
        /// <remarks>
        /// Creates a new basket for use during checkout.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="createBasketRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketResponse</returns>
        System.Threading.Tasks.Task<BasketResponse> CreateBasketAsync(string token, CreateBasketRequest? createBasketRequest = default(CreateBasketRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new basket
        /// </summary>
        /// <remarks>
        /// Creates a new basket for use during checkout.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="createBasketRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BasketResponse>> CreateBasketWithHttpInfoAsync(string token, CreateBasketRequest? createBasketRequest = default(CreateBasketRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets all categories available in the webstore.
        /// </summary>
        /// <remarks>
        /// Gets all categories from a webstore. This does not include package information. To include package information, add &#x60;?includePackages&#x3D;1&#x60; to the URL.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryResponse</returns>
        System.Threading.Tasks.Task<CategoryResponse> GetAllCategoriesAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets all categories available in the webstore.
        /// </summary>
        /// <remarks>
        /// Gets all categories from a webstore. This does not include package information. To include package information, add &#x60;?includePackages&#x3D;1&#x60; to the URL.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> GetAllCategoriesWithHttpInfoAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets a store&#39;s categories including all package information with them.
        /// </summary>
        /// <remarks>
        /// Gets all categories from a webstore including packages.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryResponse</returns>
        System.Threading.Tasks.Task<CategoryResponse> GetAllCategoriesIncludingPackagesAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets a store&#39;s categories including all package information with them.
        /// </summary>
        /// <remarks>
        /// Gets all categories from a webstore including packages.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> GetAllCategoriesIncludingPackagesWithHttpInfoAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch all packages from a webstore
        /// </summary>
        /// <remarks>
        /// Gets all packages from a webstore.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PackageResponse</returns>
        System.Threading.Tasks.Task<PackageResponse> GetAllPackagesAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch all packages from a webstore
        /// </summary>
        /// <remarks>
        /// Gets all packages from a webstore.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PackageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PackageResponse>> GetAllPackagesWithHttpInfoAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a package from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets all packages from a webstore.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="ipAddress">An IP address can be provided with authenticated requests.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PackageResponse</returns>
        System.Threading.Tasks.Task<PackageResponse> GetAllPackagesWithAuthedIPAsync(string token, string ipAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a package from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets all packages from a webstore.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="ipAddress">An IP address can be provided with authenticated requests.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PackageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PackageResponse>> GetAllPackagesWithAuthedIPWithHttpInfoAsync(string token, string ipAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a package from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets all packages from a webstore.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="ipAddress">An IP address can be provided with authenticated requests.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PackageResponse</returns>
        System.Threading.Tasks.Task<PackageResponse> GetAllPackagesWithAuthedIPAndBasketAsync(string token, string basketIdent, string ipAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a package from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets all packages from a webstore.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="ipAddress">An IP address can be provided with authenticated requests.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PackageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PackageResponse>> GetAllPackagesWithAuthedIPAndBasketWithHttpInfoAsync(string token, string basketIdent, string ipAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a package from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets all packages from a webstore.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PackageResponse</returns>
        System.Threading.Tasks.Task<PackageResponse> GetAllPackagesWithBasketAsync(string token, string basketIdent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a package from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets all packages from a webstore.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PackageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PackageResponse>> GetAllPackagesWithBasketWithHttpInfoAsync(string token, string basketIdent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a basket from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Fetches a basket&#39;s auth URL.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="returnUrl">The URL you would like to redirect the user to after successful basket authentication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketResponse</returns>
        System.Threading.Tasks.Task<BasketResponse> GetBasketAuthUrlAsync(string token, string basketIdent, string returnUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a basket from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Fetches a basket&#39;s auth URL.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="returnUrl">The URL you would like to redirect the user to after successful basket authentication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BasketResponse>> GetBasketAuthUrlWithHttpInfoAsync(string token, string basketIdent, string returnUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a basket from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets a basket associated with the provided identifier.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketResponse</returns>
        System.Threading.Tasks.Task<BasketResponse> GetBasketByIdAsync(string token, string basketIdent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a basket from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets a basket associated with the provided identifier.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BasketResponse>> GetBasketByIdWithHttpInfoAsync(string token, string basketIdent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch the custom pages associated with the store.
        /// </summary>
        /// <remarks>
        /// Gets a list of custom pages associated with the webstore. These contain a &#x60;content&#x60; variable with the HTML content of the page.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSPagesResponse</returns>
        System.Threading.Tasks.Task<CMSPagesResponse> GetCMSPagesAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch the custom pages associated with the store.
        /// </summary>
        /// <remarks>
        /// Gets a list of custom pages associated with the webstore. These contain a &#x60;content&#x60; variable with the HTML content of the page.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSPagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMSPagesResponse>> GetCMSPagesWithHttpInfoAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets information about a specific category
        /// </summary>
        /// <remarks>
        /// Gets information about a category and returns the packages in that category.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="categoryId">The ID of the category to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryResponse</returns>
        System.Threading.Tasks.Task<CategoryResponse> GetCategoryByIdAsync(string token, string categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets information about a specific category
        /// </summary>
        /// <remarks>
        /// Gets information about a category and returns the packages in that category.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="categoryId">The ID of the category to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> GetCategoryByIdWithHttpInfoAsync(string token, string categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Gets information about a specific category, including all the packages in the category
        /// </summary>
        /// <remarks>
        /// Gets information about a category and returns the packages in that category.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="categoryId">The ID of the category to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryResponse</returns>
        System.Threading.Tasks.Task<CategoryResponse> GetCategoryIncludingPackagesAsync(string token, string categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Gets information about a specific category, including all the packages in the category
        /// </summary>
        /// <remarks>
        /// Gets information about a category and returns the packages in that category.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="categoryId">The ID of the category to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryResponse>> GetCategoryIncludingPackagesWithHttpInfoAsync(string token, string categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a package from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets a package from a webstore by ID.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="packageId">The package&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PackageResponse</returns>
        System.Threading.Tasks.Task<PackageResponse> GetPackageByIdAsync(string token, decimal packageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a package from a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets a package from a webstore by ID.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="packageId">The package&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PackageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PackageResponse>> GetPackageByIdWithHttpInfoAsync(string token, decimal packageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Fetch a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets the webstore associated with the provided identifier.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebstoreResponse</returns>
        System.Threading.Tasks.Task<WebstoreResponse> GetWebstoreByIdAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Fetch a webstore by its identifier
        /// </summary>
        /// <remarks>
        /// Gets the webstore associated with the provided identifier.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebstoreResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebstoreResponse>> GetWebstoreByIdWithHttpInfoAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a package from a basket
        /// </summary>
        /// <remarks>
        /// Remove the given package ID from the basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="removeBasketPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        System.Threading.Tasks.Task<Basket> RemoveBasketPackageAsync(string basketIdent, RemoveBasketPackageRequest? removeBasketPackageRequest = default(RemoveBasketPackageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a package from a basket
        /// </summary>
        /// <remarks>
        /// Remove the given package ID from the basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="removeBasketPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        System.Threading.Tasks.Task<ApiResponse<Basket>> RemoveBasketPackageWithHttpInfoAsync(string basketIdent, RemoveBasketPackageRequest? removeBasketPackageRequest = default(RemoveBasketPackageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a coupon from the basket.
        /// </summary>
        /// <remarks>
        /// Removes a coupon code from a basket
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveCouponAsync(string token, string basketIdent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a coupon from the basket.
        /// </summary>
        /// <remarks>
        /// Removes a coupon code from a basket
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveCouponWithHttpInfoAsync(string token, string basketIdent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a creator code from the basket.
        /// </summary>
        /// <remarks>
        /// Applies a creator code to a basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveCreatorCodeAsync(string token, string basketIdent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a creator code from the basket.
        /// </summary>
        /// <remarks>
        /// Applies a creator code to a basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveCreatorCodeWithHttpInfoAsync(string token, string basketIdent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove a gift card from the basket.
        /// </summary>
        /// <remarks>
        /// Removes a gift card from the basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="removeGiftCardRequest">Provide the &#x60;card_number&#x60; to remove from the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveGiftCardAsync(string token, string basketIdent, RemoveGiftCardRequest? removeGiftCardRequest = default(RemoveGiftCardRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove a gift card from the basket.
        /// </summary>
        /// <remarks>
        /// Removes a gift card from the basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="removeGiftCardRequest">Provide the &#x60;card_number&#x60; to remove from the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveGiftCardWithHttpInfoAsync(string token, string basketIdent, RemoveGiftCardRequest? removeGiftCardRequest = default(RemoveGiftCardRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed.
        /// </summary>
        /// <remarks>
        /// Sets the quantity of the given item in the basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="packageId">The package identifier.</param>
        /// <param name="updatePackageQuantityRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePackageQuantityAsync(string basketIdent, decimal packageId, UpdatePackageQuantityRequest? updatePackageQuantityRequest = default(UpdatePackageQuantityRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed.
        /// </summary>
        /// <remarks>
        /// Sets the quantity of the given item in the basket.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="packageId">The package identifier.</param>
        /// <param name="updatePackageQuantityRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePackageQuantityWithHttpInfoAsync(string basketIdent, decimal packageId, UpdatePackageQuantityRequest? updatePackageQuantityRequest = default(UpdatePackageQuantityRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// Updates a tier.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="tierId">The tier identifier</param>
        /// <param name="updateTierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSPagesResponse</returns>
        System.Threading.Tasks.Task<CMSPagesResponse> UpdateTierAsync(string token, string tierId, UpdateTierRequest? updateTierRequest = default(UpdateTierRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// TODO
        /// </summary>
        /// <remarks>
        /// Updates a tier.
        /// </remarks>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="tierId">The tier identifier</param>
        /// <param name="updateTierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSPagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CMSPagesResponse>> UpdateTierWithHttpInfoAsync(string token, string tierId, UpdateTierRequest? updateTierRequest = default(UpdateTierRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHeadlessApi : IHeadlessApiSync, IHeadlessApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HeadlessApi : IHeadlessApi
    {
        private TebexHeadless.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HeadlessApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HeadlessApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HeadlessApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HeadlessApi(string basePath)
        {
            this.Configuration = TebexHeadless.Client.Configuration.MergeConfigurations(
                TebexHeadless.Client.GlobalConfiguration.Instance,
                new TebexHeadless.Client.Configuration { BasePath = basePath }
            );
            this.Client = new TebexHeadless.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TebexHeadless.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = TebexHeadless.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HeadlessApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HeadlessApi(TebexHeadless.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = TebexHeadless.Client.Configuration.MergeConfigurations(
                TebexHeadless.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new TebexHeadless.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new TebexHeadless.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = TebexHeadless.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HeadlessApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public HeadlessApi(TebexHeadless.Client.ISynchronousClient client, TebexHeadless.Client.IAsynchronousClient asyncClient, TebexHeadless.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = TebexHeadless.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public TebexHeadless.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public TebexHeadless.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TebexHeadless.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TebexHeadless.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a package to a basket Add a package with the given ID to the basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="addBasketPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        public Basket AddBasketPackage(string basketIdent, AddBasketPackageRequest? addBasketPackageRequest = default(AddBasketPackageRequest?), int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<Basket> localVarResponse = AddBasketPackageWithHttpInfo(basketIdent, addBasketPackageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a package to a basket Add a package with the given ID to the basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="addBasketPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        public TebexHeadless.Client.ApiResponse<Basket> AddBasketPackageWithHttpInfo(string basketIdent, AddBasketPackageRequest? addBasketPackageRequest = default(AddBasketPackageRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->AddBasketPackage");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter
            localVarRequestOptions.Data = addBasketPackageRequest;

            localVarRequestOptions.Operation = "HeadlessApi.AddBasketPackage";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Basket>("/baskets/{basketIdent}/packages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddBasketPackage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a package to a basket Add a package with the given ID to the basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="addBasketPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        public async System.Threading.Tasks.Task<Basket> AddBasketPackageAsync(string basketIdent, AddBasketPackageRequest? addBasketPackageRequest = default(AddBasketPackageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<Basket> localVarResponse = await AddBasketPackageWithHttpInfoAsync(basketIdent, addBasketPackageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a package to a basket Add a package with the given ID to the basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="addBasketPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<Basket>> AddBasketPackageWithHttpInfoAsync(string basketIdent, AddBasketPackageRequest? addBasketPackageRequest = default(AddBasketPackageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->AddBasketPackage");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter
            localVarRequestOptions.Data = addBasketPackageRequest;

            localVarRequestOptions.Operation = "HeadlessApi.AddBasketPackage";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Basket>("/baskets/{basketIdent}/packages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddBasketPackage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apply a coupon to a basket. Applies a creator code to a basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="coupon">Provide a &#x60;coupon_code&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketResponse</returns>
        public BasketResponse ApplyCoupon(string token, string basketIdent, Coupon? coupon = default(Coupon?), int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<BasketResponse> localVarResponse = ApplyCouponWithHttpInfo(token, basketIdent, coupon);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply a coupon to a basket. Applies a creator code to a basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="coupon">Provide a &#x60;coupon_code&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketResponse</returns>
        public TebexHeadless.Client.ApiResponse<BasketResponse> ApplyCouponWithHttpInfo(string token, string basketIdent, Coupon? coupon = default(Coupon?), int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->ApplyCoupon");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->ApplyCoupon");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter
            localVarRequestOptions.Data = coupon;

            localVarRequestOptions.Operation = "HeadlessApi.ApplyCoupon";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BasketResponse>("/accounts/{token}/baskets/{basketIdent}/coupons", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplyCoupon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apply a coupon to a basket. Applies a creator code to a basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="coupon">Provide a &#x60;coupon_code&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketResponse</returns>
        public async System.Threading.Tasks.Task<BasketResponse> ApplyCouponAsync(string token, string basketIdent, Coupon? coupon = default(Coupon?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<BasketResponse> localVarResponse = await ApplyCouponWithHttpInfoAsync(token, basketIdent, coupon, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply a coupon to a basket. Applies a creator code to a basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="coupon">Provide a &#x60;coupon_code&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketResponse)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<BasketResponse>> ApplyCouponWithHttpInfoAsync(string token, string basketIdent, Coupon? coupon = default(Coupon?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->ApplyCoupon");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->ApplyCoupon");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter
            localVarRequestOptions.Data = coupon;

            localVarRequestOptions.Operation = "HeadlessApi.ApplyCoupon";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BasketResponse>("/accounts/{token}/baskets/{basketIdent}/coupons", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplyCoupon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apply a creator code to a basket. Applies a creator code to a basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="applyCreatorCodeRequest">Provide a &#x60;creator_code&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketResponse</returns>
        public BasketResponse ApplyCreatorCode(string token, string basketIdent, ApplyCreatorCodeRequest? applyCreatorCodeRequest = default(ApplyCreatorCodeRequest?), int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<BasketResponse> localVarResponse = ApplyCreatorCodeWithHttpInfo(token, basketIdent, applyCreatorCodeRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply a creator code to a basket. Applies a creator code to a basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="applyCreatorCodeRequest">Provide a &#x60;creator_code&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketResponse</returns>
        public TebexHeadless.Client.ApiResponse<BasketResponse> ApplyCreatorCodeWithHttpInfo(string token, string basketIdent, ApplyCreatorCodeRequest? applyCreatorCodeRequest = default(ApplyCreatorCodeRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->ApplyCreatorCode");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->ApplyCreatorCode");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter
            localVarRequestOptions.Data = applyCreatorCodeRequest;

            localVarRequestOptions.Operation = "HeadlessApi.ApplyCreatorCode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BasketResponse>("/accounts/{token}/baskets/{basketIdent}/creator-codes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplyCreatorCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apply a creator code to a basket. Applies a creator code to a basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="applyCreatorCodeRequest">Provide a &#x60;creator_code&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketResponse</returns>
        public async System.Threading.Tasks.Task<BasketResponse> ApplyCreatorCodeAsync(string token, string basketIdent, ApplyCreatorCodeRequest? applyCreatorCodeRequest = default(ApplyCreatorCodeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<BasketResponse> localVarResponse = await ApplyCreatorCodeWithHttpInfoAsync(token, basketIdent, applyCreatorCodeRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply a creator code to a basket. Applies a creator code to a basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="applyCreatorCodeRequest">Provide a &#x60;creator_code&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketResponse)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<BasketResponse>> ApplyCreatorCodeWithHttpInfoAsync(string token, string basketIdent, ApplyCreatorCodeRequest? applyCreatorCodeRequest = default(ApplyCreatorCodeRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->ApplyCreatorCode");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->ApplyCreatorCode");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter
            localVarRequestOptions.Data = applyCreatorCodeRequest;

            localVarRequestOptions.Operation = "HeadlessApi.ApplyCreatorCode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BasketResponse>("/accounts/{token}/baskets/{basketIdent}/creator-codes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplyCreatorCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apply a gift card to a basket. Applies a creator code to a basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="giftCard">Provide a &#x60;card_number&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketResponse</returns>
        public BasketResponse ApplyGiftCard(string token, string basketIdent, GiftCard? giftCard = default(GiftCard?), int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<BasketResponse> localVarResponse = ApplyGiftCardWithHttpInfo(token, basketIdent, giftCard);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply a gift card to a basket. Applies a creator code to a basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="giftCard">Provide a &#x60;card_number&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketResponse</returns>
        public TebexHeadless.Client.ApiResponse<BasketResponse> ApplyGiftCardWithHttpInfo(string token, string basketIdent, GiftCard? giftCard = default(GiftCard?), int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->ApplyGiftCard");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->ApplyGiftCard");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter
            localVarRequestOptions.Data = giftCard;

            localVarRequestOptions.Operation = "HeadlessApi.ApplyGiftCard";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BasketResponse>("/accounts/{token}/baskets/{basketIdent}/giftcards", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplyGiftCard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apply a gift card to a basket. Applies a creator code to a basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="giftCard">Provide a &#x60;card_number&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketResponse</returns>
        public async System.Threading.Tasks.Task<BasketResponse> ApplyGiftCardAsync(string token, string basketIdent, GiftCard? giftCard = default(GiftCard?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<BasketResponse> localVarResponse = await ApplyGiftCardWithHttpInfoAsync(token, basketIdent, giftCard, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apply a gift card to a basket. Applies a creator code to a basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="giftCard">Provide a &#x60;card_number&#x60; to apply to the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketResponse)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<BasketResponse>> ApplyGiftCardWithHttpInfoAsync(string token, string basketIdent, GiftCard? giftCard = default(GiftCard?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->ApplyGiftCard");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->ApplyGiftCard");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter
            localVarRequestOptions.Data = giftCard;

            localVarRequestOptions.Operation = "HeadlessApi.ApplyGiftCard";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BasketResponse>("/accounts/{token}/baskets/{basketIdent}/giftcards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApplyGiftCard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new basket Creates a new basket for use during checkout.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="createBasketRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketResponse</returns>
        public BasketResponse CreateBasket(string token, CreateBasketRequest? createBasketRequest = default(CreateBasketRequest?), int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<BasketResponse> localVarResponse = CreateBasketWithHttpInfo(token, createBasketRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new basket Creates a new basket for use during checkout.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="createBasketRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketResponse</returns>
        public TebexHeadless.Client.ApiResponse<BasketResponse> CreateBasketWithHttpInfo(string token, CreateBasketRequest? createBasketRequest = default(CreateBasketRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->CreateBasket");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.Data = createBasketRequest;

            localVarRequestOptions.Operation = "HeadlessApi.CreateBasket";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<BasketResponse>("/accounts/{token}/baskets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBasket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new basket Creates a new basket for use during checkout.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="createBasketRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketResponse</returns>
        public async System.Threading.Tasks.Task<BasketResponse> CreateBasketAsync(string token, CreateBasketRequest? createBasketRequest = default(CreateBasketRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<BasketResponse> localVarResponse = await CreateBasketWithHttpInfoAsync(token, createBasketRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new basket Creates a new basket for use during checkout.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="createBasketRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketResponse)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<BasketResponse>> CreateBasketWithHttpInfoAsync(string token, CreateBasketRequest? createBasketRequest = default(CreateBasketRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->CreateBasket");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.Data = createBasketRequest;

            localVarRequestOptions.Operation = "HeadlessApi.CreateBasket";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<BasketResponse>("/accounts/{token}/baskets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBasket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all categories available in the webstore. Gets all categories from a webstore. This does not include package information. To include package information, add &#x60;?includePackages&#x3D;1&#x60; to the URL.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryResponse</returns>
        public CategoryResponse GetAllCategories(string token, int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<CategoryResponse> localVarResponse = GetAllCategoriesWithHttpInfo(token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all categories available in the webstore. Gets all categories from a webstore. This does not include package information. To include package information, add &#x60;?includePackages&#x3D;1&#x60; to the URL.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        public TebexHeadless.Client.ApiResponse<CategoryResponse> GetAllCategoriesWithHttpInfo(string token, int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetAllCategories");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetAllCategories";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoryResponse>("/accounts/{token}/categories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets all categories available in the webstore. Gets all categories from a webstore. This does not include package information. To include package information, add &#x60;?includePackages&#x3D;1&#x60; to the URL.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryResponse</returns>
        public async System.Threading.Tasks.Task<CategoryResponse> GetAllCategoriesAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<CategoryResponse> localVarResponse = await GetAllCategoriesWithHttpInfoAsync(token, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all categories available in the webstore. Gets all categories from a webstore. This does not include package information. To include package information, add &#x60;?includePackages&#x3D;1&#x60; to the URL.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<CategoryResponse>> GetAllCategoriesWithHttpInfoAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetAllCategories");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetAllCategories";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoryResponse>("/accounts/{token}/categories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllCategories", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a store&#39;s categories including all package information with them. Gets all categories from a webstore including packages.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryResponse</returns>
        public CategoryResponse GetAllCategoriesIncludingPackages(string token, int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<CategoryResponse> localVarResponse = GetAllCategoriesIncludingPackagesWithHttpInfo(token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a store&#39;s categories including all package information with them. Gets all categories from a webstore including packages.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        public TebexHeadless.Client.ApiResponse<CategoryResponse> GetAllCategoriesIncludingPackagesWithHttpInfo(string token, int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetAllCategoriesIncludingPackages");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetAllCategoriesIncludingPackages";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoryResponse>("/accounts/{token}/categories?includePackages=1", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllCategoriesIncludingPackages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets a store&#39;s categories including all package information with them. Gets all categories from a webstore including packages.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryResponse</returns>
        public async System.Threading.Tasks.Task<CategoryResponse> GetAllCategoriesIncludingPackagesAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<CategoryResponse> localVarResponse = await GetAllCategoriesIncludingPackagesWithHttpInfoAsync(token, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a store&#39;s categories including all package information with them. Gets all categories from a webstore including packages.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<CategoryResponse>> GetAllCategoriesIncludingPackagesWithHttpInfoAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetAllCategoriesIncludingPackages");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetAllCategoriesIncludingPackages";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoryResponse>("/accounts/{token}/categories?includePackages=1", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllCategoriesIncludingPackages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch all packages from a webstore Gets all packages from a webstore.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PackageResponse</returns>
        public PackageResponse GetAllPackages(string token, int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<PackageResponse> localVarResponse = GetAllPackagesWithHttpInfo(token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch all packages from a webstore Gets all packages from a webstore.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PackageResponse</returns>
        public TebexHeadless.Client.ApiResponse<PackageResponse> GetAllPackagesWithHttpInfo(string token, int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetAllPackages");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetAllPackages";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PackageResponse>("/accounts/{token}/packages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPackages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch all packages from a webstore Gets all packages from a webstore.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PackageResponse</returns>
        public async System.Threading.Tasks.Task<PackageResponse> GetAllPackagesAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<PackageResponse> localVarResponse = await GetAllPackagesWithHttpInfoAsync(token, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch all packages from a webstore Gets all packages from a webstore.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PackageResponse)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<PackageResponse>> GetAllPackagesWithHttpInfoAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetAllPackages");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetAllPackages";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PackageResponse>("/accounts/{token}/packages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPackages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a package from a webstore by its identifier Gets all packages from a webstore.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="ipAddress">An IP address can be provided with authenticated requests.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PackageResponse</returns>
        public PackageResponse GetAllPackagesWithAuthedIP(string token, string ipAddress, int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<PackageResponse> localVarResponse = GetAllPackagesWithAuthedIPWithHttpInfo(token, ipAddress);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a package from a webstore by its identifier Gets all packages from a webstore.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="ipAddress">An IP address can be provided with authenticated requests.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PackageResponse</returns>
        public TebexHeadless.Client.ApiResponse<PackageResponse> GetAllPackagesWithAuthedIPWithHttpInfo(string token, string ipAddress, int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetAllPackagesWithAuthedIP");
            }

            // verify the required parameter 'ipAddress' is set
            if (ipAddress == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'ipAddress' when calling HeadlessApi->GetAllPackagesWithAuthedIP");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("ipAddress", TebexHeadless.Client.ClientUtils.ParameterToString(ipAddress)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetAllPackagesWithAuthedIP";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PackageResponse>("/accounts/{token}/packages?ipAddress={ipAddress}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPackagesWithAuthedIP", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a package from a webstore by its identifier Gets all packages from a webstore.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="ipAddress">An IP address can be provided with authenticated requests.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PackageResponse</returns>
        public async System.Threading.Tasks.Task<PackageResponse> GetAllPackagesWithAuthedIPAsync(string token, string ipAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<PackageResponse> localVarResponse = await GetAllPackagesWithAuthedIPWithHttpInfoAsync(token, ipAddress, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a package from a webstore by its identifier Gets all packages from a webstore.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="ipAddress">An IP address can be provided with authenticated requests.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PackageResponse)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<PackageResponse>> GetAllPackagesWithAuthedIPWithHttpInfoAsync(string token, string ipAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetAllPackagesWithAuthedIP");
            }

            // verify the required parameter 'ipAddress' is set
            if (ipAddress == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'ipAddress' when calling HeadlessApi->GetAllPackagesWithAuthedIP");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("ipAddress", TebexHeadless.Client.ClientUtils.ParameterToString(ipAddress)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetAllPackagesWithAuthedIP";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PackageResponse>("/accounts/{token}/packages?ipAddress={ipAddress}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPackagesWithAuthedIP", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a package from a webstore by its identifier Gets all packages from a webstore.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="ipAddress">An IP address can be provided with authenticated requests.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PackageResponse</returns>
        public PackageResponse GetAllPackagesWithAuthedIPAndBasket(string token, string basketIdent, string ipAddress, int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<PackageResponse> localVarResponse = GetAllPackagesWithAuthedIPAndBasketWithHttpInfo(token, basketIdent, ipAddress);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a package from a webstore by its identifier Gets all packages from a webstore.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="ipAddress">An IP address can be provided with authenticated requests.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PackageResponse</returns>
        public TebexHeadless.Client.ApiResponse<PackageResponse> GetAllPackagesWithAuthedIPAndBasketWithHttpInfo(string token, string basketIdent, string ipAddress, int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetAllPackagesWithAuthedIPAndBasket");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->GetAllPackagesWithAuthedIPAndBasket");
            }

            // verify the required parameter 'ipAddress' is set
            if (ipAddress == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'ipAddress' when calling HeadlessApi->GetAllPackagesWithAuthedIPAndBasket");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter
            localVarRequestOptions.PathParameters.Add("ipAddress", TebexHeadless.Client.ClientUtils.ParameterToString(ipAddress)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetAllPackagesWithAuthedIPAndBasket";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PackageResponse>("/accounts/{token}/packages?ipAddress={ipAddress}&basketIdent={basketIdent}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPackagesWithAuthedIPAndBasket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a package from a webstore by its identifier Gets all packages from a webstore.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="ipAddress">An IP address can be provided with authenticated requests.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PackageResponse</returns>
        public async System.Threading.Tasks.Task<PackageResponse> GetAllPackagesWithAuthedIPAndBasketAsync(string token, string basketIdent, string ipAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<PackageResponse> localVarResponse = await GetAllPackagesWithAuthedIPAndBasketWithHttpInfoAsync(token, basketIdent, ipAddress, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a package from a webstore by its identifier Gets all packages from a webstore.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="ipAddress">An IP address can be provided with authenticated requests.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PackageResponse)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<PackageResponse>> GetAllPackagesWithAuthedIPAndBasketWithHttpInfoAsync(string token, string basketIdent, string ipAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetAllPackagesWithAuthedIPAndBasket");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->GetAllPackagesWithAuthedIPAndBasket");
            }

            // verify the required parameter 'ipAddress' is set
            if (ipAddress == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'ipAddress' when calling HeadlessApi->GetAllPackagesWithAuthedIPAndBasket");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter
            localVarRequestOptions.PathParameters.Add("ipAddress", TebexHeadless.Client.ClientUtils.ParameterToString(ipAddress)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetAllPackagesWithAuthedIPAndBasket";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PackageResponse>("/accounts/{token}/packages?ipAddress={ipAddress}&basketIdent={basketIdent}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPackagesWithAuthedIPAndBasket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a package from a webstore by its identifier Gets all packages from a webstore.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PackageResponse</returns>
        public PackageResponse GetAllPackagesWithBasket(string token, string basketIdent, int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<PackageResponse> localVarResponse = GetAllPackagesWithBasketWithHttpInfo(token, basketIdent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a package from a webstore by its identifier Gets all packages from a webstore.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PackageResponse</returns>
        public TebexHeadless.Client.ApiResponse<PackageResponse> GetAllPackagesWithBasketWithHttpInfo(string token, string basketIdent, int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetAllPackagesWithBasket");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->GetAllPackagesWithBasket");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetAllPackagesWithBasket";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PackageResponse>("/accounts/{token}/packages?basketIdent={basketIdent}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPackagesWithBasket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a package from a webstore by its identifier Gets all packages from a webstore.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PackageResponse</returns>
        public async System.Threading.Tasks.Task<PackageResponse> GetAllPackagesWithBasketAsync(string token, string basketIdent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<PackageResponse> localVarResponse = await GetAllPackagesWithBasketWithHttpInfoAsync(token, basketIdent, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a package from a webstore by its identifier Gets all packages from a webstore.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PackageResponse)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<PackageResponse>> GetAllPackagesWithBasketWithHttpInfoAsync(string token, string basketIdent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetAllPackagesWithBasket");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->GetAllPackagesWithBasket");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetAllPackagesWithBasket";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PackageResponse>("/accounts/{token}/packages?basketIdent={basketIdent}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllPackagesWithBasket", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a basket from a webstore by its identifier Fetches a basket&#39;s auth URL.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="returnUrl">The URL you would like to redirect the user to after successful basket authentication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketResponse</returns>
        public BasketResponse GetBasketAuthUrl(string token, string basketIdent, string returnUrl, int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<BasketResponse> localVarResponse = GetBasketAuthUrlWithHttpInfo(token, basketIdent, returnUrl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a basket from a webstore by its identifier Fetches a basket&#39;s auth URL.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="returnUrl">The URL you would like to redirect the user to after successful basket authentication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketResponse</returns>
        public TebexHeadless.Client.ApiResponse<BasketResponse> GetBasketAuthUrlWithHttpInfo(string token, string basketIdent, string returnUrl, int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetBasketAuthUrl");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->GetBasketAuthUrl");
            }

            // verify the required parameter 'returnUrl' is set
            if (returnUrl == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'returnUrl' when calling HeadlessApi->GetBasketAuthUrl");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter
            localVarRequestOptions.PathParameters.Add("returnUrl", TebexHeadless.Client.ClientUtils.ParameterToString(returnUrl)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetBasketAuthUrl";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<BasketResponse>("/accounts/{token}/baskets/{basketIdent}/auth?returnUrl={returnUrl}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasketAuthUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a basket from a webstore by its identifier Fetches a basket&#39;s auth URL.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="returnUrl">The URL you would like to redirect the user to after successful basket authentication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketResponse</returns>
        public async System.Threading.Tasks.Task<BasketResponse> GetBasketAuthUrlAsync(string token, string basketIdent, string returnUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<BasketResponse> localVarResponse = await GetBasketAuthUrlWithHttpInfoAsync(token, basketIdent, returnUrl, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a basket from a webstore by its identifier Fetches a basket&#39;s auth URL.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="returnUrl">The URL you would like to redirect the user to after successful basket authentication.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketResponse)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<BasketResponse>> GetBasketAuthUrlWithHttpInfoAsync(string token, string basketIdent, string returnUrl, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetBasketAuthUrl");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->GetBasketAuthUrl");
            }

            // verify the required parameter 'returnUrl' is set
            if (returnUrl == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'returnUrl' when calling HeadlessApi->GetBasketAuthUrl");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter
            localVarRequestOptions.PathParameters.Add("returnUrl", TebexHeadless.Client.ClientUtils.ParameterToString(returnUrl)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetBasketAuthUrl";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BasketResponse>("/accounts/{token}/baskets/{basketIdent}/auth?returnUrl={returnUrl}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasketAuthUrl", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a basket from a webstore by its identifier Gets a basket associated with the provided identifier.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>BasketResponse</returns>
        public BasketResponse GetBasketById(string token, string basketIdent, int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<BasketResponse> localVarResponse = GetBasketByIdWithHttpInfo(token, basketIdent);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a basket from a webstore by its identifier Gets a basket associated with the provided identifier.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of BasketResponse</returns>
        public TebexHeadless.Client.ApiResponse<BasketResponse> GetBasketByIdWithHttpInfo(string token, string basketIdent, int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetBasketById");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->GetBasketById");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetBasketById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<BasketResponse>("/accounts/{token}/baskets/{basketIdent}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasketById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a basket from a webstore by its identifier Gets a basket associated with the provided identifier.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BasketResponse</returns>
        public async System.Threading.Tasks.Task<BasketResponse> GetBasketByIdAsync(string token, string basketIdent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<BasketResponse> localVarResponse = await GetBasketByIdWithHttpInfoAsync(token, basketIdent, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a basket from a webstore by its identifier Gets a basket associated with the provided identifier.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BasketResponse)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<BasketResponse>> GetBasketByIdWithHttpInfoAsync(string token, string basketIdent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetBasketById");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->GetBasketById");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetBasketById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<BasketResponse>("/accounts/{token}/baskets/{basketIdent}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBasketById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the custom pages associated with the store. Gets a list of custom pages associated with the webstore. These contain a &#x60;content&#x60; variable with the HTML content of the page.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSPagesResponse</returns>
        public CMSPagesResponse GetCMSPages(string token, int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<CMSPagesResponse> localVarResponse = GetCMSPagesWithHttpInfo(token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the custom pages associated with the store. Gets a list of custom pages associated with the webstore. These contain a &#x60;content&#x60; variable with the HTML content of the page.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSPagesResponse</returns>
        public TebexHeadless.Client.ApiResponse<CMSPagesResponse> GetCMSPagesWithHttpInfo(string token, int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetCMSPages");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetCMSPages";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CMSPagesResponse>("/accounts/{token}/pages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCMSPages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch the custom pages associated with the store. Gets a list of custom pages associated with the webstore. These contain a &#x60;content&#x60; variable with the HTML content of the page.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSPagesResponse</returns>
        public async System.Threading.Tasks.Task<CMSPagesResponse> GetCMSPagesAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<CMSPagesResponse> localVarResponse = await GetCMSPagesWithHttpInfoAsync(token, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch the custom pages associated with the store. Gets a list of custom pages associated with the webstore. These contain a &#x60;content&#x60; variable with the HTML content of the page.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSPagesResponse)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<CMSPagesResponse>> GetCMSPagesWithHttpInfoAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetCMSPages");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetCMSPages";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CMSPagesResponse>("/accounts/{token}/pages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCMSPages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets information about a specific category Gets information about a category and returns the packages in that category.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="categoryId">The ID of the category to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryResponse</returns>
        public CategoryResponse GetCategoryById(string token, string categoryId, int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<CategoryResponse> localVarResponse = GetCategoryByIdWithHttpInfo(token, categoryId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets information about a specific category Gets information about a category and returns the packages in that category.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="categoryId">The ID of the category to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        public TebexHeadless.Client.ApiResponse<CategoryResponse> GetCategoryByIdWithHttpInfo(string token, string categoryId, int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetCategoryById");
            }

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'categoryId' when calling HeadlessApi->GetCategoryById");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("categoryId", TebexHeadless.Client.ClientUtils.ParameterToString(categoryId)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetCategoryById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoryResponse>("/accounts/{token}/categories/{categoryId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets information about a specific category Gets information about a category and returns the packages in that category.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="categoryId">The ID of the category to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryResponse</returns>
        public async System.Threading.Tasks.Task<CategoryResponse> GetCategoryByIdAsync(string token, string categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<CategoryResponse> localVarResponse = await GetCategoryByIdWithHttpInfoAsync(token, categoryId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets information about a specific category Gets information about a category and returns the packages in that category.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="categoryId">The ID of the category to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<CategoryResponse>> GetCategoryByIdWithHttpInfoAsync(string token, string categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetCategoryById");
            }

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'categoryId' when calling HeadlessApi->GetCategoryById");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("categoryId", TebexHeadless.Client.ClientUtils.ParameterToString(categoryId)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetCategoryById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoryResponse>("/accounts/{token}/categories/{categoryId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets information about a specific category, including all the packages in the category Gets information about a category and returns the packages in that category.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="categoryId">The ID of the category to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryResponse</returns>
        public CategoryResponse GetCategoryIncludingPackages(string token, string categoryId, int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<CategoryResponse> localVarResponse = GetCategoryIncludingPackagesWithHttpInfo(token, categoryId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets information about a specific category, including all the packages in the category Gets information about a category and returns the packages in that category.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="categoryId">The ID of the category to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryResponse</returns>
        public TebexHeadless.Client.ApiResponse<CategoryResponse> GetCategoryIncludingPackagesWithHttpInfo(string token, string categoryId, int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetCategoryIncludingPackages");
            }

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'categoryId' when calling HeadlessApi->GetCategoryIncludingPackages");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("categoryId", TebexHeadless.Client.ClientUtils.ParameterToString(categoryId)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetCategoryIncludingPackages";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoryResponse>("/accounts/{token}/categories/{categoryId}?includePackages=1", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryIncludingPackages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets information about a specific category, including all the packages in the category Gets information about a category and returns the packages in that category.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="categoryId">The ID of the category to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryResponse</returns>
        public async System.Threading.Tasks.Task<CategoryResponse> GetCategoryIncludingPackagesAsync(string token, string categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<CategoryResponse> localVarResponse = await GetCategoryIncludingPackagesWithHttpInfoAsync(token, categoryId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets information about a specific category, including all the packages in the category Gets information about a category and returns the packages in that category.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="categoryId">The ID of the category to fetch.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryResponse)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<CategoryResponse>> GetCategoryIncludingPackagesWithHttpInfoAsync(string token, string categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetCategoryIncludingPackages");
            }

            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'categoryId' when calling HeadlessApi->GetCategoryIncludingPackages");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("categoryId", TebexHeadless.Client.ClientUtils.ParameterToString(categoryId)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetCategoryIncludingPackages";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoryResponse>("/accounts/{token}/categories/{categoryId}?includePackages=1", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCategoryIncludingPackages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a package from a webstore by its identifier Gets a package from a webstore by ID.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="packageId">The package&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PackageResponse</returns>
        public PackageResponse GetPackageById(string token, decimal packageId, int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<PackageResponse> localVarResponse = GetPackageByIdWithHttpInfo(token, packageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a package from a webstore by its identifier Gets a package from a webstore by ID.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="packageId">The package&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PackageResponse</returns>
        public TebexHeadless.Client.ApiResponse<PackageResponse> GetPackageByIdWithHttpInfo(string token, decimal packageId, int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetPackageById");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("packageId", TebexHeadless.Client.ClientUtils.ParameterToString(packageId)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetPackageById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PackageResponse>("/accounts/{token}/packages/{packageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPackageById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a package from a webstore by its identifier Gets a package from a webstore by ID.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="packageId">The package&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PackageResponse</returns>
        public async System.Threading.Tasks.Task<PackageResponse> GetPackageByIdAsync(string token, decimal packageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<PackageResponse> localVarResponse = await GetPackageByIdWithHttpInfoAsync(token, packageId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a package from a webstore by its identifier Gets a package from a webstore by ID.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="packageId">The package&#39;s ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PackageResponse)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<PackageResponse>> GetPackageByIdWithHttpInfoAsync(string token, decimal packageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetPackageById");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("packageId", TebexHeadless.Client.ClientUtils.ParameterToString(packageId)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetPackageById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PackageResponse>("/accounts/{token}/packages/{packageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPackageById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a webstore by its identifier Gets the webstore associated with the provided identifier.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebstoreResponse</returns>
        public WebstoreResponse GetWebstoreById(string token, int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<WebstoreResponse> localVarResponse = GetWebstoreByIdWithHttpInfo(token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a webstore by its identifier Gets the webstore associated with the provided identifier.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebstoreResponse</returns>
        public TebexHeadless.Client.ApiResponse<WebstoreResponse> GetWebstoreByIdWithHttpInfo(string token, int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetWebstoreById");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetWebstoreById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<WebstoreResponse>("/accounts/{token}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebstoreById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Fetch a webstore by its identifier Gets the webstore associated with the provided identifier.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebstoreResponse</returns>
        public async System.Threading.Tasks.Task<WebstoreResponse> GetWebstoreByIdAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<WebstoreResponse> localVarResponse = await GetWebstoreByIdWithHttpInfoAsync(token, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch a webstore by its identifier Gets the webstore associated with the provided identifier.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebstoreResponse)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<WebstoreResponse>> GetWebstoreByIdWithHttpInfoAsync(string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->GetWebstoreById");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.GetWebstoreById";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<WebstoreResponse>("/accounts/{token}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebstoreById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a package from a basket Remove the given package ID from the basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="removeBasketPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Basket</returns>
        public Basket RemoveBasketPackage(string basketIdent, RemoveBasketPackageRequest? removeBasketPackageRequest = default(RemoveBasketPackageRequest?), int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<Basket> localVarResponse = RemoveBasketPackageWithHttpInfo(basketIdent, removeBasketPackageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a package from a basket Remove the given package ID from the basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="removeBasketPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Basket</returns>
        public TebexHeadless.Client.ApiResponse<Basket> RemoveBasketPackageWithHttpInfo(string basketIdent, RemoveBasketPackageRequest? removeBasketPackageRequest = default(RemoveBasketPackageRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->RemoveBasketPackage");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter
            localVarRequestOptions.Data = removeBasketPackageRequest;

            localVarRequestOptions.Operation = "HeadlessApi.RemoveBasketPackage";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Basket>("/baskets/{basketIdent}/packages/remove", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveBasketPackage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a package from a basket Remove the given package ID from the basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="removeBasketPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Basket</returns>
        public async System.Threading.Tasks.Task<Basket> RemoveBasketPackageAsync(string basketIdent, RemoveBasketPackageRequest? removeBasketPackageRequest = default(RemoveBasketPackageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<Basket> localVarResponse = await RemoveBasketPackageWithHttpInfoAsync(basketIdent, removeBasketPackageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a package from a basket Remove the given package ID from the basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="removeBasketPackageRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Basket)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<Basket>> RemoveBasketPackageWithHttpInfoAsync(string basketIdent, RemoveBasketPackageRequest? removeBasketPackageRequest = default(RemoveBasketPackageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->RemoveBasketPackage");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter
            localVarRequestOptions.Data = removeBasketPackageRequest;

            localVarRequestOptions.Operation = "HeadlessApi.RemoveBasketPackage";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Basket>("/baskets/{basketIdent}/packages/remove", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveBasketPackage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a coupon from the basket. Removes a coupon code from a basket
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveCoupon(string token, string basketIdent, int operationIndex = 0)
        {
            RemoveCouponWithHttpInfo(token, basketIdent);
        }

        /// <summary>
        /// Remove a coupon from the basket. Removes a coupon code from a basket
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TebexHeadless.Client.ApiResponse<Object> RemoveCouponWithHttpInfo(string token, string basketIdent, int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->RemoveCoupon");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->RemoveCoupon");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.RemoveCoupon";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/accounts/{token}/baskets/{basketIdent}/coupons/remove", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveCoupon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a coupon from the basket. Removes a coupon code from a basket
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveCouponAsync(string token, string basketIdent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveCouponWithHttpInfoAsync(token, basketIdent, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a coupon from the basket. Removes a coupon code from a basket
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<Object>> RemoveCouponWithHttpInfoAsync(string token, string basketIdent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->RemoveCoupon");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->RemoveCoupon");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.RemoveCoupon";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/accounts/{token}/baskets/{basketIdent}/coupons/remove", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveCoupon", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a creator code from the basket. Applies a creator code to a basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveCreatorCode(string token, string basketIdent, int operationIndex = 0)
        {
            RemoveCreatorCodeWithHttpInfo(token, basketIdent);
        }

        /// <summary>
        /// Remove a creator code from the basket. Applies a creator code to a basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TebexHeadless.Client.ApiResponse<Object> RemoveCreatorCodeWithHttpInfo(string token, string basketIdent, int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->RemoveCreatorCode");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->RemoveCreatorCode");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.RemoveCreatorCode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/accounts/{token}/baskets/{basketIdent}/creator-codes/remove", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveCreatorCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a creator code from the basket. Applies a creator code to a basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveCreatorCodeAsync(string token, string basketIdent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveCreatorCodeWithHttpInfoAsync(token, basketIdent, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a creator code from the basket. Applies a creator code to a basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<Object>> RemoveCreatorCodeWithHttpInfoAsync(string token, string basketIdent, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->RemoveCreatorCode");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->RemoveCreatorCode");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter

            localVarRequestOptions.Operation = "HeadlessApi.RemoveCreatorCode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/accounts/{token}/baskets/{basketIdent}/creator-codes/remove", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveCreatorCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a gift card from the basket. Removes a gift card from the basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="removeGiftCardRequest">Provide the &#x60;card_number&#x60; to remove from the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveGiftCard(string token, string basketIdent, RemoveGiftCardRequest? removeGiftCardRequest = default(RemoveGiftCardRequest?), int operationIndex = 0)
        {
            RemoveGiftCardWithHttpInfo(token, basketIdent, removeGiftCardRequest);
        }

        /// <summary>
        /// Remove a gift card from the basket. Removes a gift card from the basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="removeGiftCardRequest">Provide the &#x60;card_number&#x60; to remove from the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TebexHeadless.Client.ApiResponse<Object> RemoveGiftCardWithHttpInfo(string token, string basketIdent, RemoveGiftCardRequest? removeGiftCardRequest = default(RemoveGiftCardRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->RemoveGiftCard");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->RemoveGiftCard");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter
            localVarRequestOptions.Data = removeGiftCardRequest;

            localVarRequestOptions.Operation = "HeadlessApi.RemoveGiftCard";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/accounts/{token}/baskets/{basketIdent}/giftcards/remove", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveGiftCard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a gift card from the basket. Removes a gift card from the basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="removeGiftCardRequest">Provide the &#x60;card_number&#x60; to remove from the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveGiftCardAsync(string token, string basketIdent, RemoveGiftCardRequest? removeGiftCardRequest = default(RemoveGiftCardRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RemoveGiftCardWithHttpInfoAsync(token, basketIdent, removeGiftCardRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a gift card from the basket. Removes a gift card from the basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="removeGiftCardRequest">Provide the &#x60;card_number&#x60; to remove from the basket. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<Object>> RemoveGiftCardWithHttpInfoAsync(string token, string basketIdent, RemoveGiftCardRequest? removeGiftCardRequest = default(RemoveGiftCardRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->RemoveGiftCard");
            }

            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->RemoveGiftCard");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter
            localVarRequestOptions.Data = removeGiftCardRequest;

            localVarRequestOptions.Operation = "HeadlessApi.RemoveGiftCard";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/accounts/{token}/baskets/{basketIdent}/giftcards/remove", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveGiftCard", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed. Sets the quantity of the given item in the basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="packageId">The package identifier.</param>
        /// <param name="updatePackageQuantityRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdatePackageQuantity(string basketIdent, decimal packageId, UpdatePackageQuantityRequest? updatePackageQuantityRequest = default(UpdatePackageQuantityRequest?), int operationIndex = 0)
        {
            UpdatePackageQuantityWithHttpInfo(basketIdent, packageId, updatePackageQuantityRequest);
        }

        /// <summary>
        /// Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed. Sets the quantity of the given item in the basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="packageId">The package identifier.</param>
        /// <param name="updatePackageQuantityRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public TebexHeadless.Client.ApiResponse<Object> UpdatePackageQuantityWithHttpInfo(string basketIdent, decimal packageId, UpdatePackageQuantityRequest? updatePackageQuantityRequest = default(UpdatePackageQuantityRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->UpdatePackageQuantity");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter
            localVarRequestOptions.PathParameters.Add("packageId", TebexHeadless.Client.ClientUtils.ParameterToString(packageId)); // path parameter
            localVarRequestOptions.Data = updatePackageQuantityRequest;

            localVarRequestOptions.Operation = "HeadlessApi.UpdatePackageQuantity";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/baskets/{basketIdent}/packages/{packageId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePackageQuantity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed. Sets the quantity of the given item in the basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="packageId">The package identifier.</param>
        /// <param name="updatePackageQuantityRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePackageQuantityAsync(string basketIdent, decimal packageId, UpdatePackageQuantityRequest? updatePackageQuantityRequest = default(UpdatePackageQuantityRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdatePackageQuantityWithHttpInfoAsync(basketIdent, packageId, updatePackageQuantityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed. Sets the quantity of the given item in the basket.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basketIdent">The basket identifier.</param>
        /// <param name="packageId">The package identifier.</param>
        /// <param name="updatePackageQuantityRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<Object>> UpdatePackageQuantityWithHttpInfoAsync(string basketIdent, decimal packageId, UpdatePackageQuantityRequest? updatePackageQuantityRequest = default(UpdatePackageQuantityRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'basketIdent' is set
            if (basketIdent == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'basketIdent' when calling HeadlessApi->UpdatePackageQuantity");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("basketIdent", TebexHeadless.Client.ClientUtils.ParameterToString(basketIdent)); // path parameter
            localVarRequestOptions.PathParameters.Add("packageId", TebexHeadless.Client.ClientUtils.ParameterToString(packageId)); // path parameter
            localVarRequestOptions.Data = updatePackageQuantityRequest;

            localVarRequestOptions.Operation = "HeadlessApi.UpdatePackageQuantity";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/baskets/{basketIdent}/packages/{packageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePackageQuantity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TODO Updates a tier.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="tierId">The tier identifier</param>
        /// <param name="updateTierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CMSPagesResponse</returns>
        public CMSPagesResponse UpdateTier(string token, string tierId, UpdateTierRequest? updateTierRequest = default(UpdateTierRequest?), int operationIndex = 0)
        {
            TebexHeadless.Client.ApiResponse<CMSPagesResponse> localVarResponse = UpdateTierWithHttpInfo(token, tierId, updateTierRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TODO Updates a tier.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="tierId">The tier identifier</param>
        /// <param name="updateTierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CMSPagesResponse</returns>
        public TebexHeadless.Client.ApiResponse<CMSPagesResponse> UpdateTierWithHttpInfo(string token, string tierId, UpdateTierRequest? updateTierRequest = default(UpdateTierRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->UpdateTier");
            }

            // verify the required parameter 'tierId' is set
            if (tierId == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'tierId' when calling HeadlessApi->UpdateTier");
            }

            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("tierId", TebexHeadless.Client.ClientUtils.ParameterToString(tierId)); // path parameter
            localVarRequestOptions.Data = updateTierRequest;

            localVarRequestOptions.Operation = "HeadlessApi.UpdateTier";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<CMSPagesResponse>("/accounts/{token}/tiers/{tierId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// TODO Updates a tier.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="tierId">The tier identifier</param>
        /// <param name="updateTierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CMSPagesResponse</returns>
        public async System.Threading.Tasks.Task<CMSPagesResponse> UpdateTierAsync(string token, string tierId, UpdateTierRequest? updateTierRequest = default(UpdateTierRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            TebexHeadless.Client.ApiResponse<CMSPagesResponse> localVarResponse = await UpdateTierWithHttpInfoAsync(token, tierId, updateTierRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// TODO Updates a tier.
        /// </summary>
        /// <exception cref="TebexHeadless.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">The webstore identifier.</param>
        /// <param name="tierId">The tier identifier</param>
        /// <param name="updateTierRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CMSPagesResponse)</returns>
        public async System.Threading.Tasks.Task<TebexHeadless.Client.ApiResponse<CMSPagesResponse>> UpdateTierWithHttpInfoAsync(string token, string tierId, UpdateTierRequest? updateTierRequest = default(UpdateTierRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'token' when calling HeadlessApi->UpdateTier");
            }

            // verify the required parameter 'tierId' is set
            if (tierId == null)
            {
                throw new TebexHeadless.Client.ApiException(400, "Missing required parameter 'tierId' when calling HeadlessApi->UpdateTier");
            }


            TebexHeadless.Client.RequestOptions localVarRequestOptions = new TebexHeadless.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = TebexHeadless.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = TebexHeadless.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("token", TebexHeadless.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.PathParameters.Add("tierId", TebexHeadless.Client.ClientUtils.ParameterToString(tierId)); // path parameter
            localVarRequestOptions.Data = updateTierRequest;

            localVarRequestOptions.Operation = "HeadlessApi.UpdateTier";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CMSPagesResponse>("/accounts/{token}/tiers/{tierId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
