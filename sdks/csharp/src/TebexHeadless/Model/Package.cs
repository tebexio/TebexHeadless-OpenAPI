/*
 * Tebex Headless API
 *
 * The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TebexHeadless.Client.OpenAPIDateConverter;

namespace TebexHeadless.Model
{
    /// <summary>
    /// Package
    /// </summary>
    [DataContract(Name = "Package")]
    public partial class Package : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Package" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="image">image.</param>
        /// <param name="type">type.</param>
        /// <param name="category">category.</param>
        /// <param name="basePrice">basePrice.</param>
        /// <param name="salesTax">salesTax.</param>
        /// <param name="totalPrice">totalPrice.</param>
        /// <param name="currency">currency.</param>
        /// <param name="discount">discount.</param>
        /// <param name="disableQuantity">disableQuantity.</param>
        /// <param name="disableGifting">disableGifting.</param>
        /// <param name="expirationDate">expirationDate.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public Package(int id = default(int), string name = default(string), string description = default(string), string image = default(string), string type = default(string), PackageCategory category = default(PackageCategory), float basePrice = default(float), float salesTax = default(float), float totalPrice = default(float), string currency = default(string), float discount = default(float), bool disableQuantity = default(bool), bool disableGifting = default(bool), DateTime? expirationDate = default(DateTime?), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime))
        {
            this.Id = id;
            this.Name = name;
            this.Description = description;
            this.Image = image;
            this.Type = type;
            this.Category = category;
            this.BasePrice = basePrice;
            this.SalesTax = salesTax;
            this.TotalPrice = totalPrice;
            this.Currency = currency;
            this.Discount = discount;
            this.DisableQuantity = disableQuantity;
            this.DisableGifting = disableGifting;
            this.ExpirationDate = expirationDate;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <example>6276316</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /// <example>test package 101</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /// <example>&lt;p&gt;this is just a test. only a test. nothing more.&lt;/p&gt;</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Image
        /// </summary>
        [DataMember(Name = "image", EmitDefaultValue = true)]
        public string Image { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        /// <example>single</example>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public PackageCategory Category { get; set; }

        /// <summary>
        /// Gets or Sets BasePrice
        /// </summary>
        /// <example>5</example>
        [DataMember(Name = "base_price", EmitDefaultValue = false)]
        public float BasePrice { get; set; }

        /// <summary>
        /// Gets or Sets SalesTax
        /// </summary>
        /// <example>0</example>
        [DataMember(Name = "sales_tax", EmitDefaultValue = false)]
        public float SalesTax { get; set; }

        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>
        /// <example>5</example>
        [DataMember(Name = "total_price", EmitDefaultValue = false)]
        public float TotalPrice { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        /// <example>USD</example>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Discount
        /// </summary>
        /// <example>0</example>
        [DataMember(Name = "discount", EmitDefaultValue = false)]
        public float Discount { get; set; }

        /// <summary>
        /// Gets or Sets DisableQuantity
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "disable_quantity", EmitDefaultValue = true)]
        public bool DisableQuantity { get; set; }

        /// <summary>
        /// Gets or Sets DisableGifting
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "disable_gifting", EmitDefaultValue = true)]
        public bool DisableGifting { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name = "expiration_date", EmitDefaultValue = true)]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /// <example>2024-05-21T18:09:17Z</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        /// <example>2024-05-21T18:09:17Z</example>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Package {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  BasePrice: ").Append(BasePrice).Append("\n");
            sb.Append("  SalesTax: ").Append(SalesTax).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  DisableQuantity: ").Append(DisableQuantity).Append("\n");
            sb.Append("  DisableGifting: ").Append(DisableGifting).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
