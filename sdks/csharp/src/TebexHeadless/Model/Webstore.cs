/*
 * Tebex Headless API
 *
 * The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TebexHeadless.Client.OpenAPIDateConverter;

namespace TebexHeadless.Model
{
    /// <summary>
    /// Webstore
    /// </summary>
    [DataContract(Name = "Webstore")]
    public partial class Webstore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Webstore" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="description">Store description in HTML format.</param>
        /// <param name="name">Name of the store.</param>
        /// <param name="webstoreUrl">URL of the webstore.</param>
        /// <param name="currency">Currency used in the store.</param>
        /// <param name="lang">Language of the store.</param>
        /// <param name="logo">URL of the store&#39;s logo.</param>
        /// <param name="platformType">Platform type for the store.</param>
        /// <param name="platformTypeId">platformTypeId.</param>
        /// <param name="createdAt">The date and time when the store was created.</param>
        public Webstore(int id = default(int), string description = default(string), string name = default(string), string webstoreUrl = default(string), string currency = default(string), string lang = default(string), string logo = default(string), string platformType = default(string), string platformTypeId = default(string), DateTime createdAt = default(DateTime))
        {
            this.Id = id;
            this.Description = description;
            this.Name = name;
            this.WebstoreUrl = webstoreUrl;
            this.Currency = currency;
            this.Lang = lang;
            this.Logo = logo;
            this.PlatformType = platformType;
            this.PlatformTypeId = platformTypeId;
            this.CreatedAt = createdAt;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <example>1</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Store description in HTML format
        /// </summary>
        /// <value>Store description in HTML format</value>
        /// <example>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris fermentum eget tellus et cursus. Pellentesque vel vehicula velit, sit amet tincidunt diam. Aliquam sit amet fermentum lorem.&lt;/p&gt;</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Name of the store
        /// </summary>
        /// <value>Name of the store</value>
        /// <example>Minecraft Store</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// URL of the webstore
        /// </summary>
        /// <value>URL of the webstore</value>
        /// <example>https://example.tebex.io</example>
        [DataMember(Name = "webstore_url", EmitDefaultValue = false)]
        public string WebstoreUrl { get; set; }

        /// <summary>
        /// Currency used in the store
        /// </summary>
        /// <value>Currency used in the store</value>
        /// <example>USD</example>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Language of the store
        /// </summary>
        /// <value>Language of the store</value>
        /// <example>en</example>
        [DataMember(Name = "lang", EmitDefaultValue = false)]
        public string Lang { get; set; }

        /// <summary>
        /// URL of the store&#39;s logo
        /// </summary>
        /// <value>URL of the store&#39;s logo</value>
        [DataMember(Name = "logo", EmitDefaultValue = true)]
        public string Logo { get; set; }

        /// <summary>
        /// Platform type for the store
        /// </summary>
        /// <value>Platform type for the store</value>
        /// <example>Minecraft: Java Edition</example>
        [DataMember(Name = "platform_type", EmitDefaultValue = false)]
        public string PlatformType { get; set; }

        /// <summary>
        /// Gets or Sets PlatformTypeId
        /// </summary>
        /// <example>minecraft</example>
        [DataMember(Name = "platform_type_id", EmitDefaultValue = false)]
        public string PlatformTypeId { get; set; }

        /// <summary>
        /// The date and time when the store was created
        /// </summary>
        /// <value>The date and time when the store was created</value>
        /// <example>2023-05-25T09:49:37Z</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Webstore {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  WebstoreUrl: ").Append(WebstoreUrl).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  PlatformType: ").Append(PlatformType).Append("\n");
            sb.Append("  PlatformTypeId: ").Append(PlatformTypeId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
