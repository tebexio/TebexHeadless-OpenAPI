/*
 * Tebex Headless API
 *
 * The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TebexHeadless.Client.OpenAPIDateConverter;

namespace TebexHeadless.Model
{
    /// <summary>
    /// CreateBasketRequest
    /// </summary>
    [DataContract(Name = "createBasket_request")]
    public partial class CreateBasketRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBasketRequest" /> class.
        /// </summary>
        /// <param name="completeUrl">A URL the user can return to when checkout is completed..</param>
        /// <param name="cancelUrl">A URL the user can return to when cancelling checkout..</param>
        /// <param name="custom">Custom data you wish to associate with the basket. This data will be included with webhook responses and GET requests associated with the Basket..</param>
        /// <param name="completeAutoRedirect">True if the user should automatically be redirected to the relevant complete/cancel URL.</param>
        public CreateBasketRequest(string completeUrl = default(string), string cancelUrl = default(string), Object custom = default(Object), bool completeAutoRedirect = default(bool))
        {
            this.CompleteUrl = completeUrl;
            this.CancelUrl = cancelUrl;
            this.Custom = custom;
            this.CompleteAutoRedirect = completeAutoRedirect;
        }

        /// <summary>
        /// A URL the user can return to when checkout is completed.
        /// </summary>
        /// <value>A URL the user can return to when checkout is completed.</value>
        /// <example>https://example.tebex.io/thank-you</example>
        [DataMember(Name = "complete_url", EmitDefaultValue = false)]
        public string CompleteUrl { get; set; }

        /// <summary>
        /// A URL the user can return to when cancelling checkout.
        /// </summary>
        /// <value>A URL the user can return to when cancelling checkout.</value>
        /// <example>https://tebex.io/</example>
        [DataMember(Name = "cancel_url", EmitDefaultValue = false)]
        public string CancelUrl { get; set; }

        /// <summary>
        /// Custom data you wish to associate with the basket. This data will be included with webhook responses and GET requests associated with the Basket.
        /// </summary>
        /// <value>Custom data you wish to associate with the basket. This data will be included with webhook responses and GET requests associated with the Basket.</value>
        /// <example>{&quot;foo&quot;:&quot;bar&quot;}</example>
        [DataMember(Name = "custom", EmitDefaultValue = false)]
        public Object Custom { get; set; }

        /// <summary>
        /// True if the user should automatically be redirected to the relevant complete/cancel URL
        /// </summary>
        /// <value>True if the user should automatically be redirected to the relevant complete/cancel URL</value>
        /// <example>true</example>
        [DataMember(Name = "complete_auto_redirect", EmitDefaultValue = true)]
        public bool CompleteAutoRedirect { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateBasketRequest {\n");
            sb.Append("  CompleteUrl: ").Append(CompleteUrl).Append("\n");
            sb.Append("  CancelUrl: ").Append(CancelUrl).Append("\n");
            sb.Append("  Custom: ").Append(Custom).Append("\n");
            sb.Append("  CompleteAutoRedirect: ").Append(CompleteAutoRedirect).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
