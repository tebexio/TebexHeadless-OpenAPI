/*
 * Tebex Headless API
 *
 * The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TebexHeadless.Client.OpenAPIDateConverter;

namespace TebexHeadless.Model
{
    /// <summary>
    /// Basket
    /// </summary>
    [DataContract(Name = "Basket")]
    public partial class Basket : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Basket" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="ident">ident.</param>
        /// <param name="complete">complete.</param>
        /// <param name="email">email.</param>
        /// <param name="username">username.</param>
        /// <param name="coupons">coupons.</param>
        /// <param name="giftcards">giftcards.</param>
        /// <param name="creatorCode">The creator code is used to share a percentage of the payment with another party. See more about creator codes at https://docs.tebex.io/creators/tebex-control-panel/engagement/creator-codes.</param>
        /// <param name="cancelUrl">cancelUrl.</param>
        /// <param name="completeUrl">completeUrl.</param>
        /// <param name="completeAutoRedirect">completeAutoRedirect.</param>
        /// <param name="country">A two-character country code.</param>
        /// <param name="ip">ip.</param>
        /// <param name="usernameId">usernameId.</param>
        /// <param name="basePrice">basePrice.</param>
        /// <param name="salesTax">salesTax.</param>
        /// <param name="totalPrice">totalPrice.</param>
        /// <param name="currency">A 3 character currency code.</param>
        /// <param name="packages">packages.</param>
        /// <param name="custom">custom.</param>
        /// <param name="links">links.</param>
        public Basket(string id = default(string), string ident = default(string), bool complete = default(bool), string email = default(string), string username = default(string), List<Coupon> coupons = default(List<Coupon>), List<GiftCard> giftcards = default(List<GiftCard>), string creatorCode = default(string), string cancelUrl = default(string), string completeUrl = default(string), bool completeAutoRedirect = default(bool), string country = default(string), string ip = default(string), decimal usernameId = default(decimal), float basePrice = default(float), float salesTax = default(float), float totalPrice = default(float), string currency = default(string), List<BasketPackage> packages = default(List<BasketPackage>), Object custom = default(Object), BasketLinks links = default(BasketLinks))
        {
            this.Id = id;
            this.Ident = ident;
            this.Complete = complete;
            this.Email = email;
            this.Username = username;
            this.Coupons = coupons;
            this.Giftcards = giftcards;
            this.CreatorCode = creatorCode;
            this.CancelUrl = cancelUrl;
            this.CompleteUrl = completeUrl;
            this.CompleteAutoRedirect = completeAutoRedirect;
            this.Country = country;
            this.Ip = ip;
            this.UsernameId = usernameId;
            this.BasePrice = basePrice;
            this.SalesTax = salesTax;
            this.TotalPrice = totalPrice;
            this.Currency = currency;
            this.Packages = packages;
            this.Custom = custom;
            this.Links = links;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <example>244127617</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Ident
        /// </summary>
        /// <example>1a-55fff4107740a1f40d844ff89607557f45bfafb3</example>
        [DataMember(Name = "ident", EmitDefaultValue = false)]
        public string Ident { get; set; }

        /// <summary>
        /// Gets or Sets Complete
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "complete", EmitDefaultValue = true)]
        public bool Complete { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        /// <example>support@tebex.io</example>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Coupons
        /// </summary>
        [DataMember(Name = "coupons", EmitDefaultValue = false)]
        public List<Coupon> Coupons { get; set; }

        /// <summary>
        /// Gets or Sets Giftcards
        /// </summary>
        [DataMember(Name = "giftcards", EmitDefaultValue = false)]
        public List<GiftCard> Giftcards { get; set; }

        /// <summary>
        /// The creator code is used to share a percentage of the payment with another party. See more about creator codes at https://docs.tebex.io/creators/tebex-control-panel/engagement/creator-codes
        /// </summary>
        /// <value>The creator code is used to share a percentage of the payment with another party. See more about creator codes at https://docs.tebex.io/creators/tebex-control-panel/engagement/creator-codes</value>
        [DataMember(Name = "creator_code", EmitDefaultValue = false)]
        public string CreatorCode { get; set; }

        /// <summary>
        /// Gets or Sets CancelUrl
        /// </summary>
        /// <example>https://tebex.io</example>
        [DataMember(Name = "cancel_url", EmitDefaultValue = false)]
        public string CancelUrl { get; set; }

        /// <summary>
        /// Gets or Sets CompleteUrl
        /// </summary>
        [DataMember(Name = "complete_url", EmitDefaultValue = true)]
        public string CompleteUrl { get; set; }

        /// <summary>
        /// Gets or Sets CompleteAutoRedirect
        /// </summary>
        /// <example>false</example>
        [DataMember(Name = "complete_auto_redirect", EmitDefaultValue = true)]
        public bool CompleteAutoRedirect { get; set; }

        /// <summary>
        /// A two-character country code
        /// </summary>
        /// <value>A two-character country code</value>
        /// <example>US</example>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Ip
        /// </summary>
        /// <example>127.0.0.1</example>
        [DataMember(Name = "ip", EmitDefaultValue = false)]
        public string Ip { get; set; }

        /// <summary>
        /// Gets or Sets UsernameId
        /// </summary>
        /// <example>127244</example>
        [DataMember(Name = "username_id", EmitDefaultValue = false)]
        public decimal UsernameId { get; set; }

        /// <summary>
        /// Gets or Sets BasePrice
        /// </summary>
        /// <example>1.27</example>
        [DataMember(Name = "base_price", EmitDefaultValue = false)]
        public float BasePrice { get; set; }

        /// <summary>
        /// Gets or Sets SalesTax
        /// </summary>
        /// <example>0.11</example>
        [DataMember(Name = "sales_tax", EmitDefaultValue = false)]
        public float SalesTax { get; set; }

        /// <summary>
        /// Gets or Sets TotalPrice
        /// </summary>
        /// <example>1.38</example>
        [DataMember(Name = "total_price", EmitDefaultValue = false)]
        public float TotalPrice { get; set; }

        /// <summary>
        /// A 3 character currency code
        /// </summary>
        /// <value>A 3 character currency code</value>
        /// <example>USD</example>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Packages
        /// </summary>
        [DataMember(Name = "packages", EmitDefaultValue = false)]
        public List<BasketPackage> Packages { get; set; }

        /// <summary>
        /// Gets or Sets Custom
        /// </summary>
        /// <example>{&quot;foo&quot;:&quot;bar&quot;,&quot;ref&quot;:1234}</example>
        [DataMember(Name = "custom", EmitDefaultValue = true)]
        public Object Custom { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public BasketLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Basket {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Ident: ").Append(Ident).Append("\n");
            sb.Append("  Complete: ").Append(Complete).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Coupons: ").Append(Coupons).Append("\n");
            sb.Append("  Giftcards: ").Append(Giftcards).Append("\n");
            sb.Append("  CreatorCode: ").Append(CreatorCode).Append("\n");
            sb.Append("  CancelUrl: ").Append(CancelUrl).Append("\n");
            sb.Append("  CompleteUrl: ").Append(CompleteUrl).Append("\n");
            sb.Append("  CompleteAutoRedirect: ").Append(CompleteAutoRedirect).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  UsernameId: ").Append(UsernameId).Append("\n");
            sb.Append("  BasePrice: ").Append(BasePrice).Append("\n");
            sb.Append("  SalesTax: ").Append(SalesTax).Append("\n");
            sb.Append("  TotalPrice: ").Append(TotalPrice).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Packages: ").Append(Packages).Append("\n");
            sb.Append("  Custom: ").Append(Custom).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
