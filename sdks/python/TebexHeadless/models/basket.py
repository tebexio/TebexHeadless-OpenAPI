# coding: utf-8

"""
    Tebex Headless API

    The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.

    The version of the OpenAPI document: 1.0.0
    Contact: tebex-integrations@overwolf.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from TebexHeadless.models.basket_links import BasketLinks
from TebexHeadless.models.basket_package import BasketPackage
from TebexHeadless.models.coupon import Coupon
from TebexHeadless.models.gift_card import GiftCard
from typing import Optional, Set
from typing_extensions import Self

class Basket(BaseModel):
    """
    Basket
    """ # noqa: E501
    id: Optional[StrictStr] = None
    ident: Optional[StrictStr] = None
    complete: Optional[StrictBool] = None
    email: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    coupons: Optional[List[Coupon]] = None
    giftcards: Optional[List[GiftCard]] = None
    creator_code: Optional[StrictStr] = Field(default=None, description="The creator code is used to share a percentage of the payment with another party. See more about creator codes at https://docs.tebex.io/creators/tebex-control-panel/engagement/creator-codes")
    cancel_url: Optional[StrictStr] = None
    complete_url: Optional[StrictStr] = None
    complete_auto_redirect: Optional[StrictBool] = None
    country: Optional[StrictStr] = Field(default=None, description="A two-character country code")
    ip: Optional[StrictStr] = None
    username_id: Optional[Union[StrictFloat, StrictInt]] = None
    base_price: Optional[Union[StrictFloat, StrictInt]] = None
    sales_tax: Optional[Union[StrictFloat, StrictInt]] = None
    total_price: Optional[Union[StrictFloat, StrictInt]] = None
    currency: Optional[StrictStr] = Field(default=None, description="A 3 character currency code")
    packages: Optional[List[BasketPackage]] = None
    custom: Optional[Dict[str, Any]] = None
    links: Optional[BasketLinks] = None
    __properties: ClassVar[List[str]] = ["id", "ident", "complete", "email", "username", "coupons", "giftcards", "creator_code", "cancel_url", "complete_url", "complete_auto_redirect", "country", "ip", "username_id", "base_price", "sales_tax", "total_price", "currency", "packages", "custom", "links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Basket from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in coupons (list)
        _items = []
        if self.coupons:
            for _item in self.coupons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['coupons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in giftcards (list)
        _items = []
        if self.giftcards:
            for _item in self.giftcards:
                if _item:
                    _items.append(_item.to_dict())
            _dict['giftcards'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in packages (list)
        _items = []
        if self.packages:
            for _item in self.packages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['packages'] = _items
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if complete_url (nullable) is None
        # and model_fields_set contains the field
        if self.complete_url is None and "complete_url" in self.model_fields_set:
            _dict['complete_url'] = None

        # set to None if custom (nullable) is None
        # and model_fields_set contains the field
        if self.custom is None and "custom" in self.model_fields_set:
            _dict['custom'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Basket from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "ident": obj.get("ident"),
            "complete": obj.get("complete"),
            "email": obj.get("email"),
            "username": obj.get("username"),
            "coupons": [Coupon.from_dict(_item) for _item in obj["coupons"]] if obj.get("coupons") is not None else None,
            "giftcards": [GiftCard.from_dict(_item) for _item in obj["giftcards"]] if obj.get("giftcards") is not None else None,
            "creator_code": obj.get("creator_code"),
            "cancel_url": obj.get("cancel_url"),
            "complete_url": obj.get("complete_url"),
            "complete_auto_redirect": obj.get("complete_auto_redirect"),
            "country": obj.get("country"),
            "ip": obj.get("ip"),
            "username_id": obj.get("username_id"),
            "base_price": obj.get("base_price"),
            "sales_tax": obj.get("sales_tax"),
            "total_price": obj.get("total_price"),
            "currency": obj.get("currency"),
            "packages": [BasketPackage.from_dict(_item) for _item in obj["packages"]] if obj.get("packages") is not None else None,
            "custom": obj.get("custom"),
            "links": BasketLinks.from_dict(obj["links"]) if obj.get("links") is not None else None
        })
        return _obj


