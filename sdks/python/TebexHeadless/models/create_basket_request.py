# coding: utf-8

"""
    Tebex Headless API

    The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.

    The version of the OpenAPI document: 1.0.0
    Contact: tebex-integrations@overwolf.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateBasketRequest(BaseModel):
    """
    CreateBasketRequest
    """ # noqa: E501
    complete_url: Optional[StrictStr] = Field(default=None, description="A URL the user can return to when checkout is completed.")
    cancel_url: Optional[StrictStr] = Field(default=None, description="A URL the user can return to when cancelling checkout.")
    custom: Optional[Dict[str, Any]] = Field(default=None, description="Custom data you wish to associate with the basket. This data will be included with webhook responses and GET requests associated with the Basket.")
    complete_auto_redirect: Optional[StrictBool] = Field(default=None, description="True if the user should automatically be redirected to the relevant complete/cancel URL")
    __properties: ClassVar[List[str]] = ["complete_url", "cancel_url", "custom", "complete_auto_redirect"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateBasketRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateBasketRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "complete_url": obj.get("complete_url"),
            "cancel_url": obj.get("cancel_url"),
            "custom": obj.get("custom"),
            "complete_auto_redirect": obj.get("complete_auto_redirect")
        })
        return _obj


