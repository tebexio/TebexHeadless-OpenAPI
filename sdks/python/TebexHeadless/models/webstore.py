# coding: utf-8

"""
    Tebex Headless API

    The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.

    The version of the OpenAPI document: 1.0.0
    Contact: tebex-integrations@overwolf.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Webstore(BaseModel):
    """
    Webstore
    """ # noqa: E501
    id: Optional[StrictInt] = None
    description: Optional[StrictStr] = Field(default=None, description="Store description in HTML format")
    name: Optional[StrictStr] = Field(default=None, description="Name of the store")
    webstore_url: Optional[StrictStr] = Field(default=None, description="URL of the webstore")
    currency: Optional[StrictStr] = Field(default=None, description="Currency used in the store")
    lang: Optional[StrictStr] = Field(default=None, description="Language of the store")
    logo: Optional[StrictStr] = Field(default=None, description="URL of the store's logo")
    platform_type: Optional[StrictStr] = Field(default=None, description="Platform type for the store")
    platform_type_id: Optional[StrictStr] = None
    created_at: Optional[datetime] = Field(default=None, description="The date and time when the store was created")
    __properties: ClassVar[List[str]] = ["id", "description", "name", "webstore_url", "currency", "lang", "logo", "platform_type", "platform_type_id", "created_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Webstore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if logo (nullable) is None
        # and model_fields_set contains the field
        if self.logo is None and "logo" in self.model_fields_set:
            _dict['logo'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Webstore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "webstore_url": obj.get("webstore_url"),
            "currency": obj.get("currency"),
            "lang": obj.get("lang"),
            "logo": obj.get("logo"),
            "platform_type": obj.get("platform_type"),
            "platform_type_id": obj.get("platform_type_id"),
            "created_at": obj.get("created_at")
        })
        return _obj


