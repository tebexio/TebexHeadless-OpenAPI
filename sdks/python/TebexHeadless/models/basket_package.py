# coding: utf-8

"""
    Tebex Headless API

    The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.

    The version of the OpenAPI document: 1.0.0
    Contact: tebex-integrations@overwolf.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from TebexHeadless.models.revenue_share import RevenueShare
from typing import Optional, Set
from typing_extensions import Self

class BasketPackage(BaseModel):
    """
    A package within an existing basket.
    """ # noqa: E501
    qty: Optional[StrictInt] = Field(default=None, description="The quantity of `package` in this basket. This is not the total quantity of overall items in the basket.")
    type: Optional[StrictStr] = Field(default=None, description="The type of payment, either `single` for one-time payments or `subscription`.")
    revenue_share: Optional[List[RevenueShare]] = Field(default=None, description="An array of payment destination objects describing how the purchase should be split between multiple wallets. **Only available with pre-agreement from Tebex.**")
    __properties: ClassVar[List[str]] = ["qty", "type", "revenue_share"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['single', 'subscription']):
            raise ValueError("must be one of enum values ('single', 'subscription')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BasketPackage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in revenue_share (list)
        _items = []
        if self.revenue_share:
            for _item in self.revenue_share:
                if _item:
                    _items.append(_item.to_dict())
            _dict['revenue_share'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BasketPackage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "qty": obj.get("qty"),
            "type": obj.get("type"),
            "revenue_share": [RevenueShare.from_dict(_item) for _item in obj["revenue_share"]] if obj.get("revenue_share") is not None else None
        })
        return _obj


