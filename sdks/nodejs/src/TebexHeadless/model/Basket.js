/**
 * Tebex Headless API
 * The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasketLinks from './BasketLinks';
import BasketPackage from './BasketPackage';
import Coupon from './Coupon';
import GiftCard from './GiftCard';

/**
 * The Basket model module.
 * @module TebexHeadless/model/Basket
 * @version 1.0.0
 */
class Basket {
    /**
     * Constructs a new <code>Basket</code>.
     * @alias module:TebexHeadless/model/Basket
     */
    constructor() { 
        
        Basket.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Basket</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:TebexHeadless/model/Basket} obj Optional instance to populate.
     * @return {module:TebexHeadless/model/Basket} The populated <code>Basket</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Basket();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ident')) {
                obj['ident'] = ApiClient.convertToType(data['ident'], 'String');
            }
            if (data.hasOwnProperty('complete')) {
                obj['complete'] = ApiClient.convertToType(data['complete'], 'Boolean');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('coupons')) {
                obj['coupons'] = ApiClient.convertToType(data['coupons'], [Coupon]);
            }
            if (data.hasOwnProperty('giftcards')) {
                obj['giftcards'] = ApiClient.convertToType(data['giftcards'], [GiftCard]);
            }
            if (data.hasOwnProperty('creator_code')) {
                obj['creator_code'] = ApiClient.convertToType(data['creator_code'], 'String');
            }
            if (data.hasOwnProperty('cancel_url')) {
                obj['cancel_url'] = ApiClient.convertToType(data['cancel_url'], 'String');
            }
            if (data.hasOwnProperty('complete_url')) {
                obj['complete_url'] = ApiClient.convertToType(data['complete_url'], 'String');
            }
            if (data.hasOwnProperty('complete_auto_redirect')) {
                obj['complete_auto_redirect'] = ApiClient.convertToType(data['complete_auto_redirect'], 'Boolean');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('username_id')) {
                obj['username_id'] = ApiClient.convertToType(data['username_id'], 'Number');
            }
            if (data.hasOwnProperty('base_price')) {
                obj['base_price'] = ApiClient.convertToType(data['base_price'], 'Number');
            }
            if (data.hasOwnProperty('sales_tax')) {
                obj['sales_tax'] = ApiClient.convertToType(data['sales_tax'], 'Number');
            }
            if (data.hasOwnProperty('total_price')) {
                obj['total_price'] = ApiClient.convertToType(data['total_price'], 'Number');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('packages')) {
                obj['packages'] = ApiClient.convertToType(data['packages'], [BasketPackage]);
            }
            if (data.hasOwnProperty('custom')) {
                obj['custom'] = ApiClient.convertToType(data['custom'], Object);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = BasketLinks.constructFromObject(data['links']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Basket</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Basket</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ident'] && !(typeof data['ident'] === 'string' || data['ident'] instanceof String)) {
            throw new Error("Expected the field `ident` to be a primitive type in the JSON string but got " + data['ident']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        if (data['coupons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['coupons'])) {
                throw new Error("Expected the field `coupons` to be an array in the JSON data but got " + data['coupons']);
            }
            // validate the optional field `coupons` (array)
            for (const item of data['coupons']) {
                Coupon.validateJSON(item);
            };
        }
        if (data['giftcards']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['giftcards'])) {
                throw new Error("Expected the field `giftcards` to be an array in the JSON data but got " + data['giftcards']);
            }
            // validate the optional field `giftcards` (array)
            for (const item of data['giftcards']) {
                GiftCard.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['creator_code'] && !(typeof data['creator_code'] === 'string' || data['creator_code'] instanceof String)) {
            throw new Error("Expected the field `creator_code` to be a primitive type in the JSON string but got " + data['creator_code']);
        }
        // ensure the json data is a string
        if (data['cancel_url'] && !(typeof data['cancel_url'] === 'string' || data['cancel_url'] instanceof String)) {
            throw new Error("Expected the field `cancel_url` to be a primitive type in the JSON string but got " + data['cancel_url']);
        }
        // ensure the json data is a string
        if (data['complete_url'] && !(typeof data['complete_url'] === 'string' || data['complete_url'] instanceof String)) {
            throw new Error("Expected the field `complete_url` to be a primitive type in the JSON string but got " + data['complete_url']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        if (data['packages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['packages'])) {
                throw new Error("Expected the field `packages` to be an array in the JSON data but got " + data['packages']);
            }
            // validate the optional field `packages` (array)
            for (const item of data['packages']) {
                BasketPackage.validateJSON(item);
            };
        }
        // validate the optional field `links`
        if (data['links']) { // data not null
          BasketLinks.validateJSON(data['links']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
Basket.prototype['id'] = undefined;

/**
 * @member {String} ident
 */
Basket.prototype['ident'] = undefined;

/**
 * @member {Boolean} complete
 */
Basket.prototype['complete'] = undefined;

/**
 * @member {String} email
 */
Basket.prototype['email'] = undefined;

/**
 * @member {String} username
 */
Basket.prototype['username'] = undefined;

/**
 * @member {Array.<module:TebexHeadless/model/Coupon>} coupons
 */
Basket.prototype['coupons'] = undefined;

/**
 * @member {Array.<module:TebexHeadless/model/GiftCard>} giftcards
 */
Basket.prototype['giftcards'] = undefined;

/**
 * The creator code is used to share a percentage of the payment with another party. See more about creator codes at https://docs.tebex.io/creators/tebex-control-panel/engagement/creator-codes
 * @member {String} creator_code
 */
Basket.prototype['creator_code'] = undefined;

/**
 * @member {String} cancel_url
 */
Basket.prototype['cancel_url'] = undefined;

/**
 * @member {String} complete_url
 */
Basket.prototype['complete_url'] = undefined;

/**
 * @member {Boolean} complete_auto_redirect
 */
Basket.prototype['complete_auto_redirect'] = undefined;

/**
 * A two-character country code
 * @member {String} country
 */
Basket.prototype['country'] = undefined;

/**
 * @member {String} ip
 */
Basket.prototype['ip'] = undefined;

/**
 * @member {Number} username_id
 */
Basket.prototype['username_id'] = undefined;

/**
 * @member {Number} base_price
 */
Basket.prototype['base_price'] = undefined;

/**
 * @member {Number} sales_tax
 */
Basket.prototype['sales_tax'] = undefined;

/**
 * @member {Number} total_price
 */
Basket.prototype['total_price'] = undefined;

/**
 * A 3 character currency code
 * @member {String} currency
 */
Basket.prototype['currency'] = undefined;

/**
 * @member {Array.<module:TebexHeadless/model/BasketPackage>} packages
 */
Basket.prototype['packages'] = undefined;

/**
 * @member {Object} custom
 */
Basket.prototype['custom'] = undefined;

/**
 * @member {module:TebexHeadless/model/BasketLinks} links
 */
Basket.prototype['links'] = undefined;






export default Basket;

