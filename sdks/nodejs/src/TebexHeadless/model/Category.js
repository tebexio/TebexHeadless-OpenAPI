/**
 * Tebex Headless API
 * The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Package from './Package';

/**
 * The Category model module.
 * @module TebexHeadless/model/Category
 * @version 1.0.0
 */
class Category {
    /**
     * Constructs a new <code>Category</code>.
     * @alias module:TebexHeadless/model/Category
     */
    constructor() { 
        
        Category.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Category</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:TebexHeadless/model/Category} obj Optional instance to populate.
     * @return {module:TebexHeadless/model/Category} The populated <code>Category</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Category();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], Object);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('packages')) {
                obj['packages'] = ApiClient.convertToType(data['packages'], [Package]);
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'Number');
            }
            if (data.hasOwnProperty('display_type')) {
                obj['display_type'] = ApiClient.convertToType(data['display_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Category</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Category</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['packages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['packages'])) {
                throw new Error("Expected the field `packages` to be an array in the JSON data but got " + data['packages']);
            }
            // validate the optional field `packages` (array)
            for (const item of data['packages']) {
                Package.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['display_type'] && !(typeof data['display_type'] === 'string' || data['display_type'] instanceof String)) {
            throw new Error("Expected the field `display_type` to be a primitive type in the JSON string but got " + data['display_type']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
Category.prototype['id'] = undefined;

/**
 * User-friendly name of the category
 * @member {String} name
 */
Category.prototype['name'] = undefined;

/**
 * Short identifier slug for the category
 * @member {String} slug
 */
Category.prototype['slug'] = undefined;

/**
 * Parent category, if applicable
 * @member {Object} parent
 */
Category.prototype['parent'] = undefined;

/**
 * HTML description of the category
 * @member {String} description
 */
Category.prototype['description'] = undefined;

/**
 * @member {Array.<module:TebexHeadless/model/Package>} packages
 */
Category.prototype['packages'] = undefined;

/**
 * The numeric order in which to display the category.
 * @member {Number} order
 */
Category.prototype['order'] = undefined;

/**
 * How the category should be displayed
 * @member {module:TebexHeadless/model/Category.DisplayTypeEnum} display_type
 */
Category.prototype['display_type'] = undefined;





/**
 * Allowed values for the <code>display_type</code> property.
 * @enum {String}
 * @readonly
 */
Category['DisplayTypeEnum'] = {

    /**
     * value: "list"
     * @const
     */
    "list": "list",

    /**
     * value: "grid"
     * @const
     */
    "grid": "grid"
};



export default Category;

