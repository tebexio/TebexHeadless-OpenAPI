/**
 * Tebex Headless API
 * The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CMSPage model module.
 * @module TebexHeadless/model/CMSPage
 * @version 1.0.0
 */
class CMSPage {
    /**
     * Constructs a new <code>CMSPage</code>.
     * @alias module:TebexHeadless/model/CMSPage
     */
    constructor() { 
        
        CMSPage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CMSPage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:TebexHeadless/model/CMSPage} obj Optional instance to populate.
     * @return {module:TebexHeadless/model/CMSPage} The populated <code>CMSPage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CMSPage();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('private')) {
                obj['private'] = ApiClient.convertToType(data['private'], 'Boolean');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'Boolean');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CMSPage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CMSPage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
CMSPage.prototype['id'] = undefined;

/**
 * @member {Date} created_at
 */
CMSPage.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
CMSPage.prototype['updated_at'] = undefined;

/**
 * @member {Number} account_id
 */
CMSPage.prototype['account_id'] = undefined;

/**
 * @member {String} title
 */
CMSPage.prototype['title'] = undefined;

/**
 * @member {String} slug
 */
CMSPage.prototype['slug'] = undefined;

/**
 * @member {Boolean} private
 */
CMSPage.prototype['private'] = undefined;

/**
 * @member {Boolean} hidden
 */
CMSPage.prototype['hidden'] = undefined;

/**
 * @member {Boolean} disabled
 */
CMSPage.prototype['disabled'] = undefined;

/**
 * @member {Boolean} sequence
 */
CMSPage.prototype['sequence'] = undefined;

/**
 * @member {String} content
 */
CMSPage.prototype['content'] = undefined;






export default CMSPage;

