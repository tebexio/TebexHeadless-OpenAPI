/**
 * Tebex Headless API
 * The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RevenueShare from './RevenueShare';

/**
 * The BasketPackage model module.
 * @module TebexHeadless/model/BasketPackage
 * @version 1.0.0
 */
class BasketPackage {
    /**
     * Constructs a new <code>BasketPackage</code>.
     * A package within an existing basket.
     * @alias module:TebexHeadless/model/BasketPackage
     */
    constructor() { 
        
        BasketPackage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BasketPackage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:TebexHeadless/model/BasketPackage} obj Optional instance to populate.
     * @return {module:TebexHeadless/model/BasketPackage} The populated <code>BasketPackage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BasketPackage();

            if (data.hasOwnProperty('qty')) {
                obj['qty'] = ApiClient.convertToType(data['qty'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('revenue_share')) {
                obj['revenue_share'] = ApiClient.convertToType(data['revenue_share'], [RevenueShare]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BasketPackage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BasketPackage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        if (data['revenue_share']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['revenue_share'])) {
                throw new Error("Expected the field `revenue_share` to be an array in the JSON data but got " + data['revenue_share']);
            }
            // validate the optional field `revenue_share` (array)
            for (const item of data['revenue_share']) {
                RevenueShare.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The quantity of `package` in this basket. This is not the total quantity of overall items in the basket.
 * @member {Number} qty
 */
BasketPackage.prototype['qty'] = undefined;

/**
 * The type of payment, either `single` for one-time payments or `subscription`.
 * @member {module:TebexHeadless/model/BasketPackage.TypeEnum} type
 */
BasketPackage.prototype['type'] = undefined;

/**
 * An array of payment destination objects describing how the purchase should be split between multiple wallets. **Only available with pre-agreement from Tebex.**
 * @member {Array.<module:TebexHeadless/model/RevenueShare>} revenue_share
 */
BasketPackage.prototype['revenue_share'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
BasketPackage['TypeEnum'] = {

    /**
     * value: "single"
     * @const
     */
    "single": "single",

    /**
     * value: "subscription"
     * @const
     */
    "subscription": "subscription"
};



export default BasketPackage;

