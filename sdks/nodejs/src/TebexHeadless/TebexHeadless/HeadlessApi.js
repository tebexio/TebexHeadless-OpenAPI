/**
 * Tebex Headless API
 * The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddBasketPackageRequest from '../model/AddBasketPackageRequest';
import ApplyCreatorCodeRequest from '../model/ApplyCreatorCodeRequest';
import Basket from '../model/Basket';
import BasketResponse from '../model/BasketResponse';
import CategoryResponse from '../model/CategoryResponse';
import Coupon from '../model/Coupon';
import CreateBasketRequest from '../model/CreateBasketRequest';
import GiftCard from '../model/GiftCard';
import PackageResponse from '../model/PackageResponse';
import RemoveBasketPackageRequest from '../model/RemoveBasketPackageRequest';
import RemoveGiftCardRequest from '../model/RemoveGiftCardRequest';
import UpdatePackageQuantityRequest from '../model/UpdatePackageQuantityRequest';
import WebstoreResponse from '../model/WebstoreResponse';

/**
* Headless service.
* @module TebexHeadless/TebexHeadless/HeadlessApi
* @version 1.0.0
*/
export default class HeadlessApi {

    /**
    * Constructs a new HeadlessApi. 
    * @alias module:TebexHeadless/TebexHeadless/HeadlessApi
    * @class
    * @param {module:TebexHeadless/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:TebexHeadless/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addBasketPackage operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~addBasketPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexHeadless/model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a package to a basket
     * Add a package with the given ID to the basket.
     * @param {String} basketIdent The basket identifier.
     * @param {Object} opts Optional parameters
     * @param {module:TebexHeadless/model/AddBasketPackageRequest} [addBasketPackageRequest] 
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~addBasketPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexHeadless/model/Basket}
     */
    addBasketPackage(basketIdent, opts, callback) {
      opts = opts || {};
      let postBody = opts['addBasketPackageRequest'];
      // verify the required parameter 'basketIdent' is set
      if (basketIdent === undefined || basketIdent === null) {
        throw new Error("Missing the required parameter 'basketIdent' when calling addBasketPackage");
      }

      let pathParams = {
        'basketIdent': basketIdent
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Basket;
      return this.apiClient.callApi(
        '/baskets/{basketIdent}/packages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applyCoupon operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~applyCouponCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexHeadless/model/BasketResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply a coupon to a basket.
     * Applies a creator code to a basket.
     * @param {String} token The webstore identifier.
     * @param {String} basketIdent The basket identifier.
     * @param {Object} opts Optional parameters
     * @param {module:TebexHeadless/model/Coupon} [coupon] Provide a `coupon_code` to apply to the basket.
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~applyCouponCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexHeadless/model/BasketResponse}
     */
    applyCoupon(token, basketIdent, opts, callback) {
      opts = opts || {};
      let postBody = opts['coupon'];
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling applyCoupon");
      }
      // verify the required parameter 'basketIdent' is set
      if (basketIdent === undefined || basketIdent === null) {
        throw new Error("Missing the required parameter 'basketIdent' when calling applyCoupon");
      }

      let pathParams = {
        'token': token,
        'basketIdent': basketIdent
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BasketResponse;
      return this.apiClient.callApi(
        '/accounts/{token}/baskets/{basketIdent}/coupons', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applyCreatorCode operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~applyCreatorCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexHeadless/model/BasketResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply a creator code to a basket.
     * Applies a creator code to a basket.
     * @param {String} token The webstore identifier.
     * @param {String} basketIdent The basket identifier.
     * @param {Object} opts Optional parameters
     * @param {module:TebexHeadless/model/ApplyCreatorCodeRequest} [applyCreatorCodeRequest] Provide a `creator_code` to apply to the basket.
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~applyCreatorCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexHeadless/model/BasketResponse}
     */
    applyCreatorCode(token, basketIdent, opts, callback) {
      opts = opts || {};
      let postBody = opts['applyCreatorCodeRequest'];
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling applyCreatorCode");
      }
      // verify the required parameter 'basketIdent' is set
      if (basketIdent === undefined || basketIdent === null) {
        throw new Error("Missing the required parameter 'basketIdent' when calling applyCreatorCode");
      }

      let pathParams = {
        'token': token,
        'basketIdent': basketIdent
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BasketResponse;
      return this.apiClient.callApi(
        '/accounts/{token}/baskets/{basketIdent}/creator-codes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applyGiftCard operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~applyGiftCardCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexHeadless/model/BasketResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply a gift card to a basket.
     * Applies a creator code to a basket.
     * @param {String} token The webstore identifier.
     * @param {String} basketIdent The basket identifier.
     * @param {Object} opts Optional parameters
     * @param {module:TebexHeadless/model/GiftCard} [giftCard] Provide a `card_number` to apply to the basket.
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~applyGiftCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexHeadless/model/BasketResponse}
     */
    applyGiftCard(token, basketIdent, opts, callback) {
      opts = opts || {};
      let postBody = opts['giftCard'];
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling applyGiftCard");
      }
      // verify the required parameter 'basketIdent' is set
      if (basketIdent === undefined || basketIdent === null) {
        throw new Error("Missing the required parameter 'basketIdent' when calling applyGiftCard");
      }

      let pathParams = {
        'token': token,
        'basketIdent': basketIdent
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BasketResponse;
      return this.apiClient.callApi(
        '/accounts/{token}/baskets/{basketIdent}/giftcards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBasket operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~createBasketCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexHeadless/model/BasketResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new basket
     * Creates a new basket for use during checkout.
     * @param {String} token The webstore identifier.
     * @param {Object} opts Optional parameters
     * @param {module:TebexHeadless/model/CreateBasketRequest} [createBasketRequest] 
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~createBasketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexHeadless/model/BasketResponse}
     */
    createBasket(token, opts, callback) {
      opts = opts || {};
      let postBody = opts['createBasketRequest'];
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling createBasket");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BasketResponse;
      return this.apiClient.callApi(
        '/accounts/{token}/baskets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCategories operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~getAllCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexHeadless/model/CategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all categories available in the webstore.
     * Gets all categories from a webstore. This does not include package information. To include package information, add `?includePackages=1` to the URL.
     * @param {String} token The webstore identifier.
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~getAllCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexHeadless/model/CategoryResponse}
     */
    getAllCategories(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getAllCategories");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CategoryResponse;
      return this.apiClient.callApi(
        '/accounts/{token}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCategoriesIncludingPackages operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~getAllCategoriesIncludingPackagesCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexHeadless/model/CategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a store's categories including all package information with them.
     * Gets all categories from a webstore including packages.
     * @param {String} token The webstore identifier.
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~getAllCategoriesIncludingPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexHeadless/model/CategoryResponse}
     */
    getAllCategoriesIncludingPackages(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getAllCategoriesIncludingPackages");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CategoryResponse;
      return this.apiClient.callApi(
        '/accounts/{token}/categories?includePackages=1', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPackages operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~getAllPackagesCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexHeadless/model/PackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch all packages from a webstore
     * Gets all packages from a webstore.
     * @param {String} token The webstore identifier.
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~getAllPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexHeadless/model/PackageResponse}
     */
    getAllPackages(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getAllPackages");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PackageResponse;
      return this.apiClient.callApi(
        '/accounts/{token}/packages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPackagesWithAuthedIP operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~getAllPackagesWithAuthedIPCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexHeadless/model/PackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a package from a webstore by its identifier
     * Gets all packages from a webstore.
     * @param {String} token The webstore identifier.
     * @param {String} ipAddress An IP address can be provided with authenticated requests.
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~getAllPackagesWithAuthedIPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexHeadless/model/PackageResponse}
     */
    getAllPackagesWithAuthedIP(token, ipAddress, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getAllPackagesWithAuthedIP");
      }
      // verify the required parameter 'ipAddress' is set
      if (ipAddress === undefined || ipAddress === null) {
        throw new Error("Missing the required parameter 'ipAddress' when calling getAllPackagesWithAuthedIP");
      }

      let pathParams = {
        'token': token,
        'ipAddress': ipAddress
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PackageResponse;
      return this.apiClient.callApi(
        '/accounts/{token}/packages?ipAddress={ipAddress}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPackagesWithAuthedIPAndBasket operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~getAllPackagesWithAuthedIPAndBasketCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:TebexHeadless/model/PackageResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a package from a webstore by its identifier
     * Gets all packages from a webstore.
     * @param {String} token The webstore identifier.
     * @param {String} basketIdent The basket identifier.
     * @param {String} ipAddress An IP address can be provided with authenticated requests.
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~getAllPackagesWithAuthedIPAndBasketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:TebexHeadless/model/PackageResponse>}
     */
    getAllPackagesWithAuthedIPAndBasket(token, basketIdent, ipAddress, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getAllPackagesWithAuthedIPAndBasket");
      }
      // verify the required parameter 'basketIdent' is set
      if (basketIdent === undefined || basketIdent === null) {
        throw new Error("Missing the required parameter 'basketIdent' when calling getAllPackagesWithAuthedIPAndBasket");
      }
      // verify the required parameter 'ipAddress' is set
      if (ipAddress === undefined || ipAddress === null) {
        throw new Error("Missing the required parameter 'ipAddress' when calling getAllPackagesWithAuthedIPAndBasket");
      }

      let pathParams = {
        'token': token,
        'basketIdent': basketIdent,
        'ipAddress': ipAddress
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PackageResponse];
      return this.apiClient.callApi(
        '/accounts/{token}/packages?ipAddress={ipAddress}&basketIdent={basketIdent}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPackagesWithBasket operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~getAllPackagesWithBasketCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexHeadless/model/PackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a package from a webstore by its identifier
     * Gets all packages from a webstore.
     * @param {String} token The webstore identifier.
     * @param {String} basketIdent The basket identifier.
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~getAllPackagesWithBasketCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexHeadless/model/PackageResponse}
     */
    getAllPackagesWithBasket(token, basketIdent, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getAllPackagesWithBasket");
      }
      // verify the required parameter 'basketIdent' is set
      if (basketIdent === undefined || basketIdent === null) {
        throw new Error("Missing the required parameter 'basketIdent' when calling getAllPackagesWithBasket");
      }

      let pathParams = {
        'token': token,
        'basketIdent': basketIdent
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PackageResponse;
      return this.apiClient.callApi(
        '/accounts/{token}/packages?basketIdent={basketIdent}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBasketAuthUrl operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~getBasketAuthUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexHeadless/model/BasketResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a basket from a webstore by its identifier
     * Fetches a basket's auth URL.
     * @param {String} token The webstore identifier.
     * @param {String} basketIdent The basket identifier.
     * @param {String} returnUrl The URL you would like to redirect the user to after successful basket authentication.
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~getBasketAuthUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexHeadless/model/BasketResponse}
     */
    getBasketAuthUrl(token, basketIdent, returnUrl, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBasketAuthUrl");
      }
      // verify the required parameter 'basketIdent' is set
      if (basketIdent === undefined || basketIdent === null) {
        throw new Error("Missing the required parameter 'basketIdent' when calling getBasketAuthUrl");
      }
      // verify the required parameter 'returnUrl' is set
      if (returnUrl === undefined || returnUrl === null) {
        throw new Error("Missing the required parameter 'returnUrl' when calling getBasketAuthUrl");
      }

      let pathParams = {
        'token': token,
        'basketIdent': basketIdent,
        'returnUrl': returnUrl
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasketResponse;
      return this.apiClient.callApi(
        '/accounts/{token}/baskets/{basketIdent}/auth?returnUrl={returnUrl}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBasketById operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~getBasketByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexHeadless/model/BasketResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a basket from a webstore by its identifier
     * Gets a basket associated with the provided identifier.
     * @param {String} token The webstore identifier.
     * @param {String} basketIdent The basket identifier.
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~getBasketByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexHeadless/model/BasketResponse}
     */
    getBasketById(token, basketIdent, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getBasketById");
      }
      // verify the required parameter 'basketIdent' is set
      if (basketIdent === undefined || basketIdent === null) {
        throw new Error("Missing the required parameter 'basketIdent' when calling getBasketById");
      }

      let pathParams = {
        'token': token,
        'basketIdent': basketIdent
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasketResponse;
      return this.apiClient.callApi(
        '/accounts/{token}/baskets/{basketIdent}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategoryById operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~getCategoryByIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:TebexHeadless/model/CategoryResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specific category
     * Gets information about a category and returns the packages in that category.
     * @param {String} token The webstore identifier.
     * @param {String} categoryId The ID of the category to fetch.
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~getCategoryByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:TebexHeadless/model/CategoryResponse>}
     */
    getCategoryById(token, categoryId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCategoryById");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getCategoryById");
      }

      let pathParams = {
        'token': token,
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CategoryResponse];
      return this.apiClient.callApi(
        '/accounts/{token}/categories/{categoryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategoryIncludingPackages operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~getCategoryIncludingPackagesCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexHeadless/model/CategoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a specific category, including all the packages in the category
     * Gets information about a category and returns the packages in that category.
     * @param {String} token The webstore identifier.
     * @param {String} categoryId The ID of the category to fetch.
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~getCategoryIncludingPackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexHeadless/model/CategoryResponse}
     */
    getCategoryIncludingPackages(token, categoryId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getCategoryIncludingPackages");
      }
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getCategoryIncludingPackages");
      }

      let pathParams = {
        'token': token,
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CategoryResponse;
      return this.apiClient.callApi(
        '/accounts/{token}/categories/{categoryId}?includePackages=1', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackageById operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~getPackageByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexHeadless/model/PackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a package from a webstore by its identifier
     * Gets a package from a webstore by ID.
     * @param {String} token The webstore identifier.
     * @param {Number} packageId The package's ID.
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~getPackageByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexHeadless/model/PackageResponse}
     */
    getPackageById(token, packageId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getPackageById");
      }
      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling getPackageById");
      }

      let pathParams = {
        'token': token,
        'packageId': packageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PackageResponse;
      return this.apiClient.callApi(
        '/accounts/{token}/packages/{packageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebstoreById operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~getWebstoreByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexHeadless/model/WebstoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch a webstore by its identifier
     * Gets the webstore associated with the provided identifier.
     * @param {String} token The webstore identifier.
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~getWebstoreByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexHeadless/model/WebstoreResponse}
     */
    getWebstoreById(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getWebstoreById");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebstoreResponse;
      return this.apiClient.callApi(
        '/accounts/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeBasketPackage operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~removeBasketPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:TebexHeadless/model/Basket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a package from a basket
     * Remove the given package ID from the basket.
     * @param {String} basketIdent The basket identifier.
     * @param {Object} opts Optional parameters
     * @param {module:TebexHeadless/model/RemoveBasketPackageRequest} [removeBasketPackageRequest] 
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~removeBasketPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:TebexHeadless/model/Basket}
     */
    removeBasketPackage(basketIdent, opts, callback) {
      opts = opts || {};
      let postBody = opts['removeBasketPackageRequest'];
      // verify the required parameter 'basketIdent' is set
      if (basketIdent === undefined || basketIdent === null) {
        throw new Error("Missing the required parameter 'basketIdent' when calling removeBasketPackage");
      }

      let pathParams = {
        'basketIdent': basketIdent
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Basket;
      return this.apiClient.callApi(
        '/baskets/{basketIdent}/packages/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeCoupon operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~removeCouponCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a coupon from the basket.
     * Removes a coupon code from a basket
     * @param {String} token The webstore identifier.
     * @param {String} basketIdent The basket identifier.
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~removeCouponCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeCoupon(token, basketIdent, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling removeCoupon");
      }
      // verify the required parameter 'basketIdent' is set
      if (basketIdent === undefined || basketIdent === null) {
        throw new Error("Missing the required parameter 'basketIdent' when calling removeCoupon");
      }

      let pathParams = {
        'token': token,
        'basketIdent': basketIdent
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounts/{token}/baskets/{basketIdent}/coupons/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeCreatorCode operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~removeCreatorCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a creator code from the basket.
     * Applies a creator code to a basket.
     * @param {String} token The webstore identifier.
     * @param {String} basketIdent The basket identifier.
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~removeCreatorCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeCreatorCode(token, basketIdent, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling removeCreatorCode");
      }
      // verify the required parameter 'basketIdent' is set
      if (basketIdent === undefined || basketIdent === null) {
        throw new Error("Missing the required parameter 'basketIdent' when calling removeCreatorCode");
      }

      let pathParams = {
        'token': token,
        'basketIdent': basketIdent
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounts/{token}/baskets/{basketIdent}/creator-codes/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeGiftCard operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~removeGiftCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a gift card from the basket.
     * Removes a gift card from the basket.
     * @param {String} token The webstore identifier.
     * @param {String} basketIdent The basket identifier.
     * @param {Object} opts Optional parameters
     * @param {module:TebexHeadless/model/RemoveGiftCardRequest} [removeGiftCardRequest] Provide the `card_number` to remove from the basket.
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~removeGiftCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeGiftCard(token, basketIdent, opts, callback) {
      opts = opts || {};
      let postBody = opts['removeGiftCardRequest'];
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling removeGiftCard");
      }
      // verify the required parameter 'basketIdent' is set
      if (basketIdent === undefined || basketIdent === null) {
        throw new Error("Missing the required parameter 'basketIdent' when calling removeGiftCard");
      }

      let pathParams = {
        'token': token,
        'basketIdent': basketIdent
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/accounts/{token}/baskets/{basketIdent}/giftcards/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePackageQuantity operation.
     * @callback module:TebexHeadless/TebexHeadless/HeadlessApi~updatePackageQuantityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed.
     * Sets the quantity of the given item in the basket.
     * @param {String} basketIdent The basket identifier.
     * @param {Number} packageId The package identifier.
     * @param {Object} opts Optional parameters
     * @param {module:TebexHeadless/model/UpdatePackageQuantityRequest} [updatePackageQuantityRequest] 
     * @param {module:TebexHeadless/TebexHeadless/HeadlessApi~updatePackageQuantityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatePackageQuantity(basketIdent, packageId, opts, callback) {
      opts = opts || {};
      let postBody = opts['updatePackageQuantityRequest'];
      // verify the required parameter 'basketIdent' is set
      if (basketIdent === undefined || basketIdent === null) {
        throw new Error("Missing the required parameter 'basketIdent' when calling updatePackageQuantity");
      }
      // verify the required parameter 'packageId' is set
      if (packageId === undefined || packageId === null) {
        throw new Error("Missing the required parameter 'packageId' when calling updatePackageQuantity");
      }

      let pathParams = {
        'basketIdent': basketIdent,
        'packageId': packageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/baskets/{basketIdent}/packages/{packageId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
