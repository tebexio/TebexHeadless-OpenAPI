<?php
/**
 * HeadlessApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  TebexHeadless
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Tebex Headless API
 *
 * The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: tebex-integrations@overwolf.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace TebexHeadless\Test\Api;

use \TebexHeadless\Configuration;
use \TebexHeadless\ApiException;
use \TebexHeadless\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * HeadlessApiTest Class Doc Comment
 *
 * @category Class
 * @package  TebexHeadless
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HeadlessApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for addBasketPackage
     *
     * Add a package to a basket.
     *
     */
    public function testAddBasketPackage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for applyCoupon
     *
     * Apply a coupon to a basket..
     *
     */
    public function testApplyCoupon()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for applyCreatorCode
     *
     * Apply a creator code to a basket..
     *
     */
    public function testApplyCreatorCode()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for applyGiftCard
     *
     * Apply a gift card to a basket..
     *
     */
    public function testApplyGiftCard()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createBasket
     *
     * Create a new basket.
     *
     */
    public function testCreateBasket()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllCategories
     *
     * Gets all categories available in the webstore..
     *
     */
    public function testGetAllCategories()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllCategoriesIncludingPackages
     *
     * Gets a store's categories including all package information with them..
     *
     */
    public function testGetAllCategoriesIncludingPackages()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllPackages
     *
     * Fetch all packages from a webstore.
     *
     */
    public function testGetAllPackages()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllPackagesWithAuthedIP
     *
     * Fetch a package from a webstore by its identifier.
     *
     */
    public function testGetAllPackagesWithAuthedIP()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllPackagesWithAuthedIPAndBasket
     *
     * Fetch a package from a webstore by its identifier.
     *
     */
    public function testGetAllPackagesWithAuthedIPAndBasket()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getAllPackagesWithBasket
     *
     * Fetch a package from a webstore by its identifier.
     *
     */
    public function testGetAllPackagesWithBasket()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getBasketAuthUrl
     *
     * Fetch a basket from a webstore by its identifier.
     *
     */
    public function testGetBasketAuthUrl()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getBasketById
     *
     * Fetch a basket from a webstore by its identifier.
     *
     */
    public function testGetBasketById()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCategoryById
     *
     * Gets information about a specific category.
     *
     */
    public function testGetCategoryById()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getCategoryIncludingPackages
     *
     * Gets information about a specific category, including all the packages in the category.
     *
     */
    public function testGetCategoryIncludingPackages()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPackageById
     *
     * Fetch a package from a webstore by its identifier.
     *
     */
    public function testGetPackageById()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWebstoreById
     *
     * Fetch a webstore by its identifier.
     *
     */
    public function testGetWebstoreById()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for removeBasketPackage
     *
     * Remove a package from a basket.
     *
     */
    public function testRemoveBasketPackage()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for removeCoupon
     *
     * Remove a coupon from the basket..
     *
     */
    public function testRemoveCoupon()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for removeCreatorCode
     *
     * Remove a creator code from the basket..
     *
     */
    public function testRemoveCreatorCode()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for removeGiftCard
     *
     * Remove a gift card from the basket..
     *
     */
    public function testRemoveGiftCard()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updatePackageQuantity
     *
     * Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed..
     *
     */
    public function testUpdatePackageQuantity()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
