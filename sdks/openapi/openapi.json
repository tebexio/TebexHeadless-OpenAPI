{
  "openapi" : "3.0.3",
  "info" : {
    "contact" : {
      "email" : "tebex-integrations@overwolf.com"
    },
    "description" : "The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.",
    "license" : {
      "name" : "MIT",
      "url" : "https://opensource.org/license/mit"
    },
    "termsOfService" : "https://tebex.io/terms-creator-agreement",
    "title" : "Tebex Headless API",
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "https://headless.tebex.io/api"
  } ],
  "tags" : [ {
    "description" : "A basket package is a Package within a basket",
    "name" : "Basket Packages"
  }, {
    "description" : "Webstore is the term for a Tebex store.",
    "name" : "Webstores"
  }, {
    "description" : "Endpoints which interact with a basket requiring the basket ID",
    "name" : "Headless"
  } ],
  "paths" : {
    "/accounts/{token}" : {
      "get" : {
        "description" : "Gets the webstore associated with the provided identifier.",
        "operationId" : "getWebstoreById",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "some-uuid",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebstoreResponse"
                }
              }
            },
            "description" : "Successful response returns the webstore's information."
          }
        },
        "summary" : "Fetch a webstore by its identifier",
        "tags" : [ "Headless" ]
      }
    },
    "/accounts/{token}/baskets/{basketIdent}" : {
      "get" : {
        "description" : "Gets a basket associated with the provided identifier.",
        "operationId" : "getBasketById",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "The basket identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "basketIdent",
          "required" : true,
          "schema" : {
            "example" : "c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BasketResponse"
                }
              }
            },
            "description" : "Successful response returns the basket information."
          }
        },
        "summary" : "Fetch a basket from a webstore by its identifier",
        "tags" : [ "Headless" ]
      }
    },
    "/accounts/{token}/baskets" : {
      "post" : {
        "description" : "Creates a new basket for use during checkout.",
        "operationId" : "createBasket",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/createBasket_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BasketResponse"
                }
              }
            },
            "description" : "Successful response returns the basket information."
          },
          "422" : {
            "description" : "The provided webstore ID is invalid."
          }
        },
        "summary" : "Create a new basket",
        "tags" : [ "Headless" ]
      }
    },
    "/accounts/{token}/baskets/{basketIdent}/auth?returnUrl={returnUrl}" : {
      "get" : {
        "description" : "Fetches a basket's auth URL.",
        "operationId" : "getBasketAuthUrl",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "The basket identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "basketIdent",
          "required" : true,
          "schema" : {
            "example" : "c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "The URL you would like to redirect the user to after successful basket authentication.",
          "explode" : false,
          "in" : "path",
          "name" : "returnUrl",
          "required" : true,
          "schema" : {
            "example" : "https://example.tebex.io/",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BasketResponse"
                }
              }
            },
            "description" : "Successful response returns the basket auth information."
          },
          "422" : {
            "description" : "The provided webstore ID or basket ID is invalid."
          }
        },
        "summary" : "Fetch a basket from a webstore by its identifier",
        "tags" : [ "Headless" ]
      }
    },
    "/accounts/{token}/categories" : {
      "get" : {
        "description" : "Gets all categories from a webstore. This does not include package information. To include package information, add `?includePackages=1` to the URL.",
        "operationId" : "getAllCategories",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CategoryResponse"
                }
              }
            },
            "description" : "Successful response returns a list of category information."
          }
        },
        "summary" : "Gets all categories available in the webstore.",
        "tags" : [ "Headless" ]
      }
    },
    "/accounts/{token}/categories?includePackages=1" : {
      "get" : {
        "description" : "Gets all categories from a webstore including packages.",
        "operationId" : "getAllCategoriesIncludingPackages",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CategoryResponse"
                }
              }
            },
            "description" : "Successful response returns a list of category information."
          }
        },
        "summary" : "Gets a store's categories including all package information with them.",
        "tags" : [ "Headless" ]
      }
    },
    "/accounts/{token}/categories/{categoryId}" : {
      "get" : {
        "description" : "Gets information about a category and returns the packages in that category.",
        "operationId" : "getCategoryById",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "The ID of the category to fetch.",
          "explode" : false,
          "in" : "path",
          "name" : "categoryId",
          "required" : true,
          "schema" : {
            "example" : "127244343",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/CategoryResponse"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Successful response returns the category without package information."
          }
        },
        "summary" : "Gets information about a specific category",
        "tags" : [ "Headless" ]
      }
    },
    "/accounts/{token}/categories/{categoryId}?includePackages=1" : {
      "get" : {
        "description" : "Gets information about a category and returns the packages in that category.",
        "operationId" : "getCategoryIncludingPackages",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "The ID of the category to fetch.",
          "explode" : false,
          "in" : "path",
          "name" : "categoryId",
          "required" : true,
          "schema" : {
            "example" : "127244343",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CategoryResponse"
                }
              }
            },
            "description" : "Successful response returns the category with package information."
          }
        },
        "summary" : "Gets information about a specific category, including all the packages in the category",
        "tags" : [ "Headless" ]
      }
    },
    "/accounts/{token}/packages/{packageId}" : {
      "get" : {
        "description" : "Gets a package from a webstore by ID.",
        "operationId" : "getPackageById",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "The package's ID.",
          "explode" : false,
          "in" : "path",
          "name" : "packageId",
          "required" : true,
          "schema" : {
            "example" : 1272441812,
            "type" : "number"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PackageResponse"
                }
              }
            },
            "description" : "Successful response returns the package information."
          }
        },
        "summary" : "Fetch a package from a webstore by its identifier",
        "tags" : [ "Headless" ]
      }
    },
    "/accounts/{token}/packages" : {
      "get" : {
        "description" : "Gets all packages from a webstore.",
        "operationId" : "getAllPackages",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PackageResponse"
                }
              }
            },
            "description" : "Successful response returns a list of package information."
          }
        },
        "summary" : "Fetch all packages from a webstore",
        "tags" : [ "Headless" ]
      }
    },
    "/accounts/{token}/packages?ipAddress={ipAddress}" : {
      "get" : {
        "description" : "Gets all packages from a webstore.",
        "operationId" : "getAllPackagesWithAuthedIP",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "An IP address can be provided with authenticated requests.",
          "explode" : false,
          "in" : "path",
          "name" : "ipAddress",
          "required" : true,
          "schema" : {
            "example" : "127.0.0.1",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PackageResponse"
                }
              }
            },
            "description" : "Successful response returns a list of package information."
          },
          "422" : {
            "description" : "The provided request is invalid."
          }
        },
        "summary" : "Fetch a package from a webstore by its identifier",
        "tags" : [ "Headless" ]
      }
    },
    "/accounts/{token}/packages?basketIdent={basketIdent}" : {
      "get" : {
        "description" : "Gets all packages from a webstore.",
        "operationId" : "getAllPackagesWithBasket",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "The basket identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "basketIdent",
          "required" : true,
          "schema" : {
            "example" : "c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PackageResponse"
                }
              }
            },
            "description" : "Successful response returns a list of package information."
          },
          "422" : {
            "description" : "The provided request is invalid."
          }
        },
        "summary" : "Fetch a package from a webstore by its identifier",
        "tags" : [ "Headless" ]
      }
    },
    "/accounts/{token}/packages?ipAddress={ipAddress}&basketIdent={basketIdent}" : {
      "get" : {
        "description" : "Gets all packages from a webstore.",
        "operationId" : "getAllPackagesWithAuthedIPAndBasket",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "The basket identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "basketIdent",
          "required" : true,
          "schema" : {
            "example" : "c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "An IP address can be provided with authenticated requests.",
          "explode" : false,
          "in" : "path",
          "name" : "ipAddress",
          "required" : true,
          "schema" : {
            "example" : "127.0.0.1",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "$ref" : "#/components/schemas/PackageResponse"
                  },
                  "type" : "array"
                }
              }
            },
            "description" : "Successful response returns a list of package information."
          },
          "422" : {
            "description" : "The provided request is invalid."
          }
        },
        "summary" : "Fetch a package from a webstore by its identifier",
        "tags" : [ "Headless" ]
      }
    },
    "/accounts/{token}/baskets/{basketIdent}/creator-codes" : {
      "post" : {
        "description" : "Applies a creator code to a basket.",
        "operationId" : "applyCreatorCode",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "The basket identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "basketIdent",
          "required" : true,
          "schema" : {
            "example" : "c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/applyCreatorCode_request"
              }
            }
          },
          "description" : "Provide a `creator_code` to apply to the basket."
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BasketResponse"
                }
              }
            },
            "description" : "Successful response returns the basket."
          },
          "422" : {
            "description" : "The provided request is invalid. The error response will include detail as to which parameter failed validation."
          }
        },
        "summary" : "Apply a creator code to a basket.",
        "tags" : [ "Headless" ]
      }
    },
    "/accounts/{token}/baskets/{basketIdent}/creator-codes/remove" : {
      "post" : {
        "description" : "Applies a creator code to a basket.",
        "operationId" : "removeCreatorCode",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "The basket identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "basketIdent",
          "required" : true,
          "schema" : {
            "example" : "c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "Creator code removed successfully."
          },
          "422" : {
            "description" : "The provided request is invalid. The error response will include detail as to which parameter failed validation."
          }
        },
        "summary" : "Remove a creator code from the basket.",
        "tags" : [ "Headless" ]
      }
    },
    "/accounts/{token}/baskets/{basketIdent}/giftcards" : {
      "post" : {
        "description" : "Applies a creator code to a basket.",
        "operationId" : "applyGiftCard",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "The basket identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "basketIdent",
          "required" : true,
          "schema" : {
            "example" : "c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GiftCard"
              }
            }
          },
          "description" : "Provide a `card_number` to apply to the basket."
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BasketResponse"
                }
              }
            },
            "description" : "Successful response returns the basket."
          }
        },
        "summary" : "Apply a gift card to a basket.",
        "tags" : [ "Headless" ]
      }
    },
    "/accounts/{token}/baskets/{basketIdent}/giftcards/remove" : {
      "post" : {
        "description" : "Removes a gift card from the basket.",
        "operationId" : "removeGiftCard",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "The basket identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "basketIdent",
          "required" : true,
          "schema" : {
            "example" : "c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/removeGiftCard_request"
              }
            }
          },
          "description" : "Provide the `card_number` to remove from the basket."
        },
        "responses" : {
          "200" : {
            "description" : "Gift card removed successfully."
          },
          "422" : {
            "description" : "The provided request is invalid. The error response will include detail as to which parameter failed validation."
          }
        },
        "summary" : "Remove a gift card from the basket.",
        "tags" : [ "Headless" ]
      }
    },
    "/accounts/{token}/baskets/{basketIdent}/coupons" : {
      "post" : {
        "description" : "Applies a creator code to a basket.",
        "operationId" : "applyCoupon",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "The basket identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "basketIdent",
          "required" : true,
          "schema" : {
            "example" : "c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Coupon"
              }
            }
          },
          "description" : "Provide a `coupon_code` to apply to the basket."
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BasketResponse"
                }
              }
            },
            "description" : "Successful response returns the basket."
          }
        },
        "summary" : "Apply a coupon to a basket.",
        "tags" : [ "Headless" ]
      }
    },
    "/accounts/{token}/baskets/{basketIdent}/coupons/remove" : {
      "post" : {
        "description" : "Removes a coupon code from a basket",
        "operationId" : "removeCoupon",
        "parameters" : [ {
          "description" : "The webstore identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "token",
          "required" : true,
          "schema" : {
            "example" : "t66x-7cd928b1e9312709e6810edac6dc1fd1eefc57cb",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "The basket identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "basketIdent",
          "required" : true,
          "schema" : {
            "example" : "c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response."
          },
          "422" : {
            "description" : "The provided request is invalid. The error response will include detail as to which parameter failed validation."
          }
        },
        "summary" : "Remove a coupon from the basket.",
        "tags" : [ "Headless" ]
      }
    },
    "/baskets/{basketIdent}/packages" : {
      "post" : {
        "description" : "Add a package with the given ID to the basket.",
        "operationId" : "addBasketPackage",
        "parameters" : [ {
          "description" : "The basket identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "basketIdent",
          "required" : true,
          "schema" : {
            "example" : "c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/addBasketPackage_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Basket"
                }
              }
            },
            "description" : "Successful response."
          },
          "422" : {
            "description" : "The provided request is invalid. The error response will include detail as to which parameter failed validation."
          }
        },
        "summary" : "Add a package to a basket",
        "tags" : [ "Headless" ]
      }
    },
    "/baskets/{basketIdent}/packages/remove" : {
      "post" : {
        "description" : "Remove the given package ID from the basket.",
        "operationId" : "removeBasketPackage",
        "parameters" : [ {
          "description" : "The basket identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "basketIdent",
          "required" : true,
          "schema" : {
            "example" : "c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c",
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/removeBasketPackage_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Basket"
                }
              }
            },
            "description" : "Successful response returns the basket."
          },
          "422" : {
            "description" : "The provided request is invalid. The error response will include detail as to which parameter failed validation."
          }
        },
        "summary" : "Remove a package from a basket",
        "tags" : [ "Headless" ]
      }
    },
    "/baskets/{basketIdent}/packages/{packageId}" : {
      "put" : {
        "description" : "Sets the quantity of the given item in the basket.",
        "operationId" : "updatePackageQuantity",
        "parameters" : [ {
          "description" : "The basket identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "basketIdent",
          "required" : true,
          "schema" : {
            "example" : "c00244-d2ac2e77418a55b25292a6bc7a719ad9c529ba2c",
            "type" : "string"
          },
          "style" : "simple"
        }, {
          "description" : "The package identifier.",
          "explode" : false,
          "in" : "path",
          "name" : "packageId",
          "required" : true,
          "schema" : {
            "example" : 6276316,
            "type" : "number"
          },
          "style" : "simple"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/updatePackageQuantity_request"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Successful response."
          },
          "422" : {
            "description" : "The provided request is invalid. The error response will include detail as to which parameter failed validation."
          }
        },
        "summary" : "Updates the quantity of the given package in the basket. The user must be logged in before the quantity can be changed.",
        "tags" : [ "Headless" ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "Webstore" : {
        "properties" : {
          "id" : {
            "example" : 1,
            "type" : "integer"
          },
          "description" : {
            "description" : "Store description in HTML format",
            "example" : "<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris fermentum eget tellus et cursus. Pellentesque vel vehicula velit, sit amet tincidunt diam. Aliquam sit amet fermentum lorem.</p>",
            "type" : "string"
          },
          "name" : {
            "description" : "Name of the store",
            "example" : "Minecraft Store",
            "type" : "string"
          },
          "webstore_url" : {
            "description" : "URL of the webstore",
            "example" : "https://example.tebex.io",
            "format" : "uri",
            "type" : "string"
          },
          "currency" : {
            "description" : "Currency used in the store",
            "example" : "USD",
            "type" : "string"
          },
          "lang" : {
            "description" : "Language of the store",
            "example" : "en",
            "type" : "string"
          },
          "logo" : {
            "description" : "URL of the store's logo",
            "format" : "uri",
            "nullable" : true,
            "type" : "string"
          },
          "platform_type" : {
            "description" : "Platform type for the store",
            "example" : "Minecraft: Java Edition",
            "type" : "string"
          },
          "platform_type_id" : {
            "example" : "minecraft",
            "type" : "string"
          },
          "created_at" : {
            "description" : "The date and time when the store was created",
            "example" : "2023-05-25T09:49:37Z",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "WebstoreResponse" : {
        "description" : "Wrapped webstore information in a \"data\" object.",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/WebstoreResponse_data"
          }
        },
        "type" : "object"
      },
      "ErrorResponse" : {
        "properties" : {
          "type" : {
            "description" : "A URI reference [RFC3986] that identifies the problem type.  This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be \"about:blank\"."
          },
          "title" : {
            "description" : "A short, human-readable summary of the problem type.  It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization",
            "example" : "Bad Request",
            "type" : "string"
          },
          "status" : {
            "description" : "The HTTP status code generated by the origin server for the occurrence of the problem.",
            "example" : 400,
            "type" : "integer"
          },
          "detail" : {
            "description" : "A human-readable explanation specific to this occurrence of the problem.",
            "example" : "Parameter 'first_name' is required.",
            "type" : "string"
          },
          "instance" : {
            "description" : "A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced",
            "example" : "/path/to/ref",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "GiftCard" : {
        "properties" : {
          "card_number" : {
            "example" : "0127 0244 7210 1111",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Coupon" : {
        "properties" : {
          "coupon_code" : {
            "example" : "Academy10",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "BasketResponse" : {
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/Basket"
          }
        },
        "type" : "object"
      },
      "Basket" : {
        "properties" : {
          "id" : {
            "example" : "244127617",
            "type" : "string"
          },
          "ident" : {
            "example" : "1a-55fff4107740a1f40d844ff89607557f45bfafb3",
            "type" : "string"
          },
          "complete" : {
            "example" : false,
            "type" : "boolean"
          },
          "email" : {
            "example" : "support@tebex.io",
            "nullable" : true,
            "type" : "string"
          },
          "username" : {
            "nullable" : true,
            "type" : "string",
            "example" : null
          },
          "coupons" : {
            "items" : {
              "$ref" : "#/components/schemas/Coupon"
            },
            "type" : "array"
          },
          "giftcards" : {
            "items" : {
              "$ref" : "#/components/schemas/GiftCard"
            },
            "type" : "array"
          },
          "creator_code" : {
            "description" : "The creator code is used to share a percentage of the payment with another party. See more about creator codes at https://docs.tebex.io/creators/tebex-control-panel/engagement/creator-codes",
            "type" : "string"
          },
          "cancel_url" : {
            "example" : "https://tebex.io",
            "type" : "string"
          },
          "complete_url" : {
            "nullable" : true,
            "type" : "string",
            "example" : null
          },
          "complete_auto_redirect" : {
            "example" : false,
            "type" : "boolean"
          },
          "country" : {
            "description" : "A two-character country code",
            "example" : "US",
            "type" : "string"
          },
          "ip" : {
            "example" : "127.0.0.1",
            "type" : "string"
          },
          "username_id" : {
            "example" : 127244,
            "type" : "number"
          },
          "base_price" : {
            "example" : 1.27,
            "format" : "float",
            "type" : "number"
          },
          "sales_tax" : {
            "example" : 0.11,
            "format" : "float",
            "type" : "number"
          },
          "total_price" : {
            "example" : 1.38,
            "format" : "float",
            "type" : "number"
          },
          "currency" : {
            "description" : "A 3 character currency code",
            "example" : "USD",
            "type" : "string"
          },
          "packages" : {
            "items" : {
              "$ref" : "#/components/schemas/BasketPackage"
            },
            "type" : "array"
          },
          "custom" : {
            "example" : {
              "foo" : "bar",
              "ref" : 1234
            },
            "nullable" : true,
            "type" : "object"
          },
          "links" : {
            "$ref" : "#/components/schemas/BasketLinks"
          }
        },
        "type" : "object"
      },
      "BasketLinks" : {
        "properties" : {
          "payment" : {
            "description" : "The `links.payment` property is only returned if the basket has been paid for and a payment exists with the `complete`,`refund`, or `chargeback` status.",
            "example" : "https://checkout.tebex.io/api/payments/tbx-12345",
            "type" : "string"
          },
          "checkout" : {
            "description" : "The `links.checkout` property is only returned if the basket has not been paid, and is the URL to send the customer to make payment",
            "example" : "https://checkout.tebex.io/checkout/1a-55fff4107740a1f40d844ff89607557f45bfafb3",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "CategoryResponse" : {
        "properties" : {
          "data" : {
            "items" : {
              "$ref" : "#/components/schemas/Category"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "Category" : {
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "name" : {
            "description" : "User-friendly name of the category",
            "example" : "Test",
            "type" : "string"
          },
          "slug" : {
            "description" : "Short identifier slug for the category",
            "nullable" : true,
            "type" : "string"
          },
          "parent" : {
            "description" : "Parent category, if applicable",
            "format" : "Category",
            "nullable" : true,
            "type" : "object"
          },
          "description" : {
            "description" : "HTML description of the category",
            "type" : "string"
          },
          "packages" : {
            "items" : {
              "$ref" : "#/components/schemas/Package"
            },
            "nullable" : true,
            "type" : "array"
          },
          "order" : {
            "description" : "The numeric order in which to display the category.",
            "example" : 1,
            "type" : "integer"
          },
          "display_type" : {
            "description" : "How the category should be displayed",
            "enum" : [ "list", "grid" ],
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "PackageResponse" : {
        "properties" : {
          "data" : {
            "items" : {
              "$ref" : "#/components/schemas/Package"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "Package" : {
        "properties" : {
          "id" : {
            "example" : 6276316,
            "type" : "integer"
          },
          "name" : {
            "example" : "test package 101",
            "type" : "string"
          },
          "description" : {
            "example" : "<p>this is just a test. only a test. nothing more.</p>",
            "type" : "string"
          },
          "image" : {
            "nullable" : true,
            "type" : "string",
            "example" : null
          },
          "type" : {
            "example" : "single",
            "type" : "string"
          },
          "category" : {
            "$ref" : "#/components/schemas/Package_category"
          },
          "base_price" : {
            "example" : 5,
            "format" : "float",
            "type" : "number"
          },
          "sales_tax" : {
            "example" : 0,
            "format" : "float",
            "type" : "number"
          },
          "total_price" : {
            "example" : 5,
            "format" : "float",
            "type" : "number"
          },
          "currency" : {
            "example" : "USD",
            "type" : "string"
          },
          "discount" : {
            "example" : 0,
            "format" : "float",
            "type" : "number"
          },
          "disable_quantity" : {
            "example" : false,
            "type" : "boolean"
          },
          "disable_gifting" : {
            "example" : false,
            "type" : "boolean"
          },
          "expiration_date" : {
            "format" : "date-time",
            "nullable" : true,
            "type" : "string",
            "example" : null
          },
          "created_at" : {
            "example" : "2024-05-21T18:09:17Z",
            "format" : "date-time",
            "type" : "string"
          },
          "updated_at" : {
            "example" : "2024-05-21T18:09:17Z",
            "format" : "date-time",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "BasketPackage" : {
        "description" : "A package within an existing basket.",
        "properties" : {
          "qty" : {
            "description" : "The quantity of `package` in this basket. This is not the total quantity of overall items in the basket.",
            "example" : 2,
            "type" : "integer"
          },
          "type" : {
            "description" : "The type of payment, either `single` for one-time payments or `subscription`.",
            "enum" : [ "single", "subscription" ],
            "example" : "single",
            "type" : "string"
          },
          "revenue_share" : {
            "description" : "An array of payment destination objects describing how the purchase should be split between multiple wallets. **Only available with pre-agreement from Tebex.**",
            "items" : {
              "$ref" : "#/components/schemas/RevenueShare"
            },
            "type" : "array"
          }
        },
        "type" : "object"
      },
      "RevenueShare" : {
        "properties" : {
          "wallet_ref" : {
            "example" : "some_wallet_reference",
            "type" : "string"
          },
          "amount" : {
            "description" : "A float (decimal) value representing the amount of this payment in your account currency that is credited to the `wallet_ref`",
            "example" : 0.5,
            "type" : "number"
          },
          "gateway_fee_percent" : {
            "description" : "A float (decimal) value representing the percentage of the gateway fee that should be dedicated from this wallet’s revenue share. This optional value can be anywhere between 0 - 100.",
            "example" : 50.0,
            "type" : "number"
          }
        },
        "type" : "object"
      },
      "createBasket_request" : {
        "properties" : {
          "complete_url" : {
            "description" : "A URL the user can return to when checkout is completed.",
            "example" : "https://example.tebex.io/thank-you",
            "type" : "string"
          },
          "cancel_url" : {
            "description" : "A URL the user can return to when cancelling checkout.",
            "example" : "https://tebex.io/",
            "type" : "string"
          },
          "custom" : {
            "description" : "Custom data you wish to associate with the basket. This data will be included with webhook responses and GET requests associated with the Basket.",
            "example" : {
              "foo" : "bar"
            },
            "type" : "object"
          },
          "complete_auto_redirect" : {
            "description" : "True if the user should automatically be redirected to the relevant complete/cancel URL",
            "example" : true,
            "type" : "boolean"
          }
        },
        "type" : "object"
      },
      "applyCreatorCode_request" : {
        "properties" : {
          "creator_code" : {
            "example" : "Academy10",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "removeGiftCard_request" : {
        "properties" : {
          "card_number" : {
            "example" : "0127 0244 7210 1111",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "addBasketPackage_request" : {
        "properties" : {
          "package_id" : {
            "example" : "6276316",
            "type" : "string"
          },
          "quantity" : {
            "example" : 1,
            "type" : "number"
          }
        },
        "type" : "object"
      },
      "removeBasketPackage_request" : {
        "properties" : {
          "package_id" : {
            "example" : "6276316",
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "updatePackageQuantity_request" : {
        "properties" : {
          "quantity" : {
            "example" : 1,
            "type" : "number"
          }
        },
        "type" : "object"
      },
      "WebstoreResponse_data" : {
        "properties" : {
          "schema" : {
            "$ref" : "#/components/schemas/Webstore"
          }
        },
        "type" : "object"
      },
      "Package_category" : {
        "properties" : {
          "id" : {
            "example" : 2678660,
            "type" : "integer"
          },
          "name" : {
            "example" : "Packages",
            "type" : "string"
          }
        },
        "type" : "object"
      }
    }
  }
}