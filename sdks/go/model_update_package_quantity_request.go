/*
Tebex Headless API

The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexHeadless

import (
	"encoding/json"
)

// checks if the UpdatePackageQuantityRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePackageQuantityRequest{}

// UpdatePackageQuantityRequest struct for UpdatePackageQuantityRequest
type UpdatePackageQuantityRequest struct {
	Quantity *float32 `json:"quantity,omitempty"`
}

// NewUpdatePackageQuantityRequest instantiates a new UpdatePackageQuantityRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePackageQuantityRequest() *UpdatePackageQuantityRequest {
	this := UpdatePackageQuantityRequest{}
	return &this
}

// NewUpdatePackageQuantityRequestWithDefaults instantiates a new UpdatePackageQuantityRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePackageQuantityRequestWithDefaults() *UpdatePackageQuantityRequest {
	this := UpdatePackageQuantityRequest{}
	return &this
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *UpdatePackageQuantityRequest) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePackageQuantityRequest) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *UpdatePackageQuantityRequest) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *UpdatePackageQuantityRequest) SetQuantity(v float32) {
	o.Quantity = &v
}

func (o UpdatePackageQuantityRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePackageQuantityRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	return toSerialize, nil
}

type NullableUpdatePackageQuantityRequest struct {
	value *UpdatePackageQuantityRequest
	isSet bool
}

func (v NullableUpdatePackageQuantityRequest) Get() *UpdatePackageQuantityRequest {
	return v.value
}

func (v *NullableUpdatePackageQuantityRequest) Set(val *UpdatePackageQuantityRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePackageQuantityRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePackageQuantityRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePackageQuantityRequest(val *UpdatePackageQuantityRequest) *NullableUpdatePackageQuantityRequest {
	return &NullableUpdatePackageQuantityRequest{value: val, isSet: true}
}

func (v NullableUpdatePackageQuantityRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePackageQuantityRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


