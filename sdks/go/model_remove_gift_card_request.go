/*
Tebex Headless API

The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexHeadless

import (
	"encoding/json"
)

// checks if the RemoveGiftCardRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoveGiftCardRequest{}

// RemoveGiftCardRequest struct for RemoveGiftCardRequest
type RemoveGiftCardRequest struct {
	CardNumber *string `json:"card_number,omitempty"`
}

// NewRemoveGiftCardRequest instantiates a new RemoveGiftCardRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveGiftCardRequest() *RemoveGiftCardRequest {
	this := RemoveGiftCardRequest{}
	return &this
}

// NewRemoveGiftCardRequestWithDefaults instantiates a new RemoveGiftCardRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveGiftCardRequestWithDefaults() *RemoveGiftCardRequest {
	this := RemoveGiftCardRequest{}
	return &this
}

// GetCardNumber returns the CardNumber field value if set, zero value otherwise.
func (o *RemoveGiftCardRequest) GetCardNumber() string {
	if o == nil || IsNil(o.CardNumber) {
		var ret string
		return ret
	}
	return *o.CardNumber
}

// GetCardNumberOk returns a tuple with the CardNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveGiftCardRequest) GetCardNumberOk() (*string, bool) {
	if o == nil || IsNil(o.CardNumber) {
		return nil, false
	}
	return o.CardNumber, true
}

// HasCardNumber returns a boolean if a field has been set.
func (o *RemoveGiftCardRequest) HasCardNumber() bool {
	if o != nil && !IsNil(o.CardNumber) {
		return true
	}

	return false
}

// SetCardNumber gets a reference to the given string and assigns it to the CardNumber field.
func (o *RemoveGiftCardRequest) SetCardNumber(v string) {
	o.CardNumber = &v
}

func (o RemoveGiftCardRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoveGiftCardRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CardNumber) {
		toSerialize["card_number"] = o.CardNumber
	}
	return toSerialize, nil
}

type NullableRemoveGiftCardRequest struct {
	value *RemoveGiftCardRequest
	isSet bool
}

func (v NullableRemoveGiftCardRequest) Get() *RemoveGiftCardRequest {
	return v.value
}

func (v *NullableRemoveGiftCardRequest) Set(val *RemoveGiftCardRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveGiftCardRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveGiftCardRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveGiftCardRequest(val *RemoveGiftCardRequest) *NullableRemoveGiftCardRequest {
	return &NullableRemoveGiftCardRequest{value: val, isSet: true}
}

func (v NullableRemoveGiftCardRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveGiftCardRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


