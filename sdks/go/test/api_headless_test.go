/*
Tebex Headless API

Testing HeadlessAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package TebexHeadless

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_TebexHeadless_HeadlessAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HeadlessAPIService AddBasketPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var basketIdent string

		resp, httpRes, err := apiClient.HeadlessAPI.AddBasketPackage(context.Background(), basketIdent).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService ApplyCoupon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string
		var basketIdent string

		resp, httpRes, err := apiClient.HeadlessAPI.ApplyCoupon(context.Background(), token, basketIdent).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService ApplyCreatorCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string
		var basketIdent string

		resp, httpRes, err := apiClient.HeadlessAPI.ApplyCreatorCode(context.Background(), token, basketIdent).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService ApplyGiftCard", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string
		var basketIdent string

		resp, httpRes, err := apiClient.HeadlessAPI.ApplyGiftCard(context.Background(), token, basketIdent).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService CreateBasket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string

		resp, httpRes, err := apiClient.HeadlessAPI.CreateBasket(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService GetAllCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string

		resp, httpRes, err := apiClient.HeadlessAPI.GetAllCategories(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService GetAllCategoriesIncludingPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string

		resp, httpRes, err := apiClient.HeadlessAPI.GetAllCategoriesIncludingPackages(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService GetAllPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string

		resp, httpRes, err := apiClient.HeadlessAPI.GetAllPackages(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService GetAllPackagesWithAuthedIP", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string
		var ipAddress string

		resp, httpRes, err := apiClient.HeadlessAPI.GetAllPackagesWithAuthedIP(context.Background(), token, ipAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService GetAllPackagesWithAuthedIPAndBasket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string
		var basketIdent string
		var ipAddress string

		resp, httpRes, err := apiClient.HeadlessAPI.GetAllPackagesWithAuthedIPAndBasket(context.Background(), token, basketIdent, ipAddress).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService GetAllPackagesWithBasket", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string
		var basketIdent string

		resp, httpRes, err := apiClient.HeadlessAPI.GetAllPackagesWithBasket(context.Background(), token, basketIdent).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService GetBasketAuthUrl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string
		var basketIdent string
		var returnUrl string

		resp, httpRes, err := apiClient.HeadlessAPI.GetBasketAuthUrl(context.Background(), token, basketIdent, returnUrl).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService GetBasketById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string
		var basketIdent string

		resp, httpRes, err := apiClient.HeadlessAPI.GetBasketById(context.Background(), token, basketIdent).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService GetCategoryById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string
		var categoryId string

		resp, httpRes, err := apiClient.HeadlessAPI.GetCategoryById(context.Background(), token, categoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService GetCategoryIncludingPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string
		var categoryId string

		resp, httpRes, err := apiClient.HeadlessAPI.GetCategoryIncludingPackages(context.Background(), token, categoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService GetPackageById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string
		var packageId float32

		resp, httpRes, err := apiClient.HeadlessAPI.GetPackageById(context.Background(), token, packageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService GetWebstoreById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string

		resp, httpRes, err := apiClient.HeadlessAPI.GetWebstoreById(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService RemoveBasketPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var basketIdent string

		resp, httpRes, err := apiClient.HeadlessAPI.RemoveBasketPackage(context.Background(), basketIdent).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService RemoveCoupon", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string
		var basketIdent string

		httpRes, err := apiClient.HeadlessAPI.RemoveCoupon(context.Background(), token, basketIdent).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService RemoveCreatorCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string
		var basketIdent string

		httpRes, err := apiClient.HeadlessAPI.RemoveCreatorCode(context.Background(), token, basketIdent).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService RemoveGiftCard", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string
		var basketIdent string

		httpRes, err := apiClient.HeadlessAPI.RemoveGiftCard(context.Background(), token, basketIdent).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HeadlessAPIService UpdatePackageQuantity", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var basketIdent string
		var packageId float32

		httpRes, err := apiClient.HeadlessAPI.UpdatePackageQuantity(context.Background(), basketIdent, packageId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
