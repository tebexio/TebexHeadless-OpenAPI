/*
Tebex Headless API

The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexHeadless

import (
	"encoding/json"
)

// checks if the PackageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackageResponse{}

// PackageResponse struct for PackageResponse
type PackageResponse struct {
	Data []Package `json:"data,omitempty"`
}

// NewPackageResponse instantiates a new PackageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageResponse() *PackageResponse {
	this := PackageResponse{}
	return &this
}

// NewPackageResponseWithDefaults instantiates a new PackageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageResponseWithDefaults() *PackageResponse {
	this := PackageResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PackageResponse) GetData() []Package {
	if o == nil || IsNil(o.Data) {
		var ret []Package
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageResponse) GetDataOk() ([]Package, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PackageResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []Package and assigns it to the Data field.
func (o *PackageResponse) SetData(v []Package) {
	o.Data = v
}

func (o PackageResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullablePackageResponse struct {
	value *PackageResponse
	isSet bool
}

func (v NullablePackageResponse) Get() *PackageResponse {
	return v.value
}

func (v *NullablePackageResponse) Set(val *PackageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageResponse(val *PackageResponse) *NullablePackageResponse {
	return &NullablePackageResponse{value: val, isSet: true}
}

func (v NullablePackageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


