/*
Tebex Headless API

The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexHeadless

import (
	"encoding/json"
)

// checks if the WebstoreResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebstoreResponse{}

// WebstoreResponse Wrapped webstore information in a \"data\" object.
type WebstoreResponse struct {
	Data *WebstoreResponseData `json:"data,omitempty"`
}

// NewWebstoreResponse instantiates a new WebstoreResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebstoreResponse() *WebstoreResponse {
	this := WebstoreResponse{}
	return &this
}

// NewWebstoreResponseWithDefaults instantiates a new WebstoreResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebstoreResponseWithDefaults() *WebstoreResponse {
	this := WebstoreResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *WebstoreResponse) GetData() WebstoreResponseData {
	if o == nil || IsNil(o.Data) {
		var ret WebstoreResponseData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebstoreResponse) GetDataOk() (*WebstoreResponseData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *WebstoreResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given WebstoreResponseData and assigns it to the Data field.
func (o *WebstoreResponse) SetData(v WebstoreResponseData) {
	o.Data = &v
}

func (o WebstoreResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebstoreResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableWebstoreResponse struct {
	value *WebstoreResponse
	isSet bool
}

func (v NullableWebstoreResponse) Get() *WebstoreResponse {
	return v.value
}

func (v *NullableWebstoreResponse) Set(val *WebstoreResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWebstoreResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWebstoreResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebstoreResponse(val *WebstoreResponse) *NullableWebstoreResponse {
	return &NullableWebstoreResponse{value: val, isSet: true}
}

func (v NullableWebstoreResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebstoreResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


