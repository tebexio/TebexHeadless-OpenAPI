/*
Tebex Headless API

The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexHeadless

import (
	"encoding/json"
)

// checks if the BasketPackage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BasketPackage{}

// BasketPackage A package within an existing basket.
type BasketPackage struct {
	// The quantity of `package` in this basket. This is not the total quantity of overall items in the basket.
	Qty *int32 `json:"qty,omitempty"`
	// The type of payment, either `single` for one-time payments or `subscription`.
	Type *string `json:"type,omitempty"`
	// An array of payment destination objects describing how the purchase should be split between multiple wallets. **Only available with pre-agreement from Tebex.**
	RevenueShare []RevenueShare `json:"revenue_share,omitempty"`
}

// NewBasketPackage instantiates a new BasketPackage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasketPackage() *BasketPackage {
	this := BasketPackage{}
	return &this
}

// NewBasketPackageWithDefaults instantiates a new BasketPackage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasketPackageWithDefaults() *BasketPackage {
	this := BasketPackage{}
	return &this
}

// GetQty returns the Qty field value if set, zero value otherwise.
func (o *BasketPackage) GetQty() int32 {
	if o == nil || IsNil(o.Qty) {
		var ret int32
		return ret
	}
	return *o.Qty
}

// GetQtyOk returns a tuple with the Qty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasketPackage) GetQtyOk() (*int32, bool) {
	if o == nil || IsNil(o.Qty) {
		return nil, false
	}
	return o.Qty, true
}

// HasQty returns a boolean if a field has been set.
func (o *BasketPackage) HasQty() bool {
	if o != nil && !IsNil(o.Qty) {
		return true
	}

	return false
}

// SetQty gets a reference to the given int32 and assigns it to the Qty field.
func (o *BasketPackage) SetQty(v int32) {
	o.Qty = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BasketPackage) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasketPackage) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BasketPackage) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BasketPackage) SetType(v string) {
	o.Type = &v
}

// GetRevenueShare returns the RevenueShare field value if set, zero value otherwise.
func (o *BasketPackage) GetRevenueShare() []RevenueShare {
	if o == nil || IsNil(o.RevenueShare) {
		var ret []RevenueShare
		return ret
	}
	return o.RevenueShare
}

// GetRevenueShareOk returns a tuple with the RevenueShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BasketPackage) GetRevenueShareOk() ([]RevenueShare, bool) {
	if o == nil || IsNil(o.RevenueShare) {
		return nil, false
	}
	return o.RevenueShare, true
}

// HasRevenueShare returns a boolean if a field has been set.
func (o *BasketPackage) HasRevenueShare() bool {
	if o != nil && !IsNil(o.RevenueShare) {
		return true
	}

	return false
}

// SetRevenueShare gets a reference to the given []RevenueShare and assigns it to the RevenueShare field.
func (o *BasketPackage) SetRevenueShare(v []RevenueShare) {
	o.RevenueShare = v
}

func (o BasketPackage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BasketPackage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Qty) {
		toSerialize["qty"] = o.Qty
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.RevenueShare) {
		toSerialize["revenue_share"] = o.RevenueShare
	}
	return toSerialize, nil
}

type NullableBasketPackage struct {
	value *BasketPackage
	isSet bool
}

func (v NullableBasketPackage) Get() *BasketPackage {
	return v.value
}

func (v *NullableBasketPackage) Set(val *BasketPackage) {
	v.value = val
	v.isSet = true
}

func (v NullableBasketPackage) IsSet() bool {
	return v.isSet
}

func (v *NullableBasketPackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasketPackage(val *BasketPackage) *NullableBasketPackage {
	return &NullableBasketPackage{value: val, isSet: true}
}

func (v NullableBasketPackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasketPackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


