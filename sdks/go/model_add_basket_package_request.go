/*
Tebex Headless API

The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexHeadless

import (
	"encoding/json"
)

// checks if the AddBasketPackageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddBasketPackageRequest{}

// AddBasketPackageRequest struct for AddBasketPackageRequest
type AddBasketPackageRequest struct {
	PackageId *string `json:"package_id,omitempty"`
	Quantity *float32 `json:"quantity,omitempty"`
}

// NewAddBasketPackageRequest instantiates a new AddBasketPackageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddBasketPackageRequest() *AddBasketPackageRequest {
	this := AddBasketPackageRequest{}
	return &this
}

// NewAddBasketPackageRequestWithDefaults instantiates a new AddBasketPackageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddBasketPackageRequestWithDefaults() *AddBasketPackageRequest {
	this := AddBasketPackageRequest{}
	return &this
}

// GetPackageId returns the PackageId field value if set, zero value otherwise.
func (o *AddBasketPackageRequest) GetPackageId() string {
	if o == nil || IsNil(o.PackageId) {
		var ret string
		return ret
	}
	return *o.PackageId
}

// GetPackageIdOk returns a tuple with the PackageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddBasketPackageRequest) GetPackageIdOk() (*string, bool) {
	if o == nil || IsNil(o.PackageId) {
		return nil, false
	}
	return o.PackageId, true
}

// HasPackageId returns a boolean if a field has been set.
func (o *AddBasketPackageRequest) HasPackageId() bool {
	if o != nil && !IsNil(o.PackageId) {
		return true
	}

	return false
}

// SetPackageId gets a reference to the given string and assigns it to the PackageId field.
func (o *AddBasketPackageRequest) SetPackageId(v string) {
	o.PackageId = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *AddBasketPackageRequest) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddBasketPackageRequest) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *AddBasketPackageRequest) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *AddBasketPackageRequest) SetQuantity(v float32) {
	o.Quantity = &v
}

func (o AddBasketPackageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddBasketPackageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PackageId) {
		toSerialize["package_id"] = o.PackageId
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	return toSerialize, nil
}

type NullableAddBasketPackageRequest struct {
	value *AddBasketPackageRequest
	isSet bool
}

func (v NullableAddBasketPackageRequest) Get() *AddBasketPackageRequest {
	return v.value
}

func (v *NullableAddBasketPackageRequest) Set(val *AddBasketPackageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddBasketPackageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddBasketPackageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddBasketPackageRequest(val *AddBasketPackageRequest) *NullableAddBasketPackageRequest {
	return &NullableAddBasketPackageRequest{value: val, isSet: true}
}

func (v NullableAddBasketPackageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddBasketPackageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


