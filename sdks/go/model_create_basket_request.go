/*
Tebex Headless API

The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexHeadless

import (
	"encoding/json"
)

// checks if the CreateBasketRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateBasketRequest{}

// CreateBasketRequest struct for CreateBasketRequest
type CreateBasketRequest struct {
	// A URL the user can return to when checkout is completed.
	CompleteUrl *string `json:"complete_url,omitempty"`
	// A URL the user can return to when cancelling checkout.
	CancelUrl *string `json:"cancel_url,omitempty"`
	// Custom data you wish to associate with the basket. This data will be included with webhook responses and GET requests associated with the Basket.
	Custom map[string]interface{} `json:"custom,omitempty"`
	// True if the user should automatically be redirected to the relevant complete/cancel URL
	CompleteAutoRedirect *bool `json:"complete_auto_redirect,omitempty"`
}

// NewCreateBasketRequest instantiates a new CreateBasketRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateBasketRequest() *CreateBasketRequest {
	this := CreateBasketRequest{}
	return &this
}

// NewCreateBasketRequestWithDefaults instantiates a new CreateBasketRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateBasketRequestWithDefaults() *CreateBasketRequest {
	this := CreateBasketRequest{}
	return &this
}

// GetCompleteUrl returns the CompleteUrl field value if set, zero value otherwise.
func (o *CreateBasketRequest) GetCompleteUrl() string {
	if o == nil || IsNil(o.CompleteUrl) {
		var ret string
		return ret
	}
	return *o.CompleteUrl
}

// GetCompleteUrlOk returns a tuple with the CompleteUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBasketRequest) GetCompleteUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CompleteUrl) {
		return nil, false
	}
	return o.CompleteUrl, true
}

// HasCompleteUrl returns a boolean if a field has been set.
func (o *CreateBasketRequest) HasCompleteUrl() bool {
	if o != nil && !IsNil(o.CompleteUrl) {
		return true
	}

	return false
}

// SetCompleteUrl gets a reference to the given string and assigns it to the CompleteUrl field.
func (o *CreateBasketRequest) SetCompleteUrl(v string) {
	o.CompleteUrl = &v
}

// GetCancelUrl returns the CancelUrl field value if set, zero value otherwise.
func (o *CreateBasketRequest) GetCancelUrl() string {
	if o == nil || IsNil(o.CancelUrl) {
		var ret string
		return ret
	}
	return *o.CancelUrl
}

// GetCancelUrlOk returns a tuple with the CancelUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBasketRequest) GetCancelUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CancelUrl) {
		return nil, false
	}
	return o.CancelUrl, true
}

// HasCancelUrl returns a boolean if a field has been set.
func (o *CreateBasketRequest) HasCancelUrl() bool {
	if o != nil && !IsNil(o.CancelUrl) {
		return true
	}

	return false
}

// SetCancelUrl gets a reference to the given string and assigns it to the CancelUrl field.
func (o *CreateBasketRequest) SetCancelUrl(v string) {
	o.CancelUrl = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *CreateBasketRequest) GetCustom() map[string]interface{} {
	if o == nil || IsNil(o.Custom) {
		var ret map[string]interface{}
		return ret
	}
	return o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBasketRequest) GetCustomOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Custom) {
		return map[string]interface{}{}, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *CreateBasketRequest) HasCustom() bool {
	if o != nil && !IsNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given map[string]interface{} and assigns it to the Custom field.
func (o *CreateBasketRequest) SetCustom(v map[string]interface{}) {
	o.Custom = v
}

// GetCompleteAutoRedirect returns the CompleteAutoRedirect field value if set, zero value otherwise.
func (o *CreateBasketRequest) GetCompleteAutoRedirect() bool {
	if o == nil || IsNil(o.CompleteAutoRedirect) {
		var ret bool
		return ret
	}
	return *o.CompleteAutoRedirect
}

// GetCompleteAutoRedirectOk returns a tuple with the CompleteAutoRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateBasketRequest) GetCompleteAutoRedirectOk() (*bool, bool) {
	if o == nil || IsNil(o.CompleteAutoRedirect) {
		return nil, false
	}
	return o.CompleteAutoRedirect, true
}

// HasCompleteAutoRedirect returns a boolean if a field has been set.
func (o *CreateBasketRequest) HasCompleteAutoRedirect() bool {
	if o != nil && !IsNil(o.CompleteAutoRedirect) {
		return true
	}

	return false
}

// SetCompleteAutoRedirect gets a reference to the given bool and assigns it to the CompleteAutoRedirect field.
func (o *CreateBasketRequest) SetCompleteAutoRedirect(v bool) {
	o.CompleteAutoRedirect = &v
}

func (o CreateBasketRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateBasketRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompleteUrl) {
		toSerialize["complete_url"] = o.CompleteUrl
	}
	if !IsNil(o.CancelUrl) {
		toSerialize["cancel_url"] = o.CancelUrl
	}
	if !IsNil(o.Custom) {
		toSerialize["custom"] = o.Custom
	}
	if !IsNil(o.CompleteAutoRedirect) {
		toSerialize["complete_auto_redirect"] = o.CompleteAutoRedirect
	}
	return toSerialize, nil
}

type NullableCreateBasketRequest struct {
	value *CreateBasketRequest
	isSet bool
}

func (v NullableCreateBasketRequest) Get() *CreateBasketRequest {
	return v.value
}

func (v *NullableCreateBasketRequest) Set(val *CreateBasketRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateBasketRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateBasketRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateBasketRequest(val *CreateBasketRequest) *NullableCreateBasketRequest {
	return &NullableCreateBasketRequest{value: val, isSet: true}
}

func (v NullableCreateBasketRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateBasketRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


