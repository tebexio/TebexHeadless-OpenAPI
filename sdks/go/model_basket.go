/*
Tebex Headless API

The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexHeadless

import (
	"encoding/json"
)

// checks if the Basket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Basket{}

// Basket struct for Basket
type Basket struct {
	Id *string `json:"id,omitempty"`
	Ident *string `json:"ident,omitempty"`
	Complete *bool `json:"complete,omitempty"`
	Email NullableString `json:"email,omitempty"`
	Username NullableString `json:"username,omitempty"`
	Coupons []Coupon `json:"coupons,omitempty"`
	Giftcards []GiftCard `json:"giftcards,omitempty"`
	// The creator code is used to share a percentage of the payment with another party. See more about creator codes at https://docs.tebex.io/creators/tebex-control-panel/engagement/creator-codes
	CreatorCode *string `json:"creator_code,omitempty"`
	CancelUrl *string `json:"cancel_url,omitempty"`
	CompleteUrl NullableString `json:"complete_url,omitempty"`
	CompleteAutoRedirect *bool `json:"complete_auto_redirect,omitempty"`
	// A two-character country code
	Country *string `json:"country,omitempty"`
	Ip *string `json:"ip,omitempty"`
	UsernameId *float32 `json:"username_id,omitempty"`
	BasePrice *float32 `json:"base_price,omitempty"`
	SalesTax *float32 `json:"sales_tax,omitempty"`
	TotalPrice *float32 `json:"total_price,omitempty"`
	// A 3 character currency code
	Currency *string `json:"currency,omitempty"`
	Packages []BasketPackage `json:"packages,omitempty"`
	Custom map[string]interface{} `json:"custom,omitempty"`
	Links *BasketLinks `json:"links,omitempty"`
}

// NewBasket instantiates a new Basket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasket() *Basket {
	this := Basket{}
	return &this
}

// NewBasketWithDefaults instantiates a new Basket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasketWithDefaults() *Basket {
	this := Basket{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Basket) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Basket) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Basket) SetId(v string) {
	o.Id = &v
}

// GetIdent returns the Ident field value if set, zero value otherwise.
func (o *Basket) GetIdent() string {
	if o == nil || IsNil(o.Ident) {
		var ret string
		return ret
	}
	return *o.Ident
}

// GetIdentOk returns a tuple with the Ident field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetIdentOk() (*string, bool) {
	if o == nil || IsNil(o.Ident) {
		return nil, false
	}
	return o.Ident, true
}

// HasIdent returns a boolean if a field has been set.
func (o *Basket) HasIdent() bool {
	if o != nil && !IsNil(o.Ident) {
		return true
	}

	return false
}

// SetIdent gets a reference to the given string and assigns it to the Ident field.
func (o *Basket) SetIdent(v string) {
	o.Ident = &v
}

// GetComplete returns the Complete field value if set, zero value otherwise.
func (o *Basket) GetComplete() bool {
	if o == nil || IsNil(o.Complete) {
		var ret bool
		return ret
	}
	return *o.Complete
}

// GetCompleteOk returns a tuple with the Complete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetCompleteOk() (*bool, bool) {
	if o == nil || IsNil(o.Complete) {
		return nil, false
	}
	return o.Complete, true
}

// HasComplete returns a boolean if a field has been set.
func (o *Basket) HasComplete() bool {
	if o != nil && !IsNil(o.Complete) {
		return true
	}

	return false
}

// SetComplete gets a reference to the given bool and assigns it to the Complete field.
func (o *Basket) SetComplete(v bool) {
	o.Complete = &v
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Basket) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Basket) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *Basket) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *Basket) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *Basket) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *Basket) UnsetEmail() {
	o.Email.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Basket) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Basket) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *Basket) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *Basket) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *Basket) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *Basket) UnsetUsername() {
	o.Username.Unset()
}

// GetCoupons returns the Coupons field value if set, zero value otherwise.
func (o *Basket) GetCoupons() []Coupon {
	if o == nil || IsNil(o.Coupons) {
		var ret []Coupon
		return ret
	}
	return o.Coupons
}

// GetCouponsOk returns a tuple with the Coupons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetCouponsOk() ([]Coupon, bool) {
	if o == nil || IsNil(o.Coupons) {
		return nil, false
	}
	return o.Coupons, true
}

// HasCoupons returns a boolean if a field has been set.
func (o *Basket) HasCoupons() bool {
	if o != nil && !IsNil(o.Coupons) {
		return true
	}

	return false
}

// SetCoupons gets a reference to the given []Coupon and assigns it to the Coupons field.
func (o *Basket) SetCoupons(v []Coupon) {
	o.Coupons = v
}

// GetGiftcards returns the Giftcards field value if set, zero value otherwise.
func (o *Basket) GetGiftcards() []GiftCard {
	if o == nil || IsNil(o.Giftcards) {
		var ret []GiftCard
		return ret
	}
	return o.Giftcards
}

// GetGiftcardsOk returns a tuple with the Giftcards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetGiftcardsOk() ([]GiftCard, bool) {
	if o == nil || IsNil(o.Giftcards) {
		return nil, false
	}
	return o.Giftcards, true
}

// HasGiftcards returns a boolean if a field has been set.
func (o *Basket) HasGiftcards() bool {
	if o != nil && !IsNil(o.Giftcards) {
		return true
	}

	return false
}

// SetGiftcards gets a reference to the given []GiftCard and assigns it to the Giftcards field.
func (o *Basket) SetGiftcards(v []GiftCard) {
	o.Giftcards = v
}

// GetCreatorCode returns the CreatorCode field value if set, zero value otherwise.
func (o *Basket) GetCreatorCode() string {
	if o == nil || IsNil(o.CreatorCode) {
		var ret string
		return ret
	}
	return *o.CreatorCode
}

// GetCreatorCodeOk returns a tuple with the CreatorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetCreatorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorCode) {
		return nil, false
	}
	return o.CreatorCode, true
}

// HasCreatorCode returns a boolean if a field has been set.
func (o *Basket) HasCreatorCode() bool {
	if o != nil && !IsNil(o.CreatorCode) {
		return true
	}

	return false
}

// SetCreatorCode gets a reference to the given string and assigns it to the CreatorCode field.
func (o *Basket) SetCreatorCode(v string) {
	o.CreatorCode = &v
}

// GetCancelUrl returns the CancelUrl field value if set, zero value otherwise.
func (o *Basket) GetCancelUrl() string {
	if o == nil || IsNil(o.CancelUrl) {
		var ret string
		return ret
	}
	return *o.CancelUrl
}

// GetCancelUrlOk returns a tuple with the CancelUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetCancelUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CancelUrl) {
		return nil, false
	}
	return o.CancelUrl, true
}

// HasCancelUrl returns a boolean if a field has been set.
func (o *Basket) HasCancelUrl() bool {
	if o != nil && !IsNil(o.CancelUrl) {
		return true
	}

	return false
}

// SetCancelUrl gets a reference to the given string and assigns it to the CancelUrl field.
func (o *Basket) SetCancelUrl(v string) {
	o.CancelUrl = &v
}

// GetCompleteUrl returns the CompleteUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Basket) GetCompleteUrl() string {
	if o == nil || IsNil(o.CompleteUrl.Get()) {
		var ret string
		return ret
	}
	return *o.CompleteUrl.Get()
}

// GetCompleteUrlOk returns a tuple with the CompleteUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Basket) GetCompleteUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompleteUrl.Get(), o.CompleteUrl.IsSet()
}

// HasCompleteUrl returns a boolean if a field has been set.
func (o *Basket) HasCompleteUrl() bool {
	if o != nil && o.CompleteUrl.IsSet() {
		return true
	}

	return false
}

// SetCompleteUrl gets a reference to the given NullableString and assigns it to the CompleteUrl field.
func (o *Basket) SetCompleteUrl(v string) {
	o.CompleteUrl.Set(&v)
}
// SetCompleteUrlNil sets the value for CompleteUrl to be an explicit nil
func (o *Basket) SetCompleteUrlNil() {
	o.CompleteUrl.Set(nil)
}

// UnsetCompleteUrl ensures that no value is present for CompleteUrl, not even an explicit nil
func (o *Basket) UnsetCompleteUrl() {
	o.CompleteUrl.Unset()
}

// GetCompleteAutoRedirect returns the CompleteAutoRedirect field value if set, zero value otherwise.
func (o *Basket) GetCompleteAutoRedirect() bool {
	if o == nil || IsNil(o.CompleteAutoRedirect) {
		var ret bool
		return ret
	}
	return *o.CompleteAutoRedirect
}

// GetCompleteAutoRedirectOk returns a tuple with the CompleteAutoRedirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetCompleteAutoRedirectOk() (*bool, bool) {
	if o == nil || IsNil(o.CompleteAutoRedirect) {
		return nil, false
	}
	return o.CompleteAutoRedirect, true
}

// HasCompleteAutoRedirect returns a boolean if a field has been set.
func (o *Basket) HasCompleteAutoRedirect() bool {
	if o != nil && !IsNil(o.CompleteAutoRedirect) {
		return true
	}

	return false
}

// SetCompleteAutoRedirect gets a reference to the given bool and assigns it to the CompleteAutoRedirect field.
func (o *Basket) SetCompleteAutoRedirect(v bool) {
	o.CompleteAutoRedirect = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *Basket) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Basket) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *Basket) SetCountry(v string) {
	o.Country = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *Basket) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *Basket) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *Basket) SetIp(v string) {
	o.Ip = &v
}

// GetUsernameId returns the UsernameId field value if set, zero value otherwise.
func (o *Basket) GetUsernameId() float32 {
	if o == nil || IsNil(o.UsernameId) {
		var ret float32
		return ret
	}
	return *o.UsernameId
}

// GetUsernameIdOk returns a tuple with the UsernameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetUsernameIdOk() (*float32, bool) {
	if o == nil || IsNil(o.UsernameId) {
		return nil, false
	}
	return o.UsernameId, true
}

// HasUsernameId returns a boolean if a field has been set.
func (o *Basket) HasUsernameId() bool {
	if o != nil && !IsNil(o.UsernameId) {
		return true
	}

	return false
}

// SetUsernameId gets a reference to the given float32 and assigns it to the UsernameId field.
func (o *Basket) SetUsernameId(v float32) {
	o.UsernameId = &v
}

// GetBasePrice returns the BasePrice field value if set, zero value otherwise.
func (o *Basket) GetBasePrice() float32 {
	if o == nil || IsNil(o.BasePrice) {
		var ret float32
		return ret
	}
	return *o.BasePrice
}

// GetBasePriceOk returns a tuple with the BasePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetBasePriceOk() (*float32, bool) {
	if o == nil || IsNil(o.BasePrice) {
		return nil, false
	}
	return o.BasePrice, true
}

// HasBasePrice returns a boolean if a field has been set.
func (o *Basket) HasBasePrice() bool {
	if o != nil && !IsNil(o.BasePrice) {
		return true
	}

	return false
}

// SetBasePrice gets a reference to the given float32 and assigns it to the BasePrice field.
func (o *Basket) SetBasePrice(v float32) {
	o.BasePrice = &v
}

// GetSalesTax returns the SalesTax field value if set, zero value otherwise.
func (o *Basket) GetSalesTax() float32 {
	if o == nil || IsNil(o.SalesTax) {
		var ret float32
		return ret
	}
	return *o.SalesTax
}

// GetSalesTaxOk returns a tuple with the SalesTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetSalesTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.SalesTax) {
		return nil, false
	}
	return o.SalesTax, true
}

// HasSalesTax returns a boolean if a field has been set.
func (o *Basket) HasSalesTax() bool {
	if o != nil && !IsNil(o.SalesTax) {
		return true
	}

	return false
}

// SetSalesTax gets a reference to the given float32 and assigns it to the SalesTax field.
func (o *Basket) SetSalesTax(v float32) {
	o.SalesTax = &v
}

// GetTotalPrice returns the TotalPrice field value if set, zero value otherwise.
func (o *Basket) GetTotalPrice() float32 {
	if o == nil || IsNil(o.TotalPrice) {
		var ret float32
		return ret
	}
	return *o.TotalPrice
}

// GetTotalPriceOk returns a tuple with the TotalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetTotalPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalPrice) {
		return nil, false
	}
	return o.TotalPrice, true
}

// HasTotalPrice returns a boolean if a field has been set.
func (o *Basket) HasTotalPrice() bool {
	if o != nil && !IsNil(o.TotalPrice) {
		return true
	}

	return false
}

// SetTotalPrice gets a reference to the given float32 and assigns it to the TotalPrice field.
func (o *Basket) SetTotalPrice(v float32) {
	o.TotalPrice = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Basket) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Basket) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Basket) SetCurrency(v string) {
	o.Currency = &v
}

// GetPackages returns the Packages field value if set, zero value otherwise.
func (o *Basket) GetPackages() []BasketPackage {
	if o == nil || IsNil(o.Packages) {
		var ret []BasketPackage
		return ret
	}
	return o.Packages
}

// GetPackagesOk returns a tuple with the Packages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetPackagesOk() ([]BasketPackage, bool) {
	if o == nil || IsNil(o.Packages) {
		return nil, false
	}
	return o.Packages, true
}

// HasPackages returns a boolean if a field has been set.
func (o *Basket) HasPackages() bool {
	if o != nil && !IsNil(o.Packages) {
		return true
	}

	return false
}

// SetPackages gets a reference to the given []BasketPackage and assigns it to the Packages field.
func (o *Basket) SetPackages(v []BasketPackage) {
	o.Packages = v
}

// GetCustom returns the Custom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Basket) GetCustom() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Basket) GetCustomOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Custom) {
		return map[string]interface{}{}, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *Basket) HasCustom() bool {
	if o != nil && !IsNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given map[string]interface{} and assigns it to the Custom field.
func (o *Basket) SetCustom(v map[string]interface{}) {
	o.Custom = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Basket) GetLinks() BasketLinks {
	if o == nil || IsNil(o.Links) {
		var ret BasketLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Basket) GetLinksOk() (*BasketLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Basket) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given BasketLinks and assigns it to the Links field.
func (o *Basket) SetLinks(v BasketLinks) {
	o.Links = &v
}

func (o Basket) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Basket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Ident) {
		toSerialize["ident"] = o.Ident
	}
	if !IsNil(o.Complete) {
		toSerialize["complete"] = o.Complete
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if !IsNil(o.Coupons) {
		toSerialize["coupons"] = o.Coupons
	}
	if !IsNil(o.Giftcards) {
		toSerialize["giftcards"] = o.Giftcards
	}
	if !IsNil(o.CreatorCode) {
		toSerialize["creator_code"] = o.CreatorCode
	}
	if !IsNil(o.CancelUrl) {
		toSerialize["cancel_url"] = o.CancelUrl
	}
	if o.CompleteUrl.IsSet() {
		toSerialize["complete_url"] = o.CompleteUrl.Get()
	}
	if !IsNil(o.CompleteAutoRedirect) {
		toSerialize["complete_auto_redirect"] = o.CompleteAutoRedirect
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.UsernameId) {
		toSerialize["username_id"] = o.UsernameId
	}
	if !IsNil(o.BasePrice) {
		toSerialize["base_price"] = o.BasePrice
	}
	if !IsNil(o.SalesTax) {
		toSerialize["sales_tax"] = o.SalesTax
	}
	if !IsNil(o.TotalPrice) {
		toSerialize["total_price"] = o.TotalPrice
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Packages) {
		toSerialize["packages"] = o.Packages
	}
	if o.Custom != nil {
		toSerialize["custom"] = o.Custom
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

type NullableBasket struct {
	value *Basket
	isSet bool
}

func (v NullableBasket) Get() *Basket {
	return v.value
}

func (v *NullableBasket) Set(val *Basket) {
	v.value = val
	v.isSet = true
}

func (v NullableBasket) IsSet() bool {
	return v.isSet
}

func (v *NullableBasket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasket(val *Basket) *NullableBasket {
	return &NullableBasket{value: val, isSet: true}
}

func (v NullableBasket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


