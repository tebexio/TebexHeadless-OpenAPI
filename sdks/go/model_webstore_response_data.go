/*
Tebex Headless API

The headless API is designed for implementing your own store frontend with the data of your store. You are able to call the Headless API directly from a web browser (such as within an SPA), or from a backend server, such as for in-game GUIs.

API version: 1.0.0
Contact: tebex-integrations@overwolf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package TebexHeadless

import (
	"encoding/json"
)

// checks if the WebstoreResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebstoreResponseData{}

// WebstoreResponseData struct for WebstoreResponseData
type WebstoreResponseData struct {
	Schema *Webstore `json:"schema,omitempty"`
}

// NewWebstoreResponseData instantiates a new WebstoreResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebstoreResponseData() *WebstoreResponseData {
	this := WebstoreResponseData{}
	return &this
}

// NewWebstoreResponseDataWithDefaults instantiates a new WebstoreResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebstoreResponseDataWithDefaults() *WebstoreResponseData {
	this := WebstoreResponseData{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *WebstoreResponseData) GetSchema() Webstore {
	if o == nil || IsNil(o.Schema) {
		var ret Webstore
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebstoreResponseData) GetSchemaOk() (*Webstore, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *WebstoreResponseData) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given Webstore and assigns it to the Schema field.
func (o *WebstoreResponseData) SetSchema(v Webstore) {
	o.Schema = &v
}

func (o WebstoreResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebstoreResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	return toSerialize, nil
}

type NullableWebstoreResponseData struct {
	value *WebstoreResponseData
	isSet bool
}

func (v NullableWebstoreResponseData) Get() *WebstoreResponseData {
	return v.value
}

func (v *NullableWebstoreResponseData) Set(val *WebstoreResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableWebstoreResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableWebstoreResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebstoreResponseData(val *WebstoreResponseData) *NullableWebstoreResponseData {
	return &NullableWebstoreResponseData{value: val, isSet: true}
}

func (v NullableWebstoreResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebstoreResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


